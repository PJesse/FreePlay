!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT_DELAY_H	Demo/Common/include/AbortDelay.h	71;"	d
A_BLOCK_LINK	Source/portable/MemMang/heap_2.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
A_BLOCK_LINK	Source/portable/MemMang/heap_4.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
A_BLOCK_LINK	Source/portable/MemMang/heap_5.c	/^typedef struct A_BLOCK_LINK$/;"	s	file:
BLOCKING_QUEUE_PARAMETERS	Demo/Common/Full/BlockQ.c	/^typedef struct BLOCKING_QUEUE_PARAMETERS$/;"	s	file:
BLOCKING_QUEUE_PARAMETERS	Demo/Common/Minimal/BlockQ.c	/^typedef struct BLOCKING_QUEUE_PARAMETERS$/;"	s	file:
BLOCK_Q_H	Demo/Common/include/BlockQ.h	71;"	d
BLOCK_TIME_TEST_H	Demo/Common/include/blocktim.h	71;"	d
BaseType_t	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	/^typedef short BaseType_t;$/;"	t
BlockLink_t	Source/portable/MemMang/heap_2.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
BlockLink_t	Source/portable/MemMang/heap_4.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
BlockLink_t	Source/portable/MemMang/heap_5.c	/^} BlockLink_t;$/;"	t	typeref:struct:A_BLOCK_LINK	file:
COMTEST_H	Demo/Common/include/comtest.h	71;"	d
COMTEST_H	Demo/Common/include/comtest2.h	71;"	d
COMTEST_STRINGS_H	Demo/Common/include/comtest_strings.h	71;"	d
COUNT_SEMAPHORE_TEST_H	Demo/Common/include/countsem.h	71;"	d
COUNT_SEM_STRUCT	Demo/Common/Minimal/countsem.c	/^typedef struct COUNT_SEM_STRUCT$/;"	s	file:
CO_ROUTINE_H	Source/include/croutine.h	71;"	d
CRCB_t	Source/include/croutine.h	/^} CRCB_t; \/* Co-routine control block.  Note must be identical in size down to uxPriority with TCB_t. *\/$/;"	t	typeref:struct:corCoRoutineControlBlock
CRFLASH_LED_H	Demo/Common/include/crflash.h	71;"	d
CRHOOK_H	Demo/Common/include/crhook.h	71;"	d
CallbackParameters_t	Source/timers.c	/^} CallbackParameters_t;$/;"	t	typeref:struct:tmrCallbackParameters	file:
CoRoutineHandle_t	Source/include/croutine.h	/^typedef void * CoRoutineHandle_t;$/;"	t
DEPRECATED_DEFINITIONS_H	Source/include/deprecated_definitions.h	71;"	d
DYNAMIC_MANIPULATION_H	Demo/Common/include/dynamic.h	71;"	d
DaemonTaskMessage_t	Source/timers.c	/^} DaemonTaskMessage_t;$/;"	t	typeref:struct:tmrTimerQueueMessage	file:
EVENTS_TEST_H	Demo/Common/include/mevents.h	71;"	d
EVENT_GROUPS_DEMO_H	Demo/Common/include/EventGroupsDemo.h	79;"	d
EVENT_GROUPS_H	Source/include/event_groups.h	71;"	d
EventBits_t	Source/include/event_groups.h	/^typedef TickType_t EventBits_t;$/;"	t
EventGroupHandle_t	Source/include/event_groups.h	/^typedef void * EventGroupHandle_t;$/;"	t
EventGroup_t	Source/event_groups.c	/^} EventGroup_t;$/;"	t	typeref:struct:xEventGroupDefinition	file:
FILE_IO_H	Demo/Common/include/fileIO.h	71;"	d
FLASH_LED_H	Demo/Common/include/flash.h	71;"	d
FLASH_TIMER_H	Demo/Common/include/flash_timer.h	71;"	d
FLOP_TASKS_H	Demo/Common/include/flop.h	71;"	d
FREERTOS_CONFIG_H	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	71;"	d
GEN_Q_TEST_H	Demo/Common/include/GenQTest.h	71;"	d
HeapRegion	Source/include/portable.h	/^typedef struct HeapRegion$/;"	s
HeapRegion_t	Source/include/portable.h	/^} HeapRegion_t;$/;"	t	typeref:struct:HeapRegion
INCLUDE_eTaskGetState	Source/include/FreeRTOS.h	202;"	d
INCLUDE_uxTaskGetStackHighWaterMark	Source/include/FreeRTOS.h	198;"	d
INCLUDE_uxTaskPriorityGet	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	108;"	d
INCLUDE_uxTaskPriorityGet	Source/include/FreeRTOS.h	158;"	d
INCLUDE_vTaskCleanUpResources	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	110;"	d
INCLUDE_vTaskDelay	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	113;"	d
INCLUDE_vTaskDelay	Source/include/FreeRTOS.h	174;"	d
INCLUDE_vTaskDelayUntil	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	112;"	d
INCLUDE_vTaskDelayUntil	Source/include/FreeRTOS.h	170;"	d
INCLUDE_vTaskDelete	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	109;"	d
INCLUDE_vTaskDelete	Source/include/FreeRTOS.h	162;"	d
INCLUDE_vTaskPrioritySet	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	107;"	d
INCLUDE_vTaskPrioritySet	Source/include/FreeRTOS.h	154;"	d
INCLUDE_vTaskSuspend	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	111;"	d
INCLUDE_vTaskSuspend	Source/include/FreeRTOS.h	166;"	d
INCLUDE_xQueueGetMutexHolder	Source/include/FreeRTOS.h	186;"	d
INCLUDE_xSemaphoreGetMutexHolder	Source/include/FreeRTOS.h	190;"	d
INCLUDE_xTaskAbortDelay	Source/include/FreeRTOS.h	182;"	d
INCLUDE_xTaskGetCurrentTaskHandle	Source/include/FreeRTOS.h	218;"	d
INCLUDE_xTaskGetHandle	Source/include/FreeRTOS.h	194;"	d
INCLUDE_xTaskGetIdleTaskHandle	Source/include/FreeRTOS.h	178;"	d
INCLUDE_xTaskGetSchedulerState	Source/include/FreeRTOS.h	214;"	d
INCLUDE_xTaskResumeFromISR	Source/include/FreeRTOS.h	206;"	d
INCLUDE_xTimerPendFunctionCall	Source/include/FreeRTOS.h	210;"	d
INC_FREERTOS_H	Source/include/FreeRTOS.h	71;"	d
INC_TASK_H	Source/include/task.h	72;"	d
INTEGER_TASKS_H	Demo/Common/include/integer.h	71;"	d
INT_SEM_TEST_H	Demo/Common/include/IntSemTest.h	71;"	d
LED_PARAMETERS	Demo/Common/Full/flash.c	/^typedef struct LED_PARAMETERS$/;"	s	file:
LIST_H	Source/include/list.h	103;"	d
ListItem_t	Source/include/list.h	/^typedef struct xLIST_ITEM ListItem_t;					\/* For some reason lint wants this as two separate definitions. *\/$/;"	t	typeref:struct:xLIST_ITEM
List_t	Source/include/list.h	/^} List_t;$/;"	t	typeref:struct:xLIST
MPU_PROTOTYPES_H	Source/include/mpu_prototypes.h	80;"	d
MPU_WRAPPERS_H	Source/include/mpu_wrappers.h	71;"	d
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/event_groups.c	76;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/event_groups.c	88;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/Common/mpu_wrappers.c	78;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/Common/mpu_wrappers.c	88;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_1.c	83;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_1.c	88;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_2.c	84;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_2.c	89;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_3.c	87;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_3.c	92;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_4.c	83;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_4.c	88;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_5.c	117;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/portable/MemMang/heap_5.c	122;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/queue.c	76;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/queue.c	90;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/tasks.c	77;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/tasks.c	89;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/timers.c	76;"	d	file:
MPU_WRAPPERS_INCLUDED_FROM_API_FILE	Source/timers.c	91;"	d	file:
MPU_eTaskGetState	Source/portable/Common/mpu_wrappers.c	/^	eTaskState MPU_eTaskGetState( TaskHandle_t pxTask )$/;"	f
MPU_pcQueueGetName	Source/portable/Common/mpu_wrappers.c	/^	const char *MPU_pcQueueGetName( QueueHandle_t xQueue )$/;"	f
MPU_pcTaskGetName	Source/portable/Common/mpu_wrappers.c	/^char * MPU_pcTaskGetName( TaskHandle_t xTaskToQuery )$/;"	f
MPU_pcTimerGetName	Source/portable/Common/mpu_wrappers.c	/^	const char * MPU_pcTimerGetName( TimerHandle_t xTimer )$/;"	f
MPU_pvPortMalloc	Source/portable/Common/mpu_wrappers.c	/^	void *MPU_pvPortMalloc( size_t xSize )$/;"	f
MPU_pvTaskGetThreadLocalStoragePointer	Source/portable/Common/mpu_wrappers.c	/^	void *MPU_pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )$/;"	f
MPU_pvTimerGetTimerID	Source/portable/Common/mpu_wrappers.c	/^	void *MPU_pvTimerGetTimerID( const TimerHandle_t xTimer )$/;"	f
MPU_ulTaskNotifyTake	Source/portable/Common/mpu_wrappers.c	/^	uint32_t MPU_ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )$/;"	f
MPU_uxQueueMessagesWaiting	Source/portable/Common/mpu_wrappers.c	/^UBaseType_t MPU_uxQueueMessagesWaiting( const QueueHandle_t pxQueue )$/;"	f
MPU_uxQueueSpacesAvailable	Source/portable/Common/mpu_wrappers.c	/^UBaseType_t MPU_uxQueueSpacesAvailable( const QueueHandle_t xQueue )$/;"	f
MPU_uxTaskGetNumberOfTasks	Source/portable/Common/mpu_wrappers.c	/^UBaseType_t MPU_uxTaskGetNumberOfTasks( void )$/;"	f
MPU_uxTaskGetStackHighWaterMark	Source/portable/Common/mpu_wrappers.c	/^	UBaseType_t MPU_uxTaskGetStackHighWaterMark( TaskHandle_t xTask )$/;"	f
MPU_uxTaskGetSystemState	Source/portable/Common/mpu_wrappers.c	/^	UBaseType_t MPU_uxTaskGetSystemState( TaskStatus_t *pxTaskStatusArray, UBaseType_t uxArraySize, uint32_t *pulTotalRunTime )$/;"	f
MPU_uxTaskPriorityGet	Source/portable/Common/mpu_wrappers.c	/^	UBaseType_t MPU_uxTaskPriorityGet( TaskHandle_t pxTask )$/;"	f
MPU_vEventGroupDelete	Source/portable/Common/mpu_wrappers.c	/^void MPU_vEventGroupDelete( EventGroupHandle_t xEventGroup )$/;"	f
MPU_vPortFree	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vPortFree( void *pv )$/;"	f
MPU_vPortInitialiseBlocks	Source/portable/Common/mpu_wrappers.c	/^void MPU_vPortInitialiseBlocks( void )$/;"	f
MPU_vQueueAddToRegistry	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcName )$/;"	f
MPU_vQueueDelete	Source/portable/Common/mpu_wrappers.c	/^void MPU_vQueueDelete( QueueHandle_t xQueue )$/;"	f
MPU_vQueueUnregisterQueue	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vQueueUnregisterQueue( QueueHandle_t xQueue )$/;"	f
MPU_vTaskAllocateMPURegions	Source/portable/Common/mpu_wrappers.c	/^void MPU_vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const xRegions )$/;"	f
MPU_vTaskDelay	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskDelay( TickType_t xTicksToDelay )$/;"	f
MPU_vTaskDelayUntil	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, TickType_t xTimeIncrement )$/;"	f
MPU_vTaskDelete	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskDelete( TaskHandle_t pxTaskToDelete )$/;"	f
MPU_vTaskGetInfo	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )$/;"	f
MPU_vTaskGetRunTimeStats	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskGetRunTimeStats( char *pcWriteBuffer )$/;"	f
MPU_vTaskList	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskList( char *pcWriteBuffer )$/;"	f
MPU_vTaskPrioritySet	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskPrioritySet( TaskHandle_t pxTask, UBaseType_t uxNewPriority )$/;"	f
MPU_vTaskResume	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskResume( TaskHandle_t pxTaskToResume )$/;"	f
MPU_vTaskSetApplicationTaskTag	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxTagValue )$/;"	f
MPU_vTaskSetThreadLocalStoragePointer	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )$/;"	f
MPU_vTaskSetTimeOutState	Source/portable/Common/mpu_wrappers.c	/^void MPU_vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )$/;"	f
MPU_vTaskSuspend	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTaskSuspend( TaskHandle_t pxTaskToSuspend )$/;"	f
MPU_vTaskSuspendAll	Source/portable/Common/mpu_wrappers.c	/^void MPU_vTaskSuspendAll( void )$/;"	f
MPU_vTimerSetTimerID	Source/portable/Common/mpu_wrappers.c	/^	void MPU_vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )$/;"	f
MPU_xEventGroupClearBits	Source/portable/Common/mpu_wrappers.c	/^EventBits_t MPU_xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )$/;"	f
MPU_xEventGroupCreate	Source/portable/Common/mpu_wrappers.c	/^	EventGroupHandle_t MPU_xEventGroupCreate( void )$/;"	f
MPU_xEventGroupCreateStatic	Source/portable/Common/mpu_wrappers.c	/^	EventGroupHandle_t MPU_xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )$/;"	f
MPU_xEventGroupSetBits	Source/portable/Common/mpu_wrappers.c	/^EventBits_t MPU_xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )$/;"	f
MPU_xEventGroupSync	Source/portable/Common/mpu_wrappers.c	/^EventBits_t MPU_xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )$/;"	f
MPU_xEventGroupWaitBits	Source/portable/Common/mpu_wrappers.c	/^EventBits_t MPU_xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )$/;"	f
MPU_xPortGetFreeHeapSize	Source/portable/Common/mpu_wrappers.c	/^size_t MPU_xPortGetFreeHeapSize( void )$/;"	f
MPU_xQueueAddToSet	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )$/;"	f
MPU_xQueueCreateCountingSemaphore	Source/portable/Common/mpu_wrappers.c	/^	QueueHandle_t MPU_xQueueCreateCountingSemaphore( UBaseType_t uxCountValue, UBaseType_t uxInitialCount )$/;"	f
MPU_xQueueCreateCountingSemaphoreStatic	Source/portable/Common/mpu_wrappers.c	/^	QueueHandle_t MPU_xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )$/;"	f
MPU_xQueueCreateMutex	Source/portable/Common/mpu_wrappers.c	/^	QueueHandle_t MPU_xQueueCreateMutex( const uint8_t ucQueueType )$/;"	f
MPU_xQueueCreateMutexStatic	Source/portable/Common/mpu_wrappers.c	/^	QueueHandle_t MPU_xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )$/;"	f
MPU_xQueueCreateSet	Source/portable/Common/mpu_wrappers.c	/^	QueueSetHandle_t MPU_xQueueCreateSet( UBaseType_t uxEventQueueLength )$/;"	f
MPU_xQueueGenericCreate	Source/portable/Common/mpu_wrappers.c	/^	QueueHandle_t MPU_xQueueGenericCreate( UBaseType_t uxQueueLength, UBaseType_t uxItemSize, uint8_t ucQueueType )$/;"	f
MPU_xQueueGenericCreateStatic	Source/portable/Common/mpu_wrappers.c	/^	QueueHandle_t MPU_xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )$/;"	f
MPU_xQueueGenericReceive	Source/portable/Common/mpu_wrappers.c	/^BaseType_t MPU_xQueueGenericReceive( QueueHandle_t pxQueue, void * const pvBuffer, TickType_t xTicksToWait, BaseType_t xJustPeeking )$/;"	f
MPU_xQueueGenericReset	Source/portable/Common/mpu_wrappers.c	/^BaseType_t MPU_xQueueGenericReset( QueueHandle_t pxQueue, BaseType_t xNewQueue )$/;"	f
MPU_xQueueGenericSend	Source/portable/Common/mpu_wrappers.c	/^BaseType_t MPU_xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, BaseType_t xCopyPosition )$/;"	f
MPU_xQueueGetMutexHolder	Source/portable/Common/mpu_wrappers.c	/^void* MPU_xQueueGetMutexHolder( QueueHandle_t xSemaphore )$/;"	f
MPU_xQueueGiveMutexRecursive	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xQueueGiveMutexRecursive( QueueHandle_t xMutex )$/;"	f
MPU_xQueuePeekFromISR	Source/portable/Common/mpu_wrappers.c	/^BaseType_t MPU_xQueuePeekFromISR( QueueHandle_t pxQueue, void * const pvBuffer )$/;"	f
MPU_xQueueRemoveFromSet	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )$/;"	f
MPU_xQueueSelectFromSet	Source/portable/Common/mpu_wrappers.c	/^	QueueSetMemberHandle_t MPU_xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t xBlockTimeTicks )$/;"	f
MPU_xQueueTakeMutexRecursive	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xBlockTime )$/;"	f
MPU_xTaskAbortDelay	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTaskAbortDelay( TaskHandle_t xTask )$/;"	f
MPU_xTaskCallApplicationTaskHook	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )$/;"	f
MPU_xTaskCheckForTimeOut	Source/portable/Common/mpu_wrappers.c	/^BaseType_t MPU_xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )$/;"	f
MPU_xTaskCreate	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTaskCreate( TaskFunction_t pvTaskCode, const char * const pcName, uint16_t usStackDepth, void *pvParameters, UBaseType_t uxPriority, TaskHandle_t *pxCreatedTask )$/;"	f
MPU_xTaskCreateRestricted	Source/portable/Common/mpu_wrappers.c	/^BaseType_t MPU_xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask )$/;"	f
MPU_xTaskCreateStatic	Source/portable/Common/mpu_wrappers.c	/^	TaskHandle_t MPU_xTaskCreateStatic( TaskFunction_t pxTaskCode, const char * const pcName, const uint32_t ulStackDepth, void * const pvParameters, UBaseType_t uxPriority, StackType_t * const puxStackBuffer, StaticTask_t * const pxTaskBuffer )$/;"	f
MPU_xTaskGenericNotify	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )$/;"	f
MPU_xTaskGetApplicationTaskTag	Source/portable/Common/mpu_wrappers.c	/^	TaskHookFunction_t MPU_xTaskGetApplicationTaskTag( TaskHandle_t xTask )$/;"	f
MPU_xTaskGetCurrentTaskHandle	Source/portable/Common/mpu_wrappers.c	/^	TaskHandle_t MPU_xTaskGetCurrentTaskHandle( void )$/;"	f
MPU_xTaskGetHandle	Source/portable/Common/mpu_wrappers.c	/^	TaskHandle_t MPU_xTaskGetHandle( const char *pcNameToQuery )$/;"	f
MPU_xTaskGetIdleTaskHandle	Source/portable/Common/mpu_wrappers.c	/^	TaskHandle_t MPU_xTaskGetIdleTaskHandle( void )$/;"	f
MPU_xTaskGetSchedulerState	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTaskGetSchedulerState( void )$/;"	f
MPU_xTaskGetTickCount	Source/portable/Common/mpu_wrappers.c	/^TickType_t MPU_xTaskGetTickCount( void )$/;"	f
MPU_xTaskNotifyStateClear	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTaskNotifyStateClear( TaskHandle_t xTask )$/;"	f
MPU_xTaskNotifyWait	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )$/;"	f
MPU_xTaskResumeAll	Source/portable/Common/mpu_wrappers.c	/^BaseType_t MPU_xTaskResumeAll( void )$/;"	f
MPU_xTimerCreate	Source/portable/Common/mpu_wrappers.c	/^	TimerHandle_t MPU_xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction )$/;"	f
MPU_xTimerCreateStatic	Source/portable/Common/mpu_wrappers.c	/^	TimerHandle_t MPU_xTimerCreateStatic( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, StaticTimer_t *pxTimerBuffer )$/;"	f
MPU_xTimerGenericCommand	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )$/;"	f
MPU_xTimerGetExpiryTime	Source/portable/Common/mpu_wrappers.c	/^	TickType_t MPU_xTimerGetExpiryTime( TimerHandle_t xTimer )$/;"	f
MPU_xTimerGetPeriod	Source/portable/Common/mpu_wrappers.c	/^	TickType_t MPU_xTimerGetPeriod( TimerHandle_t xTimer )$/;"	f
MPU_xTimerGetTimerDaemonTaskHandle	Source/portable/Common/mpu_wrappers.c	/^	TaskHandle_t MPU_xTimerGetTimerDaemonTaskHandle( void )$/;"	f
MPU_xTimerIsTimerActive	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTimerIsTimerActive( TimerHandle_t xTimer )$/;"	f
MPU_xTimerPendFunctionCall	Source/portable/Common/mpu_wrappers.c	/^	BaseType_t MPU_xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )$/;"	f
MemoryRegion_t	Source/include/task.h	/^} MemoryRegion_t;$/;"	t	typeref:struct:xMEMORY_REGION
MiniListItem_t	Source/include/list.h	/^typedef struct xMINI_LIST_ITEM MiniListItem_t;$/;"	t	typeref:struct:xMINI_LIST_ITEM
POLLED_Q_H	Demo/Common/include/PollQ.h	71;"	d
PORTABLE_H	Source/include/portable.h	75;"	d
PORTMACRO_H	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	71;"	d
PRINT_H	Demo/Common/include/print.h	71;"	d
PRIVILEGED_DATA	Source/include/mpu_wrappers.h	187;"	d
PRIVILEGED_DATA	Source/include/mpu_wrappers.h	194;"	d
PRIVILEGED_FUNCTION	Source/include/mpu_wrappers.h	181;"	d
PRIVILEGED_FUNCTION	Source/include/mpu_wrappers.h	186;"	d
PRIVILEGED_FUNCTION	Source/include/mpu_wrappers.h	193;"	d
PROJDEFS_H	Source/include/projdefs.h	71;"	d
PendedFunction_t	Source/include/timers.h	/^typedef void (*PendedFunction_t)( void *, uint32_t );$/;"	t
QUEUE_ACCESS_TEST	Demo/Common/include/IntQueue.h	71;"	d
QUEUE_H	Source/include/queue.h	72;"	d
QUEUE_OVERWRITE_H	Demo/Common/include/QueueOverwrite.h	71;"	d
QUEUE_REGISTRY_ITEM	Source/queue.c	/^	typedef struct QUEUE_REGISTRY_ITEM$/;"	s	file:
QUEUE_SET_POLLING_H	Demo/Common/include/QueueSetPolling.h	71;"	d
QUEUE_WAIT_MULTIPLE_H	Demo/Common/include/QueueSet.h	71;"	d
Q_PEEK_TEST_H	Demo/Common/include/QPeek.h	71;"	d
QueueDefinition	Source/queue.c	/^typedef struct QueueDefinition$/;"	s	file:
QueueHandle_t	Source/include/queue.h	/^typedef void * QueueHandle_t;$/;"	t
QueueRegistryItem_t	Source/queue.c	/^	typedef xQueueRegistryItem QueueRegistryItem_t;$/;"	t	file:
QueueSetHandle_t	Source/include/queue.h	/^typedef void * QueueSetHandle_t;$/;"	t
QueueSetMemberHandle_t	Source/include/queue.h	/^typedef void * QueueSetMemberHandle_t;$/;"	t
Queue_t	Source/queue.c	/^typedef xQUEUE Queue_t;$/;"	t	file:
RECURSIVE_MUTEX_TEST_H	Demo/Common/include/recmutex.h	71;"	d
SEMAPHORE_H	Source/include/semphr.h	71;"	d
SEMAPHORE_PARAMETERS	Demo/Common/Full/semtest.c	/^typedef struct SEMAPHORE_PARAMETERS$/;"	s	file:
SEMAPHORE_PARAMETERS	Demo/Common/Minimal/semtest.c	/^typedef struct SEMAPHORE_PARAMETERS$/;"	s	file:
SEMAPHORE_TEST_H	Demo/Common/include/semtest.h	71;"	d
SERIAL_COMMS_H	Demo/Common/include/serial.h	71;"	d
STACK_MACROS_H	Source/include/StackMacros.h	71;"	d
STATIC_ALLOCATION_H	Demo/Common/include/StaticAllocation.h	71;"	d
SUICIDE_TASK_H	Demo/Common/include/death.h	71;"	d
SemaphoreHandle_t	Source/include/semphr.h	/^typedef QueueHandle_t SemaphoreHandle_t;$/;"	t
StackType_t	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	/^typedef portSTACK_TYPE StackType_t;$/;"	t
StaticEventGroup_t	Source/include/FreeRTOS.h	/^} StaticEventGroup_t;$/;"	t	typeref:struct:xSTATIC_EVENT_GROUP
StaticListItem_t	Source/include/FreeRTOS.h	/^typedef struct xSTATIC_LIST_ITEM StaticListItem_t;$/;"	t	typeref:struct:xSTATIC_LIST_ITEM
StaticList_t	Source/include/FreeRTOS.h	/^} StaticList_t;$/;"	t	typeref:struct:xSTATIC_LIST
StaticMiniListItem_t	Source/include/FreeRTOS.h	/^typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;$/;"	t	typeref:struct:xSTATIC_MINI_LIST_ITEM
StaticQueue_t	Source/include/FreeRTOS.h	/^} StaticQueue_t;$/;"	t	typeref:struct:xSTATIC_QUEUE
StaticSemaphore_t	Source/include/FreeRTOS.h	/^typedef StaticQueue_t StaticSemaphore_t;$/;"	t
StaticTask_t	Source/include/FreeRTOS.h	/^} StaticTask_t;$/;"	t	typeref:struct:xSTATIC_TCB
StaticTimer_t	Source/include/FreeRTOS.h	/^} StaticTimer_t;$/;"	t	typeref:struct:xSTATIC_TIMER
TASK_NOTIFY_H	Demo/Common/include/TaskNotify.h	71;"	d
TCB_t	Source/tasks.c	/^typedef tskTCB TCB_t;$/;"	t	file:
TIMERS_H	Source/include/timers.h	72;"	d
TIMER_DEMO_H	Demo/Common/include/TimerDemo.h	71;"	d
TIMER_TEST_H	Demo/dsPIC33E_MPLAB/timertest.h	71;"	d
TaskFunction_t	Source/include/projdefs.h	/^typedef void (*TaskFunction_t)( void * );$/;"	t
TaskHandle_t	Source/include/task.h	/^typedef void * TaskHandle_t;$/;"	t
TaskHookFunction_t	Source/include/task.h	/^typedef BaseType_t (*TaskHookFunction_t)( void * );$/;"	t
TaskParameters_t	Source/include/task.h	/^} TaskParameters_t;$/;"	t	typeref:struct:xTASK_PARAMETERS
TaskStatus_t	Source/include/task.h	/^} TaskStatus_t;$/;"	t	typeref:struct:xTASK_STATUS
TickType_t	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	/^	typedef uint16_t TickType_t;$/;"	t
TickType_t	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	/^	typedef uint32_t TickType_t;$/;"	t
TimeOut_t	Source/include/task.h	/^} TimeOut_t;$/;"	t	typeref:struct:xTIME_OUT
TimerCallbackFunction_t	Source/include/timers.h	/^typedef void (*TimerCallbackFunction_t)( TimerHandle_t xTimer );$/;"	t
TimerHandle_t	Source/include/timers.h	/^typedef void * TimerHandle_t;$/;"	t
TimerParameter_t	Source/timers.c	/^} TimerParameter_t;$/;"	t	typeref:struct:tmrTimerParameters	file:
Timer_t	Source/timers.c	/^typedef xTIMER Timer_t;$/;"	t	file:
UBaseType_t	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	/^typedef unsigned short UBaseType_t;$/;"	t
_T2Interrupt	Demo/dsPIC33E_MPLAB/timertest.c	/^void __attribute__((__interrupt__, auto_psv)) _T2Interrupt( void )$/;"	f
_U2RXInterrupt	Demo/dsPIC33E_MPLAB/serial/serial.c	/^void __attribute__((__interrupt__, auto_psv)) _U2RXInterrupt( void )$/;"	f
_U2TXInterrupt	Demo/dsPIC33E_MPLAB/serial/serial.c	/^void __attribute__((__interrupt__, auto_psv)) _U2TXInterrupt( void )$/;"	f
abtBLOCKING_PRIORITY	Demo/Common/Minimal/AbortDelay.c	102;"	d	file:
abtCONTROLLING_PRIORITY	Demo/Common/Minimal/AbortDelay.c	98;"	d	file:
abtDELAY_ABORTS	Demo/Common/Minimal/AbortDelay.c	108;"	d	file:
abtDELAY_UNTIL_ABORTS	Demo/Common/Minimal/AbortDelay.c	109;"	d	file:
abtEVENT_GROUP_ABORTS	Demo/Common/Minimal/AbortDelay.c	111;"	d	file:
abtMAX_TESTS	Demo/Common/Minimal/AbortDelay.c	113;"	d	file:
abtNOTIFY_TAKE_ABORTS	Demo/Common/Minimal/AbortDelay.c	107;"	d	file:
abtNOTIFY_WAIT_ABORTS	Demo/Common/Minimal/AbortDelay.c	106;"	d	file:
abtQUEUE_SEND_ABORTS	Demo/Common/Minimal/AbortDelay.c	112;"	d	file:
abtSEMAPHORE_TAKE_ABORTS	Demo/Common/Minimal/AbortDelay.c	110;"	d	file:
bktALLOWABLE_MARGIN	Demo/Common/Minimal/blocktim.c	97;"	d	file:
bktDONT_BLOCK	Demo/Common/Minimal/blocktim.c	99;"	d	file:
bktPRIMARY_BLOCK_TIME	Demo/Common/Minimal/blocktim.c	96;"	d	file:
bktPRIMARY_PRIORITY	Demo/Common/Minimal/blocktim.c	86;"	d	file:
bktQUEUE_LENGTH	Demo/Common/Minimal/blocktim.c	94;"	d	file:
bktRUN_INDICATOR	Demo/Common/Minimal/blocktim.c	100;"	d	file:
bktSECONDARY_PRIORITY	Demo/Common/Minimal/blocktim.c	90;"	d	file:
bktSHORT_WAIT	Demo/Common/Minimal/blocktim.c	95;"	d	file:
bktTIME_TO_BLOCK	Demo/Common/Minimal/blocktim.c	98;"	d	file:
blckqNUM_TASK_SETS	Demo/Common/Full/BlockQ.c	127;"	d	file:
blckqNUM_TASK_SETS	Demo/Common/Minimal/BlockQ.c	105;"	d	file:
blckqSTACK_SIZE	Demo/Common/Full/BlockQ.c	126;"	d	file:
blckqSTACK_SIZE	Demo/Common/Minimal/BlockQ.c	104;"	d	file:
cRxLock	Source/queue.c	/^	volatile int8_t cRxLock;		\/*< Stores the number of items received from the queue (removed from the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. *\/$/;"	m	struct:QueueDefinition	file:
cTxLock	Source/queue.c	/^	volatile int8_t cTxLock;		\/*< Stores the number of items transmitted to the queue (added to the queue) while the queue was locked.  Set to queueUNLOCKED when the queue is not locked. *\/$/;"	m	struct:QueueDefinition	file:
comBUFFER_LEN	Demo/Common/Minimal/comtest.c	133;"	d	file:
comFIRST_BYTE	Demo/Common/Minimal/comtest.c	130;"	d	file:
comINITIAL_RX_COUNT_VALUE	Demo/Common/Minimal/comtest.c	134;"	d	file:
comLAST_BYTE	Demo/Common/Minimal/comtest.c	131;"	d	file:
comMAX_CONSECUTIVE_ERRORS	Demo/Common/Full/comtest.c	149;"	d	file:
comNO_BLOCK	Demo/Common/Minimal/comtest.c	124;"	d	file:
comOFFSET_TIME	Demo/Common/Minimal/comtest.c	120;"	d	file:
comOFFSET_TIME	Demo/Common/Minimal/comtest_strings.c	128;"	d	file:
comRX_BLOCK_TIME	Demo/Common/Minimal/comtest.c	127;"	d	file:
comRX_LED_OFFSET	Demo/Common/Minimal/comtest.c	113;"	d	file:
comRX_LED_OFFSET	Demo/Common/Minimal/comtest_strings.c	121;"	d	file:
comRX_RELATIVE_PRIORITY	Demo/Common/Full/comtest.c	153;"	d	file:
comSHORT_DELAY	Demo/Common/Minimal/comtest_strings.c	139;"	d	file:
comSTACK_SIZE	Demo/Common/Full/comtest.c	151;"	d	file:
comSTACK_SIZE	Demo/Common/Minimal/comtest.c	111;"	d	file:
comSTACK_SIZE	Demo/Common/Minimal/comtest_strings.c	117;"	d	file:
comTOTAL_PERMISSIBLE_ERRORS	Demo/Common/Minimal/comtest.c	114;"	d	file:
comTRANSACTED_STRING	Demo/Common/Minimal/comtest_strings.c	142;"	d	file:
comTX_LED_OFFSET	Demo/Common/Minimal/comtest.c	112;"	d	file:
comTX_LED_OFFSET	Demo/Common/Minimal/comtest_strings.c	120;"	d	file:
comTX_MAX_BLOCK_TIME	Demo/Common/Full/comtest.c	146;"	d	file:
comTX_MAX_BLOCK_TIME	Demo/Common/Minimal/comtest.c	118;"	d	file:
comTX_MAX_BLOCK_TIME	Demo/Common/Minimal/comtest_strings.c	126;"	d	file:
comTX_MIN_BLOCK_TIME	Demo/Common/Full/comtest.c	147;"	d	file:
comTX_MIN_BLOCK_TIME	Demo/Common/Minimal/comtest.c	119;"	d	file:
comTX_MIN_BLOCK_TIME	Demo/Common/Minimal/comtest_strings.c	127;"	d	file:
comtstDONT_BLOCK	Demo/Common/Minimal/comtest_strings.c	145;"	d	file:
comtstWAITING_END_OF_STRING	Demo/Common/Minimal/comtest_strings.c	132;"	d	file:
comtstWAITING_START_OF_STRING	Demo/Common/Minimal/comtest_strings.c	131;"	d	file:
configADJUSTED_HEAP_SIZE	Source/portable/MemMang/heap_1.c	95;"	d	file:
configADJUSTED_HEAP_SIZE	Source/portable/MemMang/heap_2.c	96;"	d	file:
configAPPLICATION_ALLOCATED_HEAP	Source/include/FreeRTOS.h	764;"	d
configASSERT	Source/include/FreeRTOS.h	276;"	d
configASSERT_DEFINED	Source/include/FreeRTOS.h	277;"	d
configASSERT_DEFINED	Source/include/FreeRTOS.h	279;"	d
configCHECK_FOR_STACK_OVERFLOW	Source/include/FreeRTOS.h	408;"	d
configCPU_CLOCK_HZ	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	91;"	d
configENABLE_BACKWARD_COMPATIBILITY	Source/include/FreeRTOS.h	820;"	d
configEXPECTED_IDLE_TIME_BEFORE_SLEEP	Source/include/FreeRTOS.h	700;"	d
configGENERATE_RUN_TIME_STATS	Source/include/FreeRTOS.h	662;"	d
configIDLE_SHOULD_YIELD	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	98;"	d
configIDLE_SHOULD_YIELD	Source/include/FreeRTOS.h	268;"	d
configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS	Source/include/FreeRTOS.h	732;"	d
configKERNEL_INTERRUPT_PRIORITY	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	116;"	d
configKERNEL_INTERRUPT_PRIORITY	Source/portable/MPLAB/PIC24_dsPIC/port.c	92;"	d	file:
configLIST_VOLATILE	Source/include/list.h	134;"	d
configMAX_CO_ROUTINE_PRIORITIES	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	102;"	d
configMAX_PRIORITIES	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	92;"	d
configMAX_TASK_NAME_LEN	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	95;"	d
configMAX_TASK_NAME_LEN	Source/include/FreeRTOS.h	264;"	d
configMINIMAL_STACK_SIZE	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	93;"	d
configNUM_THREAD_LOCAL_STORAGE_POINTERS	Source/include/FreeRTOS.h	236;"	d
configPOST_SLEEP_PROCESSING	Source/include/FreeRTOS.h	716;"	d
configPRE_SLEEP_PROCESSING	Source/include/FreeRTOS.h	712;"	d
configQUEUE_REGISTRY_SIZE	Source/include/FreeRTOS.h	320;"	d
configSUPPORT_DYNAMIC_ALLOCATION	Source/include/FreeRTOS.h	782;"	d
configSUPPORT_STATIC_ALLOCATION	Source/include/FreeRTOS.h	777;"	d
configTICK_INTERRUPT_HANDLER	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^void __attribute__((__interrupt__, auto_psv)) configTICK_INTERRUPT_HANDLER( void )$/;"	f
configTICK_INTERRUPT_HANDLER	Source/portable/MPLAB/PIC24_dsPIC/port.c	98;"	d	file:
configTICK_RATE_HZ	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	90;"	d
configTIMER_TASK_PRIORITY	Demo/Common/Minimal/blocktim.c	105;"	d	file:
configTOTAL_HEAP_SIZE	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	94;"	d
configUSE_16_BIT_TICKS	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	97;"	d
configUSE_ALTERNATIVE_API	Source/include/FreeRTOS.h	256;"	d
configUSE_APPLICATION_TASK_TAG	Source/include/FreeRTOS.h	232;"	d
configUSE_COUNTING_SEMAPHORES	Source/include/FreeRTOS.h	252;"	d
configUSE_CO_ROUTINES	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	101;"	d
configUSE_CO_ROUTINES	Source/include/FreeRTOS.h	150;"	d
configUSE_DAEMON_TASK_STARTUP_HOOK	Source/include/FreeRTOS.h	228;"	d
configUSE_IDLE_HOOK	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	88;"	d
configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES	Source/include/projdefs.h	101;"	d
configUSE_MALLOC_FAILED_HOOK	Source/include/FreeRTOS.h	684;"	d
configUSE_MUTEXES	Source/include/FreeRTOS.h	244;"	d
configUSE_NEWLIB_REENTRANT	Source/include/FreeRTOS.h	108;"	d
configUSE_PORT_OPTIMISED_TASK_SELECTION	Source/include/FreeRTOS.h	760;"	d
configUSE_PREEMPTION	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	87;"	d
configUSE_QUEUE_SETS	Source/include/FreeRTOS.h	720;"	d
configUSE_RECURSIVE_MUTEXES	Source/include/FreeRTOS.h	240;"	d
configUSE_STATS_FORMATTING_FUNCTIONS	Source/include/FreeRTOS.h	736;"	d
configUSE_TASK_FPU_SUPPORT	Source/include/FreeRTOS.h	861;"	d
configUSE_TASK_NOTIFICATIONS	Source/include/FreeRTOS.h	768;"	d
configUSE_TICKLESS_IDLE	Source/include/FreeRTOS.h	708;"	d
configUSE_TICK_HOOK	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	89;"	d
configUSE_TIMERS	Source/include/FreeRTOS.h	248;"	d
configUSE_TIME_SLICING	Source/include/FreeRTOS.h	728;"	d
configUSE_TRACE_FACILITY	Demo/dsPIC33E_MPLAB/FreeRTOSConfig.h	96;"	d
configUSE_TRACE_FACILITY	Source/include/FreeRTOS.h	744;"	d
corCoRoutineControlBlock	Source/include/croutine.h	/^typedef struct corCoRoutineControlBlock$/;"	s
corINITIAL_STATE	Source/croutine.c	100;"	d	file:
countDONT_BLOCK	Demo/Common/Minimal/countsem.c	96;"	d	file:
countMAX_COUNT_VALUE	Demo/Common/Minimal/countsem.c	84;"	d	file:
countNUM_TEST_TASKS	Demo/Common/Minimal/countsem.c	95;"	d	file:
countSTART_AT_MAX_COUNT	Demo/Common/Minimal/countsem.c	90;"	d	file:
countSTART_AT_ZERO	Demo/Common/Minimal/countsem.c	91;"	d	file:
crCOROUTINE_CODE	Source/include/croutine.h	/^typedef void (*crCOROUTINE_CODE)( CoRoutineHandle_t, UBaseType_t );$/;"	t
crDELAY	Source/include/croutine.h	332;"	d
crEND	Source/include/croutine.h	277;"	d
crQUEUE_RECEIVE	Source/include/croutine.h	514;"	d
crQUEUE_RECEIVE_FROM_ISR	Source/include/croutine.h	736;"	d
crQUEUE_SEND	Source/include/croutine.h	422;"	d
crQUEUE_SEND_FROM_ISR	Source/include/croutine.h	623;"	d
crSET_STATE0	Source/include/croutine.h	283;"	d
crSET_STATE1	Source/include/croutine.h	284;"	d
crSTART	Source/include/croutine.h	246;"	d
crfFIXED_DELAY_PRIORITY	Demo/Common/Minimal/crflash.c	108;"	d	file:
crfFLASH_INDEX	Demo/Common/Minimal/crflash.c	112;"	d	file:
crfFLASH_PRIORITY	Demo/Common/Minimal/crflash.c	109;"	d	file:
crfMAX_FLASH_TASKS	Demo/Common/Minimal/crflash.c	116;"	d	file:
crfPOSTING_BLOCK_TIME	Demo/Common/Minimal/crflash.c	119;"	d	file:
crfQUEUE_LENGTH	Demo/Common/Minimal/crflash.c	106;"	d	file:
deathSTACK_SIZE	Demo/Common/Full/death.c	106;"	d	file:
deathSTACK_SIZE	Demo/Common/Minimal/death.c	99;"	d	file:
eAbortSleep	Source/include/task.h	/^	eAbortSleep = 0,		\/* A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. *\/$/;"	e	enum:__anon5
eBaud	Demo/Common/include/serial.h	/^} eBaud;$/;"	t	typeref:enum:__anon11
eBlocked	Source/include/task.h	/^	eBlocked,		\/* The task being queried is in the Blocked state. *\/$/;"	e	enum:__anon3
eCOMPort	Demo/Common/include/serial.h	/^} eCOMPort;$/;"	t	typeref:enum:__anon7
eCurrentState	Source/include/task.h	/^	eTaskState eCurrentState;		\/* The state in which the task existed when the structure was populated. *\/$/;"	m	struct:xTASK_STATUS
eDataBits	Demo/Common/include/serial.h	/^} eDataBits;$/;"	t	typeref:enum:__anon10
eDeleted	Source/include/task.h	/^	eDeleted,		\/* The task being queried has been deleted, but its TCB has not yet been freed. *\/$/;"	e	enum:__anon3
eEqualPriority	Demo/Common/Minimal/QueueSet.c	/^	eEqualPriority = 0,	\/* Tx and Rx tasks have the same priority. *\/$/;"	e	enum:__anon12	file:
eIncrement	Source/include/task.h	/^	eIncrement,					\/* Increment the task's notification value. *\/$/;"	e	enum:__anon4
eInvalid	Source/include/task.h	/^	eInvalid			\/* Used as an 'invalid state' value. *\/$/;"	e	enum:__anon3
eNoAction	Source/include/task.h	/^	eNoAction = 0,				\/* Notify the task without updating its notify value. *\/$/;"	e	enum:__anon4
eNoTasksWaitingTimeout	Source/include/task.h	/^	eNoTasksWaitingTimeout	\/* No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. *\/$/;"	e	enum:__anon5
eNotifyAction	Source/include/task.h	/^} eNotifyAction;$/;"	t	typeref:enum:__anon4
eParity	Demo/Common/include/serial.h	/^} eParity;$/;"	t	typeref:enum:__anon8
eReady	Source/include/task.h	/^	eReady,			\/* The task being queried is in a read or pending ready list. *\/$/;"	e	enum:__anon3
eRelativePriorities	Demo/Common/Minimal/QueueSet.c	/^} eRelativePriorities;$/;"	t	typeref:enum:__anon12	file:
eRunning	Source/include/task.h	/^	eRunning = 0,	\/* A task is querying the state of itself, so must be running. *\/$/;"	e	enum:__anon3
eSetBits	Source/include/task.h	/^	eSetBits,					\/* Set bits in the task's notification value. *\/$/;"	e	enum:__anon4
eSetValueWithOverwrite	Source/include/task.h	/^	eSetValueWithOverwrite,		\/* Set the task's notification value to a specific value even if the previous value has not yet been read by the task. *\/$/;"	e	enum:__anon4
eSetValueWithoutOverwrite	Source/include/task.h	/^	eSetValueWithoutOverwrite	\/* Set the task's notification value if the previous value has been read by the task. *\/$/;"	e	enum:__anon4
eSleepModeStatus	Source/include/task.h	/^} eSleepModeStatus;$/;"	t	typeref:enum:__anon5
eStandardSleep	Source/include/task.h	/^	eStandardSleep,			\/* Enter a sleep mode that will not last any longer than the expected idle time. *\/$/;"	e	enum:__anon5
eStopBits	Demo/Common/include/serial.h	/^} eStopBits;$/;"	t	typeref:enum:__anon9
eSuspended	Source/include/task.h	/^	eSuspended,		\/* The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. *\/$/;"	e	enum:__anon3
eTaskConfirmSleepModeStatus	Source/tasks.c	/^	eSleepModeStatus eTaskConfirmSleepModeStatus( void )$/;"	f
eTaskGetState	Source/include/mpu_wrappers.h	100;"	d
eTaskGetState	Source/tasks.c	/^	eTaskState eTaskGetState( TaskHandle_t xTask )$/;"	f
eTaskState	Source/include/task.h	/^} eTaskState;$/;"	t	typeref:enum:__anon3
eTaskStateGet	Source/include/FreeRTOS.h	824;"	d
eTxHigherPriority	Demo/Common/Minimal/QueueSet.c	/^	eTxHigherPriority,	\/* The priority of the Tx task is above that of the Rx task. *\/$/;"	e	enum:__anon12	file:
eTxLowerPriority	Demo/Common/Minimal/QueueSet.c	/^	eTxLowerPriority	\/* The priority of the Tx task is below that of the Rx task. *\/$/;"	e	enum:__anon12	file:
ebALL_BITS	Demo/Common/Minimal/EventGroupsDemo.c	111;"	d	file:
ebALL_SYNC_BITS	Demo/Common/Minimal/EventGroupsDemo.c	119;"	d	file:
ebBIT_0	Demo/Common/Minimal/EventGroupsDemo.c	100;"	d	file:
ebBIT_1	Demo/Common/Minimal/EventGroupsDemo.c	101;"	d	file:
ebBIT_2	Demo/Common/Minimal/EventGroupsDemo.c	102;"	d	file:
ebBIT_3	Demo/Common/Minimal/EventGroupsDemo.c	103;"	d	file:
ebBIT_4	Demo/Common/Minimal/EventGroupsDemo.c	104;"	d	file:
ebBIT_5	Demo/Common/Minimal/EventGroupsDemo.c	105;"	d	file:
ebBIT_6	Demo/Common/Minimal/EventGroupsDemo.c	106;"	d	file:
ebBIT_7	Demo/Common/Minimal/EventGroupsDemo.c	107;"	d	file:
ebCOMBINED_BITS	Demo/Common/Minimal/EventGroupsDemo.c	110;"	d	file:
ebDONT_BLOCK	Demo/Common/Minimal/EventGroupsDemo.c	122;"	d	file:
ebRENDESVOUS_TASK_1_SYNC_BIT	Demo/Common/Minimal/EventGroupsDemo.c	117;"	d	file:
ebRENDESVOUS_TASK_2_SYNC_BIT	Demo/Common/Minimal/EventGroupsDemo.c	118;"	d	file:
ebSELECTIVE_BITS_1	Demo/Common/Minimal/EventGroupsDemo.c	129;"	d	file:
ebSELECTIVE_BITS_2	Demo/Common/Minimal/EventGroupsDemo.c	130;"	d	file:
ebSET_BIT_TASK_PRIORITY	Demo/Common/Minimal/EventGroupsDemo.c	96;"	d	file:
ebSET_BIT_TASK_SYNC_BIT	Demo/Common/Minimal/EventGroupsDemo.c	115;"	d	file:
ebSHORT_DELAY	Demo/Common/Minimal/EventGroupsDemo.c	125;"	d	file:
ebWAIT_BIT_TASK_PRIORITY	Demo/Common/Minimal/EventGroupsDemo.c	97;"	d	file:
ebWAIT_BIT_TASK_SYNC_BIT	Demo/Common/Minimal/EventGroupsDemo.c	116;"	d	file:
errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY	Source/include/projdefs.h	95;"	d
errQUEUE_BLOCKED	Source/include/projdefs.h	96;"	d
errQUEUE_EMPTY	Source/include/projdefs.h	91;"	d
errQUEUE_FULL	Source/include/projdefs.h	92;"	d
errQUEUE_YIELD	Source/include/projdefs.h	97;"	d
eventCLEAR_EVENTS_ON_EXIT_BIT	Source/event_groups.c	94;"	d	file:
eventCLEAR_EVENTS_ON_EXIT_BIT	Source/event_groups.c	99;"	d	file:
eventEVENT_BITS_CONTROL_BYTES	Source/event_groups.c	102;"	d	file:
eventEVENT_BITS_CONTROL_BYTES	Source/event_groups.c	97;"	d	file:
eventUNBLOCKED_DUE_TO_BIT_SET	Source/event_groups.c	100;"	d	file:
eventUNBLOCKED_DUE_TO_BIT_SET	Source/event_groups.c	95;"	d	file:
eventWAIT_FOR_ALL_BITS	Source/event_groups.c	101;"	d	file:
eventWAIT_FOR_ALL_BITS	Source/event_groups.c	96;"	d	file:
evtHIGHEST_PRIORITY_INDEX_1	Demo/Common/Full/events.c	113;"	d	file:
evtHIGHEST_PRIORITY_INDEX_2	Demo/Common/Full/events.c	112;"	d	file:
evtLOWEST_PRIORITY_INDEX	Demo/Common/Full/events.c	115;"	d	file:
evtMEDIUM_PRIORITY_INDEX	Demo/Common/Full/events.c	114;"	d	file:
evtNO_DELAY	Demo/Common/Full/events.c	108;"	d	file:
evtNUM_TASKS	Demo/Common/Full/events.c	106;"	d	file:
evtQUEUE_LENGTH	Demo/Common/Full/events.c	107;"	d	file:
evtSTACK_SIZE	Demo/Common/Full/events.c	105;"	d	file:
genqMUTEX_HIGH_PRIORITY	Demo/Common/Minimal/GenQTest.c	98;"	d	file:
genqMUTEX_LOW_PRIORITY	Demo/Common/Minimal/GenQTest.c	95;"	d	file:
genqMUTEX_MEDIUM_PRIORITY	Demo/Common/Minimal/GenQTest.c	97;"	d	file:
genqMUTEX_TEST_PRIORITY	Demo/Common/Minimal/GenQTest.c	96;"	d	file:
genqQUEUE_LENGTH	Demo/Common/Minimal/GenQTest.c	92;"	d	file:
heapBITS_PER_BYTE	Source/portable/MemMang/heap_4.c	98;"	d	file:
heapBITS_PER_BYTE	Source/portable/MemMang/heap_5.c	132;"	d	file:
heapMINIMUM_BLOCK_SIZE	Source/portable/MemMang/heap_2.c	123;"	d	file:
heapMINIMUM_BLOCK_SIZE	Source/portable/MemMang/heap_4.c	95;"	d	file:
heapMINIMUM_BLOCK_SIZE	Source/portable/MemMang/heap_5.c	129;"	d	file:
heapSTRUCT_SIZE	Source/portable/MemMang/heap_2.c	/^static const uint16_t heapSTRUCT_SIZE	= ( ( sizeof ( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) ) & ~portBYTE_ALIGNMENT_MASK );$/;"	v	file:
hookHOOK_QUEUE_LENGTH	Demo/Common/Minimal/crhook.c	109;"	d	file:
hookNO_BLOCK_TIME	Demo/Common/Minimal/crhook.c	112;"	d	file:
hookNUM_HOOK_CO_ROUTINES	Demo/Common/Minimal/crhook.c	102;"	d	file:
hookTICK_CALLS_BEFORE_POST	Demo/Common/Minimal/crhook.c	106;"	d	file:
intgCONST1	Demo/Common/Minimal/integer.c	87;"	d	file:
intgCONST2	Demo/Common/Minimal/integer.c	88;"	d	file:
intgCONST3	Demo/Common/Minimal/integer.c	89;"	d	file:
intgCONST4	Demo/Common/Minimal/integer.c	90;"	d	file:
intgEXPECTED_ANSWER	Demo/Common/Minimal/integer.c	91;"	d	file:
intgNUMBER_OF_TASKS	Demo/Common/Full/integer.c	111;"	d	file:
intgNUMBER_OF_TASKS	Demo/Common/Minimal/integer.c	96;"	d	file:
intgSTACK_SIZE	Demo/Common/Full/integer.c	110;"	d	file:
intgSTACK_SIZE	Demo/Common/Minimal/integer.c	93;"	d	file:
intqFIRST_INTERRUPT	Demo/Common/Minimal/IntQueue.c	129;"	d	file:
intqHIGHER_PRIORITY	Demo/Common/Minimal/IntQueue.c	103;"	d	file:
intqHIGH_PRIORITY_TASK1	Demo/Common/Minimal/IntQueue.c	126;"	d	file:
intqHIGH_PRIORITY_TASK2	Demo/Common/Minimal/IntQueue.c	127;"	d	file:
intqLOWER_PRIORITY	Demo/Common/Minimal/IntQueue.c	105;"	d	file:
intqLOW_PRIORITY_TASK	Demo/Common/Minimal/IntQueue.c	128;"	d	file:
intqMIN_ACCEPTABLE_TASK_COUNT	Demo/Common/Minimal/IntQueue.c	135;"	d	file:
intqNUM_VALUES_TO_LOG	Demo/Common/Minimal/IntQueue.c	109;"	d	file:
intqONE_TICK_DELAY	Demo/Common/Minimal/IntQueue.c	121;"	d	file:
intqQUEUE_LENGTH	Demo/Common/Minimal/IntQueue.c	131;"	d	file:
intqSECOND_INTERRUPT	Demo/Common/Minimal/IntQueue.c	130;"	d	file:
intqSHORT_DELAY	Demo/Common/Minimal/IntQueue.c	110;"	d	file:
intqVALUE_OVERRUN	Demo/Common/Minimal/IntQueue.c	117;"	d	file:
intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS	Demo/Common/Minimal/IntSemTest.c	93;"	d	file:
intsemMASTER_PRIORITY	Demo/Common/Minimal/IntSemTest.c	89;"	d	file:
intsemMAX_COUNT	Demo/Common/Minimal/IntSemTest.c	100;"	d	file:
intsemNO_BLOCK	Demo/Common/Minimal/GenQTest.c	93;"	d	file:
intsemNO_BLOCK	Demo/Common/Minimal/IntSemTest.c	96;"	d	file:
intsemSLAVE_PRIORITY	Demo/Common/Minimal/IntSemTest.c	90;"	d	file:
ledDONT_BLOCK	Demo/Common/Minimal/flash_timer.c	87;"	d	file:
ledFLASH_RATE_BASE	Demo/Common/Minimal/flash.c	96;"	d	file:
ledFLASH_RATE_BASE	Demo/Common/Minimal/flash_timer.c	84;"	d	file:
ledNUMBER_OF_LEDS	Demo/Common/Minimal/flash.c	95;"	d	file:
ledSTACK_SIZE	Demo/Common/Full/flash.c	109;"	d	file:
ledSTACK_SIZE	Demo/Common/Minimal/flash.c	94;"	d	file:
listCURRENT_LIST_LENGTH	Source/include/list.h	296;"	d
listFIRST_LIST_INTEGRITY_CHECK_VALUE	Source/include/list.h	150;"	d
listFIRST_LIST_INTEGRITY_CHECK_VALUE	Source/include/list.h	162;"	d
listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	148;"	d
listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	160;"	d
listGET_END_MARKER	Source/include/list.h	282;"	d
listGET_HEAD_ENTRY	Source/include/list.h	266;"	d
listGET_ITEM_VALUE_OF_HEAD_ENTRY	Source/include/list.h	258;"	d
listGET_LIST_ITEM_OWNER	Source/include/list.h	230;"	d
listGET_LIST_ITEM_VALUE	Source/include/list.h	249;"	d
listGET_NEXT	Source/include/list.h	274;"	d
listGET_OWNER_OF_HEAD_ENTRY	Source/include/list.h	348;"	d
listGET_OWNER_OF_NEXT_ENTRY	Source/include/list.h	318;"	d
listIS_CONTAINED_WITHIN	Source/include/list.h	359;"	d
listLIST_IS_EMPTY	Source/include/list.h	291;"	d
listLIST_IS_INITIALISED	Source/include/list.h	374;"	d
listLIST_ITEM_CONTAINER	Source/include/list.h	367;"	d
listSECOND_LIST_INTEGRITY_CHECK_VALUE	Source/include/list.h	151;"	d
listSECOND_LIST_INTEGRITY_CHECK_VALUE	Source/include/list.h	163;"	d
listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	149;"	d
listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	161;"	d
listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	152;"	d
listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	166;"	d
listSET_LIST_INTEGRITY_CHECK_1_VALUE	Source/include/list.h	154;"	d
listSET_LIST_INTEGRITY_CHECK_1_VALUE	Source/include/list.h	168;"	d
listSET_LIST_INTEGRITY_CHECK_2_VALUE	Source/include/list.h	155;"	d
listSET_LIST_INTEGRITY_CHECK_2_VALUE	Source/include/list.h	169;"	d
listSET_LIST_ITEM_OWNER	Source/include/list.h	221;"	d
listSET_LIST_ITEM_VALUE	Source/include/list.h	239;"	d
listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	153;"	d
listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE	Source/include/list.h	167;"	d
listTEST_LIST_INTEGRITY	Source/include/list.h	157;"	d
listTEST_LIST_INTEGRITY	Source/include/list.h	174;"	d
listTEST_LIST_ITEM_INTEGRITY	Source/include/list.h	156;"	d
listTEST_LIST_ITEM_INTEGRITY	Source/include/list.h	173;"	d
main	Demo/dsPIC33E_MPLAB/main.c	/^int main( void )$/;"	f
mainBLOCK_Q_PRIORITY	Demo/dsPIC33E_MPLAB/main.c	119;"	d	file:
mainCHECK_TAKS_STACK_SIZE	Demo/dsPIC33E_MPLAB/main.c	124;"	d	file:
mainCHECK_TASK_PERIOD	Demo/dsPIC33E_MPLAB/main.c	127;"	d	file:
mainCHECK_TASK_PRIORITY	Demo/dsPIC33E_MPLAB/main.c	120;"	d	file:
mainCOM_TEST_BAUD_RATE	Demo/dsPIC33E_MPLAB/main.c	133;"	d	file:
mainCOM_TEST_LED	Demo/dsPIC33E_MPLAB/main.c	137;"	d	file:
mainCOM_TEST_PRIORITY	Demo/dsPIC33E_MPLAB/main.c	121;"	d	file:
mainEXPECTED_CLOCKS_BETWEEN_INTERRUPTS	Demo/dsPIC33E_MPLAB/main.c	144;"	d	file:
mainHOOK_CR_PRIORITY	Demo/Common/Minimal/crhook.c	116;"	d	file:
mainMAX_STRING_LENGTH	Demo/dsPIC33E_MPLAB/main.c	151;"	d	file:
mainNS_PER_CLOCK	Demo/dsPIC33E_MPLAB/main.c	147;"	d	file:
mainNUM_FLASH_COROUTINES	Demo/dsPIC33E_MPLAB/main.c	130;"	d	file:
mainTEST_INTERRUPT_FREQUENCY	Demo/dsPIC33E_MPLAB/main.c	140;"	d	file:
mathNUMBER_OF_TASKS	Demo/Common/Full/flop.c	106;"	d	file:
mathNUMBER_OF_TASKS	Demo/Common/Minimal/flop.c	98;"	d	file:
mathNUMBER_OF_TASKS	Demo/Common/Minimal/sp_flop.c	94;"	d	file:
mathSTACK_SIZE	Demo/Common/Full/flop.c	105;"	d	file:
mathSTACK_SIZE	Demo/Common/Minimal/flop.c	95;"	d	file:
mathSTACK_SIZE	Demo/Common/Minimal/sp_flop.c	93;"	d	file:
mtCOVERAGE_TEST_DELAY	Source/include/FreeRTOS.h	752;"	d
mtCOVERAGE_TEST_MARKER	Source/include/FreeRTOS.h	748;"	d
notifyTASK_PRIORITY	Demo/Common/Minimal/TaskNotify.c	86;"	d	file:
notifyUINT32_MAX	Demo/Common/Minimal/TaskNotify.c	87;"	d	file:
pcBlockingTaskName	Demo/Common/Minimal/AbortDelay.c	/^static const char *pcControllingTaskName = "AbtCtrl", *pcBlockingTaskName = "AbtBlk";$/;"	v	file:
pcControllingTaskName	Demo/Common/Minimal/AbortDelay.c	/^static const char *pcControllingTaskName = "AbtCtrl", *pcBlockingTaskName = "AbtBlk";$/;"	v	file:
pcHead	Source/queue.c	/^	int8_t *pcHead;					\/*< Points to the beginning of the queue storage area. *\/$/;"	m	struct:QueueDefinition	file:
pcMessageToExchange	Demo/Common/Full/comtest.c	/^const char * const pcMessageToExchange = 	"Send this message over and over again to check communications interrupts. "$/;"	v
pcName	Source/include/task.h	/^	const char * const pcName;	\/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:xTASK_PARAMETERS
pcPollingSemaphoreTaskError	Demo/Common/Full/semtest.c	/^const char * const pcPollingSemaphoreTaskError = "Guarded shared variable in unexpected state.\\r\\n";$/;"	v
pcPrintGetNextMessage	Demo/Common/Full/print.c	/^const char *pcPrintGetNextMessage( TickType_t xPrintRate )$/;"	f
pcQueueGetName	Source/include/FreeRTOS.h	326;"	d
pcQueueGetName	Source/include/mpu_wrappers.h	155;"	d
pcQueueGetName	Source/queue.c	/^	const char *pcQueueGetName( QueueHandle_t xQueue ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
pcQueueGetQueueName	Source/include/FreeRTOS.h	841;"	d
pcQueueName	Source/queue.c	/^		const char *pcQueueName; \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:QUEUE_REGISTRY_ITEM	file:
pcReadFrom	Source/queue.c	/^		int8_t *pcReadFrom;			\/*< Points to the last place that a queued item was read from when the structure is used as a queue. *\/$/;"	m	union:QueueDefinition::__anon1	file:
pcSemaphoreTaskStart	Demo/Common/Full/semtest.c	/^const char * const pcSemaphoreTaskStart = "Guarded shared variable task started.\\r\\n";$/;"	v
pcTail	Source/queue.c	/^	int8_t *pcTail;					\/*< Points to the byte at the end of the queue storage area.  Once more byte is allocated than necessary to store the queue items, this is used as a marker. *\/$/;"	m	struct:QueueDefinition	file:
pcTaskGetName	Source/include/mpu_wrappers.h	109;"	d
pcTaskGetName	Source/tasks.c	/^char *pcTaskGetName( TaskHandle_t xTaskToQuery ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
pcTaskGetTaskName	Source/include/FreeRTOS.h	839;"	d
pcTaskName	Source/include/task.h	/^	const char *pcTaskName;			\/* A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! *\/ \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:xTASK_STATUS
pcTaskName	Source/tasks.c	/^	char				pcTaskName[ configMAX_TASK_NAME_LEN ];\/*< Descriptive name given to the task when created.  Facilitates debugging only. *\/ \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:tskTaskControlBlock	file:
pcTaskStartMsg	Demo/Common/Full/flash.c	/^const char * const pcTaskStartMsg = "LED flash task started.\\r\\n";$/;"	v
pcTimerGetName	Source/include/mpu_wrappers.h	166;"	d
pcTimerGetName	Source/timers.c	/^const char * pcTimerGetName( TimerHandle_t xTimer ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
pcTimerGetTimerName	Source/include/FreeRTOS.h	840;"	d
pcTimerName	Source/timers.c	/^	const char				*pcTimerName;		\/*<< Text name.  This is not used by the kernel, it is included simply to make debugging easier. *\/ \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	m	struct:tmrTimerControl	file:
pcWriteTo	Source/queue.c	/^	int8_t *pcWriteTo;				\/*< Points to the free next place in the storage area. *\/$/;"	m	struct:QueueDefinition	file:
pdFAIL	Source/include/projdefs.h	90;"	d
pdFALSE	Source/include/projdefs.h	86;"	d
pdFREERTOS_BIG_ENDIAN	Source/include/projdefs.h	156;"	d
pdFREERTOS_ERRNO_EACCES	Source/include/projdefs.h	121;"	d
pdFREERTOS_ERRNO_EADDRINUSE	Source/include/projdefs.h	142;"	d
pdFREERTOS_ERRNO_EADDRNOTAVAIL	Source/include/projdefs.h	146;"	d
pdFREERTOS_ERRNO_EAGAIN	Source/include/projdefs.h	118;"	d
pdFREERTOS_ERRNO_EALREADY	Source/include/projdefs.h	145;"	d
pdFREERTOS_ERRNO_EBADE	Source/include/projdefs.h	134;"	d
pdFREERTOS_ERRNO_EBADF	Source/include/projdefs.h	117;"	d
pdFREERTOS_ERRNO_EBUSY	Source/include/projdefs.h	123;"	d
pdFREERTOS_ERRNO_ECANCELED	Source/include/projdefs.h	151;"	d
pdFREERTOS_ERRNO_EEXIST	Source/include/projdefs.h	124;"	d
pdFREERTOS_ERRNO_EFAULT	Source/include/projdefs.h	122;"	d
pdFREERTOS_ERRNO_EFTYPE	Source/include/projdefs.h	135;"	d
pdFREERTOS_ERRNO_EILSEQ	Source/include/projdefs.h	150;"	d
pdFREERTOS_ERRNO_EINPROGRESS	Source/include/projdefs.h	144;"	d
pdFREERTOS_ERRNO_EINTR	Source/include/projdefs.h	114;"	d
pdFREERTOS_ERRNO_EINVAL	Source/include/projdefs.h	129;"	d
pdFREERTOS_ERRNO_EIO	Source/include/projdefs.h	115;"	d
pdFREERTOS_ERRNO_EISCONN	Source/include/projdefs.h	147;"	d
pdFREERTOS_ERRNO_EISDIR	Source/include/projdefs.h	128;"	d
pdFREERTOS_ERRNO_ENAMETOOLONG	Source/include/projdefs.h	138;"	d
pdFREERTOS_ERRNO_ENMFILE	Source/include/projdefs.h	136;"	d
pdFREERTOS_ERRNO_ENOBUFS	Source/include/projdefs.h	140;"	d
pdFREERTOS_ERRNO_ENODEV	Source/include/projdefs.h	126;"	d
pdFREERTOS_ERRNO_ENOENT	Source/include/projdefs.h	113;"	d
pdFREERTOS_ERRNO_ENOMEDIUM	Source/include/projdefs.h	149;"	d
pdFREERTOS_ERRNO_ENOMEM	Source/include/projdefs.h	120;"	d
pdFREERTOS_ERRNO_ENOPROTOOPT	Source/include/projdefs.h	141;"	d
pdFREERTOS_ERRNO_ENOSPC	Source/include/projdefs.h	130;"	d
pdFREERTOS_ERRNO_ENOTCONN	Source/include/projdefs.h	148;"	d
pdFREERTOS_ERRNO_ENOTDIR	Source/include/projdefs.h	127;"	d
pdFREERTOS_ERRNO_ENOTEMPTY	Source/include/projdefs.h	137;"	d
pdFREERTOS_ERRNO_ENXIO	Source/include/projdefs.h	116;"	d
pdFREERTOS_ERRNO_EOPNOTSUPP	Source/include/projdefs.h	139;"	d
pdFREERTOS_ERRNO_EROFS	Source/include/projdefs.h	132;"	d
pdFREERTOS_ERRNO_ESPIPE	Source/include/projdefs.h	131;"	d
pdFREERTOS_ERRNO_ETIMEDOUT	Source/include/projdefs.h	143;"	d
pdFREERTOS_ERRNO_EUNATCH	Source/include/projdefs.h	133;"	d
pdFREERTOS_ERRNO_EWOULDBLOCK	Source/include/projdefs.h	119;"	d
pdFREERTOS_ERRNO_EXDEV	Source/include/projdefs.h	125;"	d
pdFREERTOS_ERRNO_NONE	Source/include/projdefs.h	112;"	d
pdFREERTOS_LITTLE_ENDIAN	Source/include/projdefs.h	155;"	d
pdINTEGRITY_CHECK_VALUE	Source/include/projdefs.h	105;"	d
pdINTEGRITY_CHECK_VALUE	Source/include/projdefs.h	107;"	d
pdMS_TO_TICKS	Source/include/projdefs.h	83;"	d
pdPASS	Source/include/projdefs.h	89;"	d
pdTASK_CODE	Source/include/FreeRTOS.h	847;"	d
pdTASK_HOOK_CODE	Source/include/FreeRTOS.h	837;"	d
pdTRUE	Source/include/projdefs.h	87;"	d
pollqCONSUMER_DELAY	Demo/Common/Minimal/PollQ.c	113;"	d	file:
pollqINITIAL_VALUE	Demo/Common/Minimal/PollQ.c	116;"	d	file:
pollqNO_DELAY	Demo/Common/Minimal/PollQ.c	114;"	d	file:
pollqPRODUCER_DELAY	Demo/Common/Minimal/PollQ.c	112;"	d	file:
pollqQUEUE_SIZE	Demo/Common/Minimal/PollQ.c	111;"	d	file:
pollqSTACK_SIZE	Demo/Common/Full/PollQ.c	115;"	d	file:
pollqSTACK_SIZE	Demo/Common/Minimal/PollQ.c	110;"	d	file:
pollqVALUES_TO_PRODUCE	Demo/Common/Minimal/PollQ.c	115;"	d	file:
portASSERT_IF_INTERRUPT_PRIORITY_INVALID	Source/include/FreeRTOS.h	740;"	d
portASSERT_IF_IN_ISR	Source/include/FreeRTOS.h	756;"	d
portBASE_TYPE	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	94;"	d
portBIT_SET	Source/portable/MPLAB/PIC24_dsPIC/port.c	85;"	d	file:
portBYTE_ALIGNMENT	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	110;"	d
portBYTE_ALIGNMENT_MASK	Source/include/portable.h	102;"	d
portBYTE_ALIGNMENT_MASK	Source/include/portable.h	106;"	d
portBYTE_ALIGNMENT_MASK	Source/include/portable.h	110;"	d
portBYTE_ALIGNMENT_MASK	Source/include/portable.h	114;"	d
portBYTE_ALIGNMENT_MASK	Source/include/portable.h	118;"	d
portBYTE_ALIGNMENT_MASK	Source/include/portable.h	98;"	d
portCHAR	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	88;"	d
portCLEAN_UP_TCB	Source/include/FreeRTOS.h	308;"	d
portCLEAR_INTERRUPT_MASK_FROM_ISR	Source/include/FreeRTOS.h	304;"	d
portCONFIGURE_TIMER_FOR_RUN_TIME_STATS	Source/include/FreeRTOS.h	680;"	d
portCRITICAL_NESTING_IN_TCB	Source/include/FreeRTOS.h	260;"	d
portDISABLE_INTERRUPTS	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	116;"	d
portDOUBLE	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	90;"	d
portENABLE_INTERRUPTS	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	117;"	d
portENTER_CRITICAL	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	123;"	d
portEXIT_CRITICAL	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	124;"	d
portFLOAT	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	89;"	d
portINITIAL_SR	Source/portable/MPLAB/PIC24_dsPIC/port.c	87;"	d	file:
portLONG	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	91;"	d
portMAX_DELAY	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	102;"	d
portMAX_DELAY	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	105;"	d
portNOP	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	143;"	d
portNUM_CONFIGURABLE_REGIONS	Source/include/portable.h	126;"	d
portPOINTER_SIZE_TYPE	Source/include/FreeRTOS.h	330;"	d
portPRE_TASK_DELETE_HOOK	Source/include/FreeRTOS.h	312;"	d
portPRIVILEGE_BIT	Source/include/FreeRTOS.h	688;"	d
portREMOVE_STATIC_QUALIFIER	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	140;"	d
portRESET_READY_PRIORITY	Source/tasks.c	197;"	d	file:
portRESTORE_CONTEXT	Source/portable/MPLAB/PIC24_dsPIC/port.c	114;"	d	file:
portRESTORE_CONTEXT	Source/portable/MPLAB/PIC24_dsPIC/port.c	134;"	d	file:
portRESTORE_CONTEXT	Source/portable/MPLAB/PIC24_dsPIC/port.c	157;"	d	file:
portRESTORE_CONTEXT	Source/portable/MPLAB/PIC24_dsPIC/port.c	187;"	d	file:
portSETUP_TCB	Source/include/FreeRTOS.h	316;"	d
portSET_INTERRUPT_MASK_FROM_ISR	Source/include/FreeRTOS.h	300;"	d
portSHORT	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	92;"	d
portSTACK_GROWTH	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	111;"	d
portSTACK_TYPE	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	93;"	d
portSUPPRESS_TICKS_AND_SLEEP	Source/include/FreeRTOS.h	696;"	d
portTASK_FUNCTION	Demo/Common/Minimal/BlockQ.c	/^static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/BlockQ.c	/^static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/PollQ.c	/^static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/PollQ.c	/^static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/comtest.c	/^static portTASK_FUNCTION( vComRxTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/comtest.c	/^static portTASK_FUNCTION( vComTxTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/death.c	/^static portTASK_FUNCTION( vCreateTasks, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/death.c	/^static portTASK_FUNCTION( vSuicidalTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/dynamic.c	/^static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/dynamic.c	/^static portTASK_FUNCTION( vCounterControlTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/dynamic.c	/^static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/dynamic.c	/^static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/dynamic.c	/^static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/flash.c	/^static portTASK_FUNCTION( vLEDFlashTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/flop.c	/^static portTASK_FUNCTION( vCompetingMathTask1, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/flop.c	/^static portTASK_FUNCTION( vCompetingMathTask2, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/flop.c	/^static portTASK_FUNCTION( vCompetingMathTask3, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/flop.c	/^static portTASK_FUNCTION( vCompetingMathTask4, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/integer.c	/^static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/semtest.c	/^static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/sp_flop.c	/^static portTASK_FUNCTION( vCompetingMathTask1, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/sp_flop.c	/^static portTASK_FUNCTION( vCompetingMathTask2, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/sp_flop.c	/^static portTASK_FUNCTION( vCompetingMathTask3, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Demo/Common/Minimal/sp_flop.c	/^static portTASK_FUNCTION( vCompetingMathTask4, pvParameters )$/;"	f	file:
portTASK_FUNCTION	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	135;"	d
portTASK_FUNCTION	Source/tasks.c	/^static portTASK_FUNCTION( prvIdleTask, pvParameters )$/;"	f	file:
portTASK_FUNCTION_PROTO	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	134;"	d
portTASK_USES_FLOATING_POINT	Source/include/FreeRTOS.h	724;"	d
portTICK_PERIOD_MS	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	112;"	d
portTICK_RATE_MS	Source/include/FreeRTOS.h	838;"	d
portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR	Source/include/FreeRTOS.h	807;"	d
portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR	Source/include/FreeRTOS.h	814;"	d
portTICK_TYPE_ENTER_CRITICAL	Source/include/FreeRTOS.h	804;"	d
portTICK_TYPE_ENTER_CRITICAL	Source/include/FreeRTOS.h	811;"	d
portTICK_TYPE_EXIT_CRITICAL	Source/include/FreeRTOS.h	805;"	d
portTICK_TYPE_EXIT_CRITICAL	Source/include/FreeRTOS.h	812;"	d
portTICK_TYPE_IS_ATOMIC	Source/include/FreeRTOS.h	772;"	d
portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR	Source/include/FreeRTOS.h	806;"	d
portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR	Source/include/FreeRTOS.h	813;"	d
portTIMER_PRESCALE	Source/portable/MPLAB/PIC24_dsPIC/port.c	86;"	d	file:
portTickType	Source/include/FreeRTOS.h	825;"	d
portUNUSED_PR_BITS	Source/portable/MPLAB/PIC24_dsPIC/port.c	102;"	d	file:
portUSING_MPU_WRAPPERS	Source/include/mpu_wrappers.h	195;"	d
portYIELD	Source/portable/MPLAB/PIC24_dsPIC/portmacro.h	129;"	d
portYIELD_WITHIN_API	Source/include/FreeRTOS.h	692;"	d
priLOOPS	Demo/Common/Full/dynamic.c	185;"	d	file:
priLOOPS	Demo/Common/Minimal/dynamic.c	152;"	d	file:
priMAX_COUNT	Demo/Common/Full/dynamic.c	186;"	d	file:
priMAX_COUNT	Demo/Common/Minimal/dynamic.c	153;"	d	file:
priNO_BLOCK	Demo/Common/Full/dynamic.c	187;"	d	file:
priNO_BLOCK	Demo/Common/Minimal/dynamic.c	154;"	d	file:
priSLEEP_TIME	Demo/Common/Full/dynamic.c	184;"	d	file:
priSLEEP_TIME	Demo/Common/Minimal/dynamic.c	151;"	d	file:
priSTACK_SIZE	Demo/Common/Full/dynamic.c	183;"	d	file:
priSTACK_SIZE	Demo/Common/Minimal/dynamic.c	150;"	d	file:
priSUSPENDED_QUEUE_LENGTH	Demo/Common/Full/dynamic.c	188;"	d	file:
priSUSPENDED_QUEUE_LENGTH	Demo/Common/Minimal/dynamic.c	155;"	d	file:
prv1stHigherPriorityNormallyFullTask	Demo/Common/Minimal/IntQueue.c	/^static void prv1stHigherPriorityNormallyFullTask( void *pvParameters )$/;"	f	file:
prv2ndHigherPriorityNormallyFullTask	Demo/Common/Minimal/IntQueue.c	/^static void prv2ndHigherPriorityNormallyFullTask( void *pvParameters )$/;"	f	file:
prvAddCoRoutineToReadyQueue	Source/croutine.c	109;"	d	file:
prvAddCurrentTaskToDelayedList	Source/tasks.c	/^static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )$/;"	f	file:
prvAddNewTaskToReadyList	Source/tasks.c	/^static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )$/;"	f	file:
prvAddTaskToReadyList	Source/tasks.c	259;"	d	file:
prvAutoReloadTimerCallback	Demo/Common/Minimal/TimerDemo.c	/^static void prvAutoReloadTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvBasicDelayTests	Demo/Common/Minimal/blocktim.c	/^static void prvBasicDelayTests( void )$/;"	f	file:
prvBitCombinationTestMasterFunction	Demo/Common/Minimal/EventGroupsDemo.c	/^static BaseType_t prvBitCombinationTestMasterFunction( BaseType_t xError, TaskHandle_t xTestSlaveTaskHandle )$/;"	f	file:
prvBlockingTask	Demo/Common/Minimal/AbortDelay.c	/^static void prvBlockingTask( void *pvParameters )$/;"	f	file:
prvCalculateAndStoreJitter	Demo/dsPIC33E_MPLAB/timertest.c	/^static void prvCalculateAndStoreJitter( void )$/;"	f	file:
prvChangePriorityHelperTask	Demo/Common/Full/dynamic.c	/^static void prvChangePriorityHelperTask( void *pvParameters )$/;"	f	file:
prvChangePriorityWhenSuspendedTask	Demo/Common/Full/dynamic.c	/^static void prvChangePriorityWhenSuspendedTask( void *pvParameters )$/;"	f	file:
prvChangeRelativePriorities	Demo/Common/Minimal/QueueSet.c	/^static void prvChangeRelativePriorities( void )$/;"	f	file:
prvCheckDelayedList	Source/croutine.c	/^static void prvCheckDelayedList( void )$/;"	f	file:
prvCheckExpectedTimeIsWithinAnAcceptableMargin	Demo/Common/Minimal/AbortDelay.c	/^static void prvCheckExpectedTimeIsWithinAnAcceptableMargin( TickType_t xStartTime, TickType_t xExpectedBlockTime )$/;"	f	file:
prvCheckForValidListAndQueue	Source/timers.c	/^static void prvCheckForValidListAndQueue( void )$/;"	f	file:
prvCheckPendingReadyList	Source/croutine.c	/^static void prvCheckPendingReadyList( void )$/;"	f	file:
prvCheckReceivedValue	Demo/Common/Minimal/QueueSet.c	/^static void prvCheckReceivedValue( uint32_t ulReceived )$/;"	f	file:
prvCheckReceivedValueWithinExpectedRange	Demo/Common/Minimal/QueueSet.c	/^static BaseType_t prvCheckReceivedValueWithinExpectedRange( uint32_t ulReceived, uint32_t ulExpectedReceived )$/;"	f	file:
prvCheckTaskCounters	Demo/Common/Full/events.c	/^static void prvCheckTaskCounters( portBASE_TYPE xExpectedTask, portBASE_TYPE xIncrement )$/;"	f	file:
prvCheckTasksWaitingTermination	Source/tasks.c	/^static void prvCheckTasksWaitingTermination( void )$/;"	f	file:
prvComTxTimerCallback	Demo/Common/Minimal/comtest_strings.c	/^static void prvComTxTimerCallback( TimerHandle_t xTimer )$/;"	f	file:
prvControllingTask	Demo/Common/Minimal/AbortDelay.c	/^static void prvControllingTask( void *pvParameters )$/;"	f	file:
prvCopyDataFromQueue	Source/queue.c	/^static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )$/;"	f	file:
prvCopyDataToQueue	Source/queue.c	/^static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )$/;"	f	file:
prvCountingSemaphoreTask	Demo/Common/Minimal/countsem.c	/^static void prvCountingSemaphoreTask( void *pvParameters )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedBinarySemaphores	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedBinarySemaphores( void )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedCountingSemaphores	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedCountingSemaphores( void )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedEventGroups	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedEventGroups( void )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedMutexes	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedMutexes( void )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedQueues	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedQueues( void )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedRecursiveMutexes	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedRecursiveMutexes( void )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedTasks	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedTasks( void )$/;"	f	file:
prvCreateAndDeleteStaticallyAllocatedTimers	Demo/Common/Minimal/StaticAllocation.c	/^static void prvCreateAndDeleteStaticallyAllocatedTimers( void )$/;"	f	file:
prvDecrementSemaphoreCount	Demo/Common/Minimal/countsem.c	/^static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )$/;"	f	file:
prvDeleteTCB	Source/tasks.c	/^	static void prvDeleteTCB( TCB_t *pxTCB )$/;"	f	file:
prvEventControllerTask	Demo/Common/Full/events.c	/^static void prvEventControllerTask( void *pvParameters )$/;"	f	file:
prvFixedDelayCoRoutine	Demo/Common/Minimal/crflash.c	/^static void prvFixedDelayCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )$/;"	f	file:
prvFlashCoRoutine	Demo/Common/Minimal/crflash.c	/^static void prvFlashCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )$/;"	f	file:
prvGetExpectedIdleTime	Source/tasks.c	/^	static TickType_t prvGetExpectedIdleTime( void )$/;"	f	file:
prvGetNextDelayTime	Demo/Common/Minimal/StaticAllocation.c	/^static TickType_t prvGetNextDelayTime( void )$/;"	f	file:
prvGetNextExpireTime	Source/timers.c	/^static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )$/;"	f	file:
prvGetTCBFromHandle	Source/tasks.c	272;"	d	file:
prvHeapInit	Source/portable/MemMang/heap_2.c	/^static void prvHeapInit( void )$/;"	f	file:
prvHeapInit	Source/portable/MemMang/heap_4.c	/^static void prvHeapInit( void )$/;"	f	file:
prvHighPriorityMutexTask	Demo/Common/Minimal/GenQTest.c	/^static void prvHighPriorityMutexTask( void *pvParameters )$/;"	f	file:
prvHighPriorityPeekTask	Demo/Common/Minimal/QPeek.c	/^static void prvHighPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvHigherPriorityNormallyEmptyTask	Demo/Common/Minimal/IntQueue.c	/^static void prvHigherPriorityNormallyEmptyTask( void *pvParameters )$/;"	f	file:
prvHighestPriorityPeekTask	Demo/Common/Minimal/QPeek.c	/^static void prvHighestPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvHookCoRoutine	Demo/Common/Minimal/crhook.c	/^static void prvHookCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )$/;"	f	file:
prvISRAutoReloadTimerCallback	Demo/Common/Minimal/TimerDemo.c	/^static void prvISRAutoReloadTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvISROneShotTimerCallback	Demo/Common/Minimal/TimerDemo.c	/^static void prvISROneShotTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvIncrementSemaphoreCount	Demo/Common/Minimal/countsem.c	/^static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )$/;"	f	file:
prvInitialiseCoRoutineLists	Source/croutine.c	/^static void prvInitialiseCoRoutineLists( void )$/;"	f	file:
prvInitialiseMutex	Source/queue.c	/^	static void prvInitialiseMutex( Queue_t *pxNewQueue )$/;"	f	file:
prvInitialiseNewQueue	Source/queue.c	/^static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )$/;"	f	file:
prvInitialiseNewTask	Source/tasks.c	/^static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,$/;"	f	file:
prvInitialiseNewTimer	Source/timers.c	/^static void prvInitialiseNewTimer(	const char * const pcTimerName,$/;"	f	file:
prvInitialiseTaskLists	Source/tasks.c	/^static void prvInitialiseTaskLists( void )$/;"	f	file:
prvInsertBlockIntoFreeList	Source/portable/MemMang/heap_2.c	139;"	d	file:
prvInsertBlockIntoFreeList	Source/portable/MemMang/heap_4.c	/^static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )$/;"	f	file:
prvInsertBlockIntoFreeList	Source/portable/MemMang/heap_5.c	/^static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )$/;"	f	file:
prvInsertTimerInActiveList	Source/timers.c	/^static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )$/;"	f	file:
prvIsQueueEmpty	Source/queue.c	/^static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )$/;"	f	file:
prvIsQueueFull	Source/queue.c	/^static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )$/;"	f	file:
prvLEDTimerCallback	Demo/Common/Minimal/flash_timer.c	/^static void prvLEDTimerCallback( TimerHandle_t xTimer )$/;"	f	file:
prvListTasksWithinSingleList	Source/tasks.c	/^	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )$/;"	f	file:
prvLockQueue	Source/queue.c	264;"	d	file:
prvLowPriorityMutexTask	Demo/Common/Minimal/GenQTest.c	/^static void prvLowPriorityMutexTask( void *pvParameters )$/;"	f	file:
prvLowPriorityPeekTask	Demo/Common/Minimal/QPeek.c	/^static void prvLowPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvLowerPriorityNormallyEmptyTask	Demo/Common/Minimal/IntQueue.c	/^static void prvLowerPriorityNormallyEmptyTask( void *pvParameters )$/;"	f	file:
prvLowerPriorityNormallyFullTask	Demo/Common/Minimal/IntQueue.c	/^static void prvLowerPriorityNormallyFullTask( void *pvParameters )$/;"	f	file:
prvMediumPriorityMutexTask	Demo/Common/Minimal/GenQTest.c	/^static void prvMediumPriorityMutexTask( void *pvParameters )$/;"	f	file:
prvMediumPriorityPeekTask	Demo/Common/Minimal/QPeek.c	/^static void prvMediumPriorityPeekTask( void *pvParameters )$/;"	f	file:
prvMultiEventTask	Demo/Common/Full/events.c	/^static void prvMultiEventTask( void *pvParameters )$/;"	f	file:
prvNotifiedTask	Demo/Common/Minimal/TaskNotify.c	/^static void prvNotifiedTask( void *pvParameters )$/;"	f	file:
prvNotifyQueueSetContainer	Source/queue.c	/^	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )$/;"	f	file:
prvNotifyingTimer	Demo/Common/Minimal/TaskNotify.c	/^static void prvNotifyingTimer( TimerHandle_t xNotUsed )$/;"	f	file:
prvOneShotTimerCallback	Demo/Common/Minimal/TimerDemo.c	/^static void prvOneShotTimerCallback( TimerHandle_t pxExpiredTimer )$/;"	f	file:
prvPerformTaskSyncTests	Demo/Common/Minimal/EventGroupsDemo.c	/^static BaseType_t prvPerformTaskSyncTests( BaseType_t xError, TaskHandle_t xTestSlaveTaskHandle )$/;"	f	file:
prvProcessExpiredTimer	Source/timers.c	/^static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )$/;"	f	file:
prvProcessReceivedCommands	Source/timers.c	/^static void	prvProcessReceivedCommands( void )$/;"	f	file:
prvProcessTimerOrBlockTask	Source/timers.c	/^static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )$/;"	f	file:
prvQueueAccessLogError	Demo/Common/Minimal/IntQueue.c	/^static void prvQueueAccessLogError( UBaseType_t uxLine )$/;"	f	file:
prvQueueOverwriteTask	Demo/Common/Minimal/QueueOverwrite.c	/^static void prvQueueOverwriteTask( void *pvParameters )$/;"	f	file:
prvQueueSetReceivingTask	Demo/Common/Minimal/QueueSet.c	/^static void prvQueueSetReceivingTask( void *pvParameters )$/;"	f	file:
prvQueueSetReceivingTask	Demo/Common/Minimal/QueueSetPolling.c	/^static void prvQueueSetReceivingTask( void *pvParameters )$/;"	f	file:
prvQueueSetSendingTask	Demo/Common/Minimal/QueueSet.c	/^static void prvQueueSetSendingTask( void *pvParameters )$/;"	f	file:
prvRand	Demo/Common/Minimal/QueueSet.c	/^static size_t prvRand( void )$/;"	f	file:
prvRand	Demo/Common/Minimal/StaticAllocation.c	/^static UBaseType_t prvRand( void )$/;"	f	file:
prvRand	Demo/Common/Minimal/TaskNotify.c	/^static UBaseType_t prvRand( void )$/;"	f	file:
prvReceiveFromQueueInSetFromISR	Demo/Common/Minimal/QueueSet.c	/^static void prvReceiveFromQueueInSetFromISR( void )$/;"	f	file:
prvRecordValue_NormallyEmpty	Demo/Common/Minimal/IntQueue.c	/^static void prvRecordValue_NormallyEmpty( UBaseType_t uxValue, UBaseType_t uxSource )$/;"	f	file:
prvRecordValue_NormallyFull	Demo/Common/Minimal/IntQueue.c	/^static void prvRecordValue_NormallyFull( UBaseType_t uxValue, UBaseType_t uxSource )$/;"	f	file:
prvRecursiveMutexBlockingTask	Demo/Common/Minimal/recmutex.c	/^static void prvRecursiveMutexBlockingTask( void *pvParameters )$/;"	f	file:
prvRecursiveMutexControllingTask	Demo/Common/Minimal/recmutex.c	/^static void prvRecursiveMutexControllingTask( void *pvParameters )$/;"	f	file:
prvRecursiveMutexPollingTask	Demo/Common/Minimal/recmutex.c	/^static void prvRecursiveMutexPollingTask( void *pvParameters )$/;"	f	file:
prvResetNextTaskUnblockTime	Source/tasks.c	/^static void prvResetNextTaskUnblockTime( void )$/;"	f	file:
prvResetStartConditionsForNextIteration	Demo/Common/Minimal/TimerDemo.c	/^static void prvResetStartConditionsForNextIteration( void )$/;"	f	file:
prvSRand	Demo/Common/Minimal/QueueSet.c	/^static void prvSRand( size_t uxSeed )$/;"	f	file:
prvSampleTimeNow	Source/timers.c	/^static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )$/;"	f	file:
prvSanityCheckCreatedEventGroup	Demo/Common/Minimal/StaticAllocation.c	/^static void prvSanityCheckCreatedEventGroup( EventGroupHandle_t xEventGroup )$/;"	f	file:
prvSanityCheckCreatedQueue	Demo/Common/Minimal/StaticAllocation.c	/^static void prvSanityCheckCreatedQueue( QueueHandle_t xQueue )$/;"	f	file:
prvSanityCheckCreatedRecursiveMutex	Demo/Common/Minimal/StaticAllocation.c	/^static void prvSanityCheckCreatedRecursiveMutex( SemaphoreHandle_t xSemaphore )$/;"	f	file:
prvSanityCheckCreatedSemaphore	Demo/Common/Minimal/StaticAllocation.c	/^static void prvSanityCheckCreatedSemaphore( SemaphoreHandle_t xSemaphore, UBaseType_t uxMaxCount )$/;"	f	file:
prvSearchForNameWithinSingleList	Source/tasks.c	/^	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )$/;"	f	file:
prvSelectiveBitsTestMasterFunction	Demo/Common/Minimal/EventGroupsDemo.c	/^static BaseType_t prvSelectiveBitsTestMasterFunction( void )$/;"	f	file:
prvSelectiveBitsTestSlaveFunction	Demo/Common/Minimal/EventGroupsDemo.c	/^static void prvSelectiveBitsTestSlaveFunction( void )$/;"	f	file:
prvSemaphoreTest	Demo/Common/Full/semtest.c	/^static void prvSemaphoreTest( void *pvParameters )$/;"	f	file:
prvSendFrontAndBackTest	Demo/Common/Minimal/GenQTest.c	/^static void prvSendFrontAndBackTest( void *pvParameters )$/;"	f	file:
prvSendToQueueInSetFromISR	Demo/Common/Minimal/QueueSet.c	/^static void prvSendToQueueInSetFromISR( void )$/;"	f	file:
prvSetupTest	Demo/Common/Minimal/QueueSet.c	/^static void prvSetupTest( void )$/;"	f	file:
prvSingleTaskTests	Demo/Common/Minimal/TaskNotify.c	/^static void prvSingleTaskTests( void )$/;"	f	file:
prvStaticallyAllocatedCreator	Demo/Common/Minimal/StaticAllocation.c	/^static void prvStaticallyAllocatedCreator( void *pvParameters )$/;"	f	file:
prvStaticallyAllocatedTask	Demo/Common/Minimal/StaticAllocation.c	/^static void prvStaticallyAllocatedTask( void *pvParameters )$/;"	f	file:
prvSwitchTimerLists	Source/timers.c	/^static void prvSwitchTimerLists( void )$/;"	f	file:
prvSyncTask	Demo/Common/Minimal/EventGroupsDemo.c	/^static void prvSyncTask( void *pvParameters )$/;"	f	file:
prvTakeAndGiveInTheOppositeOrder	Demo/Common/Minimal/IntSemTest.c	/^static void prvTakeAndGiveInTheOppositeOrder( void )$/;"	f	file:
prvTakeAndGiveInTheSameOrder	Demo/Common/Minimal/IntSemTest.c	/^static void prvTakeAndGiveInTheSameOrder( void )$/;"	f	file:
prvTakeTwoMutexesReturnInDifferentOrder	Demo/Common/Minimal/GenQTest.c	/^static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )$/;"	f	file:
prvTakeTwoMutexesReturnInSameOrder	Demo/Common/Minimal/GenQTest.c	/^static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )$/;"	f	file:
prvTaskCheckFreeStackSpace	Source/tasks.c	/^	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )$/;"	f	file:
prvTaskIsTaskSuspended	Source/tasks.c	/^	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )$/;"	f	file:
prvTest1_CreateTimersWithoutSchedulerRunning	Demo/Common/Minimal/TimerDemo.c	/^static void prvTest1_CreateTimersWithoutSchedulerRunning( void )$/;"	f	file:
prvTest2_CheckTaskAndTimersInitialState	Demo/Common/Minimal/TimerDemo.c	/^static void prvTest2_CheckTaskAndTimersInitialState( void )$/;"	f	file:
prvTest3_CheckAutoReloadExpireRates	Demo/Common/Minimal/TimerDemo.c	/^static void	prvTest3_CheckAutoReloadExpireRates( void )$/;"	f	file:
prvTest4_CheckAutoReloadTimersCanBeStopped	Demo/Common/Minimal/TimerDemo.c	/^static void prvTest4_CheckAutoReloadTimersCanBeStopped( void )$/;"	f	file:
prvTest5_CheckBasicOneShotTimerBehaviour	Demo/Common/Minimal/TimerDemo.c	/^static void prvTest5_CheckBasicOneShotTimerBehaviour( void )$/;"	f	file:
prvTest6_CheckAutoReloadResetBehaviour	Demo/Common/Minimal/TimerDemo.c	/^static void prvTest6_CheckAutoReloadResetBehaviour( void )$/;"	f	file:
prvTestAbortingEventGroupWait	Demo/Common/Minimal/AbortDelay.c	/^static void prvTestAbortingEventGroupWait( void )$/;"	f	file:
prvTestAbortingQueueSend	Demo/Common/Minimal/AbortDelay.c	/^static void prvTestAbortingQueueSend( void )$/;"	f	file:
prvTestAbortingSemaphoreTake	Demo/Common/Minimal/AbortDelay.c	/^static void prvTestAbortingSemaphoreTake( void )$/;"	f	file:
prvTestAbortingTaskDelay	Demo/Common/Minimal/AbortDelay.c	/^static void prvTestAbortingTaskDelay( void )$/;"	f	file:
prvTestAbortingTaskDelayUntil	Demo/Common/Minimal/AbortDelay.c	/^static void prvTestAbortingTaskDelayUntil( void )$/;"	f	file:
prvTestAbortingTaskNotifyTake	Demo/Common/Minimal/AbortDelay.c	/^static void prvTestAbortingTaskNotifyTake( void )$/;"	f	file:
prvTestAbortingTaskNotifyWait	Demo/Common/Minimal/AbortDelay.c	/^static void prvTestAbortingTaskNotifyWait( void )$/;"	f	file:
prvTestMasterTask	Demo/Common/Minimal/EventGroupsDemo.c	/^static void prvTestMasterTask( void *pvParameters )$/;"	f	file:
prvTestSlaveTask	Demo/Common/Minimal/EventGroupsDemo.c	/^static void prvTestSlaveTask( void *pvParameters )$/;"	f	file:
prvTestWaitCondition	Source/event_groups.c	/^static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )$/;"	f	file:
prvTimerCallback	Demo/Common/Minimal/StaticAllocation.c	/^static void prvTimerCallback( TimerHandle_t xExpiredTimer )$/;"	f	file:
prvTimerTask	Source/timers.c	/^static void prvTimerTask( void *pvParameters )$/;"	f	file:
prvTimerTestTask	Demo/Common/Minimal/TimerDemo.c	/^static void prvTimerTestTask( void *pvParameters )$/;"	f	file:
prvUnlockQueue	Source/queue.c	/^static void prvUnlockQueue( Queue_t * const pxQueue )$/;"	f	file:
prvWriteNameToBuffer	Source/tasks.c	/^	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )$/;"	f	file:
psCheckVariable	Demo/Common/Full/BlockQ.c	/^	volatile short *psCheckVariable;	\/*< Incremented on each successful cycle to check the task is still running. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
psCheckVariable	Demo/Common/Minimal/BlockQ.c	/^	volatile short *psCheckVariable;	\/*< Incremented on each successful cycle to check the task is still running. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
pucStartAddress	Source/include/portable.h	/^	uint8_t *pucStartAddress;$/;"	m	struct:HeapRegion
pulSharedVariable	Demo/Common/Full/semtest.c	/^	volatile unsigned long *pulSharedVariable;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
pulSharedVariable	Demo/Common/Minimal/semtest.c	/^	volatile uint32_t *pulSharedVariable;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
puxStackBuffer	Source/include/task.h	/^	StackType_t *puxStackBuffer;$/;"	m	struct:xTASK_PARAMETERS
pvBaseAddress	Source/include/task.h	/^	void *pvBaseAddress;$/;"	m	struct:xMEMORY_REGION
pvContainer	Source/include/list.h	/^	void * configLIST_VOLATILE pvContainer;				\/*< Pointer to the list in which this list item is placed (if any). *\/$/;"	m	struct:xLIST_ITEM
pvDummy1	Source/include/FreeRTOS.h	/^	void				*pvDummy1;$/;"	m	struct:xSTATIC_TIMER
pvDummy1	Source/include/FreeRTOS.h	/^	void *pvDummy1[ 3 ];$/;"	m	struct:xSTATIC_QUEUE
pvDummy15	Source/include/FreeRTOS.h	/^		void			*pvDummy15[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];$/;"	m	struct:xSTATIC_TCB
pvDummy2	Source/include/FreeRTOS.h	/^		void *pvDummy2;$/;"	m	union:xSTATIC_QUEUE::__anon6
pvDummy2	Source/include/FreeRTOS.h	/^	void *pvDummy2;$/;"	m	struct:xSTATIC_LIST
pvDummy2	Source/include/FreeRTOS.h	/^	void *pvDummy2[ 2 ];$/;"	m	struct:xSTATIC_MINI_LIST_ITEM
pvDummy2	Source/include/FreeRTOS.h	/^	void *pvDummy2[ 4 ];$/;"	m	struct:xSTATIC_LIST_ITEM
pvDummy5	Source/include/FreeRTOS.h	/^	void 				*pvDummy5[ 2 ];$/;"	m	struct:xSTATIC_TIMER
pvDummy7	Source/include/FreeRTOS.h	/^		void *pvDummy7;$/;"	m	struct:xSTATIC_QUEUE
pvOwner	Source/include/list.h	/^	void * pvOwner;										\/*< Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. *\/$/;"	m	struct:xLIST_ITEM
pvParameter1	Source/timers.c	/^	void *pvParameter1;						\/* << The value that will be used as the callback functions first parameter. *\/$/;"	m	struct:tmrCallbackParameters	file:
pvParameters	Source/include/task.h	/^	void *pvParameters;$/;"	m	struct:xTASK_PARAMETERS
pvPortMalloc	Source/portable/MemMang/heap_1.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	Source/portable/MemMang/heap_2.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	Source/portable/MemMang/heap_3.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	Source/portable/MemMang/heap_4.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvPortMalloc	Source/portable/MemMang/heap_5.c	/^void *pvPortMalloc( size_t xWantedSize )$/;"	f
pvTaskCode	Source/include/task.h	/^	TaskFunction_t pvTaskCode;$/;"	m	struct:xTASK_PARAMETERS
pvTaskGetThreadLocalStoragePointer	Source/include/mpu_wrappers.h	115;"	d
pvTaskGetThreadLocalStoragePointer	Source/tasks.c	/^	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )$/;"	f
pvTaskIncrementMutexHeldCount	Source/tasks.c	/^	void *pvTaskIncrementMutexHeldCount( void )$/;"	f
pvThreadLocalStoragePointers	Source/tasks.c	/^		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];$/;"	m	struct:tskTaskControlBlock	file:
pvTimerGetTimerID	Source/include/mpu_wrappers.h	161;"	d
pvTimerGetTimerID	Source/timers.c	/^void *pvTimerGetTimerID( const TimerHandle_t xTimer )$/;"	f
pvTimerID	Source/timers.c	/^	void 					*pvTimerID;			\/*<< An ID to identify the timer.  This allows the timer to be identified when the same callback is used for multiple timers. *\/$/;"	m	struct:tmrTimerControl	file:
pxCallbackFunction	Source/timers.c	/^	PendedFunction_t	pxCallbackFunction;	\/* << The callback function to execute. *\/$/;"	m	struct:tmrCallbackParameters	file:
pxCallbackFunction	Source/timers.c	/^	TimerCallbackFunction_t	pxCallbackFunction;	\/*<< The function that will be called when the timer expires. *\/$/;"	m	struct:tmrTimerControl	file:
pxCoRoutineFunction	Source/include/croutine.h	/^	crCOROUTINE_CODE 	pxCoRoutineFunction;$/;"	m	struct:corCoRoutineControlBlock
pxCurrentCoRoutine	Source/croutine.c	/^CRCB_t * pxCurrentCoRoutine = NULL;$/;"	v
pxCurrentTCB	Source/tasks.c	/^PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;$/;"	v
pxCurrentTimerList	Source/timers.c	/^PRIVILEGED_DATA static List_t *pxCurrentTimerList;$/;"	v	file:
pxDelayedCoRoutineList	Source/croutine.c	/^static List_t * pxDelayedCoRoutineList;									\/*< Points to the delayed co-routine list currently being used. *\/$/;"	v	file:
pxDelayedTaskList	Source/tasks.c	/^PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				\/*< Points to the delayed task list currently being used. *\/$/;"	v	file:
pxDummy1	Source/include/FreeRTOS.h	/^	void				*pxDummy1;$/;"	m	struct:xSTATIC_TCB
pxDummy14	Source/include/FreeRTOS.h	/^		void			*pxDummy14;$/;"	m	struct:xSTATIC_TCB
pxDummy6	Source/include/FreeRTOS.h	/^	void				*pxDummy6;$/;"	m	struct:xSTATIC_TCB
pxDummy8	Source/include/FreeRTOS.h	/^		void			*pxDummy8;$/;"	m	struct:xSTATIC_TCB
pxEnd	Source/portable/MemMang/heap_4.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
pxEnd	Source/portable/MemMang/heap_5.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
pxEndOfStack	Source/tasks.c	/^		StackType_t		*pxEndOfStack;		\/*< Points to the end of the stack on architectures where the stack grows up from low memory. *\/$/;"	m	struct:tskTaskControlBlock	file:
pxISR	Source/include/deprecated_definitions.h	/^	typedef void ( __interrupt __far *pxISR )();$/;"	t
pxISR	Source/include/deprecated_definitions.h	/^    typedef void ( __interrupt __far *pxISR )();$/;"	t
pxIndex	Source/include/list.h	/^	ListItem_t * configLIST_VOLATILE pxIndex;			\/*< Used to walk through the list.  Points to the last item returned by a call to listGET_OWNER_OF_NEXT_ENTRY (). *\/$/;"	m	struct:xLIST
pxMutexHolder	Source/queue.c	108;"	d	file:
pxNext	Source/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxNext;		\/*< Pointer to the next ListItem_t in the list. *\/$/;"	m	struct:xLIST_ITEM	typeref:struct:xLIST_ITEM::configLIST_VOLATILE
pxNext	Source/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxNext;$/;"	m	struct:xMINI_LIST_ITEM	typeref:struct:xMINI_LIST_ITEM::configLIST_VOLATILE
pxNextFreeBlock	Source/portable/MemMang/heap_2.c	/^	struct A_BLOCK_LINK *pxNextFreeBlock;	\/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK::A_BLOCK_LINK	file:
pxNextFreeBlock	Source/portable/MemMang/heap_4.c	/^	struct A_BLOCK_LINK *pxNextFreeBlock;	\/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK::A_BLOCK_LINK	file:
pxNextFreeBlock	Source/portable/MemMang/heap_5.c	/^	struct A_BLOCK_LINK *pxNextFreeBlock;	\/*<< The next free block in the list. *\/$/;"	m	struct:A_BLOCK_LINK	typeref:struct:A_BLOCK_LINK::A_BLOCK_LINK	file:
pxOverflowDelayedCoRoutineList	Source/croutine.c	/^static List_t * pxOverflowDelayedCoRoutineList;							\/*< Points to the delayed co-routine list currently being used to hold co-routines that have overflowed the current tick count. *\/$/;"	v	file:
pxOverflowDelayedTaskList	Source/tasks.c	/^PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		\/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. *\/$/;"	v	file:
pxOverflowTimerList	Source/timers.c	/^PRIVILEGED_DATA static List_t *pxOverflowTimerList;$/;"	v	file:
pxPortInitialiseStack	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )$/;"	f
pxPrevious	Source/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;	\/*< Pointer to the previous ListItem_t in the list. *\/$/;"	m	struct:xLIST_ITEM	typeref:struct:xLIST_ITEM::configLIST_VOLATILE
pxPrevious	Source/include/list.h	/^	struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;$/;"	m	struct:xMINI_LIST_ITEM	typeref:struct:xMINI_LIST_ITEM::configLIST_VOLATILE
pxQueueSetContainer	Source/queue.c	/^		struct QueueDefinition *pxQueueSetContainer;$/;"	m	struct:QueueDefinition	typeref:struct:QueueDefinition::QueueDefinition	file:
pxReadyCoRoutineLists	Source/croutine.c	/^static List_t pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	\/*< Prioritised ready co-routines. *\/$/;"	v	file:
pxReadyTasksLists	Source/tasks.c	/^PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];\/*< Prioritised ready tasks. *\/$/;"	v	file:
pxStack	Source/tasks.c	/^	StackType_t			*pxStack;			\/*< Points to the start of the stack. *\/$/;"	m	struct:tskTaskControlBlock	file:
pxStackBase	Source/include/task.h	/^	StackType_t *pxStackBase;		\/* Points to the lowest address of the task's stack area. *\/$/;"	m	struct:xTASK_STATUS
pxTaskTag	Source/tasks.c	/^		TaskHookFunction_t pxTaskTag;$/;"	m	struct:tskTaskControlBlock	file:
pxTimer	Source/timers.c	/^	Timer_t *			pxTimer;			\/*<< The timer to which the command will be applied. *\/$/;"	m	struct:tmrTimerParameters	file:
pxTopOfStack	Source/tasks.c	/^	volatile StackType_t	*pxTopOfStack;	\/*< Points to the location of the last item placed on the tasks stack.  THIS MUST BE THE FIRST MEMBER OF THE TCB STRUCT. *\/$/;"	m	struct:tskTaskControlBlock	file:
qoDONT_BLOCK	Demo/Common/Minimal/QueueOverwrite.c	84;"	d	file:
qoLOOPS	Demo/Common/Minimal/QueueOverwrite.c	87;"	d	file:
qpeekHIGHEST_PRIORITY	Demo/Common/Minimal/QPeek.c	95;"	d	file:
qpeekHIGH_PRIORITY	Demo/Common/Minimal/QPeek.c	94;"	d	file:
qpeekLOW_PRIORITY	Demo/Common/Minimal/QPeek.c	92;"	d	file:
qpeekMEDIUM_PRIORITY	Demo/Common/Minimal/QPeek.c	93;"	d	file:
qpeekNO_BLOCK	Demo/Common/Minimal/QPeek.c	89;"	d	file:
qpeekQUEUE_LENGTH	Demo/Common/Minimal/QPeek.c	88;"	d	file:
qpeekSHORT_DELAY	Demo/Common/Minimal/QPeek.c	90;"	d	file:
queueLOCKED_UNMODIFIED	Source/queue.c	95;"	d	file:
queueMUTEX_GIVE_BLOCK_TIME	Source/queue.c	115;"	d	file:
queueOVERWRITE	Source/include/queue.h	107;"	d
queueQUEUE_IS_MUTEX	Source/queue.c	110;"	d	file:
queueQUEUE_TYPE_BASE	Source/include/queue.h	110;"	d
queueQUEUE_TYPE_BINARY_SEMAPHORE	Source/include/queue.h	114;"	d
queueQUEUE_TYPE_COUNTING_SEMAPHORE	Source/include/queue.h	113;"	d
queueQUEUE_TYPE_MUTEX	Source/include/queue.h	112;"	d
queueQUEUE_TYPE_RECURSIVE_MUTEX	Source/include/queue.h	115;"	d
queueQUEUE_TYPE_SET	Source/include/queue.h	111;"	d
queueSEMAPHORE_QUEUE_ITEM_LENGTH	Source/queue.c	114;"	d	file:
queueSEND_TO_BACK	Source/include/queue.h	105;"	d
queueSEND_TO_FRONT	Source/include/queue.h	106;"	d
queueUNLOCKED	Source/queue.c	94;"	d	file:
queueYIELD_IF_USING_PREEMPTION	Source/queue.c	120;"	d	file:
queueYIELD_IF_USING_PREEMPTION	Source/queue.c	122;"	d	file:
queuesetALLOWABLE_RX_DEVIATION	Demo/Common/Minimal/QueueSet.c	131;"	d	file:
queuesetDONT_BLOCK	Demo/Common/Minimal/QueueSet.c	104;"	d	file:
queuesetIGNORED_BOUNDARY	Demo/Common/Minimal/QueueSet.c	135;"	d	file:
queuesetINITIAL_ISR_TX_VALUE	Demo/Common/Minimal/QueueSet.c	109;"	d	file:
queuesetISR_TX_PERIOD	Demo/Common/Minimal/QueueSet.c	120;"	d	file:
queuesetISR_TX_PERIOD	Demo/Common/Minimal/QueueSetPolling.c	103;"	d	file:
queuesetLOW_PRIORITY	Demo/Common/Minimal/QueueSet.c	112;"	d	file:
queuesetMEDIUM_PRIORITY	Demo/Common/Minimal/QueueSet.c	113;"	d	file:
queuesetNUM_QUEUES_IN_SET	Demo/Common/Minimal/QueueSet.c	97;"	d	file:
queuesetPRIORITY_CHANGE_LOOPS	Demo/Common/Minimal/QueueSet.c	117;"	d	file:
queuesetQUEUE_LENGTH	Demo/Common/Minimal/QueueSet.c	100;"	d	file:
queuesetSHORT_DELAY	Demo/Common/Minimal/QueueSet.c	103;"	d	file:
queuesetTX_LOOP_DELAY	Demo/Common/Minimal/QueueSet.c	125;"	d	file:
recmu15ms_DELAY	Demo/Common/Minimal/recmutex.c	128;"	d	file:
recmuBLOCKING_TASK_PRIORITY	Demo/Common/Minimal/recmutex.c	119;"	d	file:
recmuCONTROLLING_TASK_PRIORITY	Demo/Common/Minimal/recmutex.c	117;"	d	file:
recmuMAX_COUNT	Demo/Common/Minimal/recmutex.c	123;"	d	file:
recmuNO_DELAY	Demo/Common/Minimal/recmutex.c	127;"	d	file:
recmuPOLLING_TASK_PRIORITY	Demo/Common/Minimal/recmutex.c	120;"	d	file:
recmuSHORT_DELAY	Demo/Common/Minimal/recmutex.c	126;"	d	file:
sBlockingConsumerCount	Demo/Common/Full/BlockQ.c	/^static volatile short sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( short ) 0, ( short ) 0, ( short ) 0 };$/;"	v	file:
sBlockingConsumerCount	Demo/Common/Minimal/BlockQ.c	/^static volatile short sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };$/;"	v	file:
sBlockingProducerCount	Demo/Common/Full/BlockQ.c	/^static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( short ) 0, ( short ) 0, ( short ) 0 };$/;"	v	file:
sBlockingProducerCount	Demo/Common/Minimal/BlockQ.c	/^static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };$/;"	v	file:
sCheckVariables	Demo/Common/Full/semtest.c	/^static volatile short sCheckVariables[ semtstNUM_TASKS ] = { 0 };$/;"	v	file:
sCheckVariables	Demo/Common/Minimal/semtest.c	/^static volatile short sCheckVariables[ semtstNUM_TASKS ] = { 0 };$/;"	v	file:
sCreationCount	Demo/Common/Full/death.c	/^static volatile short sCreationCount = 0;$/;"	v	file:
sNextCheckVariable	Demo/Common/Full/semtest.c	/^static volatile short sNextCheckVariable = 0;$/;"	v	file:
sNextCheckVariable	Demo/Common/Minimal/semtest.c	/^static volatile short sNextCheckVariable = 0;$/;"	v	file:
sPollingConsumerCount	Demo/Common/Full/PollQ.c	/^static volatile short sPollingConsumerCount = 0, sPollingProducerCount = 0;$/;"	v	file:
sPollingProducerCount	Demo/Common/Full/PollQ.c	/^static volatile short sPollingConsumerCount = 0, sPollingProducerCount = 0;$/;"	v	file:
sRxCount	Demo/Common/Full/comtest.c	/^volatile short sTxCount = 0, sRxCount = 0, sSemCount = 0;$/;"	v
sSemCount	Demo/Common/Full/comtest.c	/^volatile short sTxCount = 0, sRxCount = 0, sSemCount = 0;$/;"	v
sTxCount	Demo/Common/Full/comtest.c	/^volatile short sTxCount = 0, sRxCount = 0, sSemCount = 0;$/;"	v
semBINARY_SEMAPHORE_QUEUE_LENGTH	Source/include/semphr.h	81;"	d
semGIVE_BLOCK_TIME	Source/include/semphr.h	83;"	d
semSEMAPHORE_QUEUE_ITEM_LENGTH	Source/include/semphr.h	82;"	d
semtstBLOCKING_EXPECTED_VALUE	Demo/Common/Full/semtest.c	128;"	d	file:
semtstBLOCKING_EXPECTED_VALUE	Demo/Common/Minimal/semtest.c	105;"	d	file:
semtstDELAY_FACTOR	Demo/Common/Full/semtest.c	135;"	d	file:
semtstDELAY_FACTOR	Demo/Common/Minimal/semtest.c	112;"	d	file:
semtstNON_BLOCKING_EXPECTED_VALUE	Demo/Common/Full/semtest.c	129;"	d	file:
semtstNON_BLOCKING_EXPECTED_VALUE	Demo/Common/Minimal/semtest.c	106;"	d	file:
semtstNUM_TASKS	Demo/Common/Full/semtest.c	133;"	d	file:
semtstNUM_TASKS	Demo/Common/Minimal/semtest.c	110;"	d	file:
semtstSTACK_SIZE	Demo/Common/Full/semtest.c	131;"	d	file:
semtstSTACK_SIZE	Demo/Common/Minimal/semtest.c	108;"	d	file:
ser110	Demo/Common/include/serial.h	/^	ser110,		$/;"	e	enum:__anon11
ser115200	Demo/Common/include/serial.h	/^	ser115200$/;"	e	enum:__anon11
ser1200	Demo/Common/include/serial.h	/^	ser1200,	$/;"	e	enum:__anon11
ser134	Demo/Common/include/serial.h	/^	ser134,		$/;"	e	enum:__anon11
ser150	Demo/Common/include/serial.h	/^	ser150,    $/;"	e	enum:__anon11
ser1800	Demo/Common/include/serial.h	/^	ser1800,	$/;"	e	enum:__anon11
ser19200	Demo/Common/include/serial.h	/^	ser19200,	$/;"	e	enum:__anon11
ser200	Demo/Common/include/serial.h	/^	ser200,$/;"	e	enum:__anon11
ser2400	Demo/Common/include/serial.h	/^	ser2400,   $/;"	e	enum:__anon11
ser300	Demo/Common/include/serial.h	/^	ser300,		$/;"	e	enum:__anon11
ser38400	Demo/Common/include/serial.h	/^	ser38400,	$/;"	e	enum:__anon11
ser4800	Demo/Common/include/serial.h	/^	ser4800,$/;"	e	enum:__anon11
ser50	Demo/Common/include/serial.h	/^	ser50,		$/;"	e	enum:__anon11
ser57600	Demo/Common/include/serial.h	/^	ser57600,	$/;"	e	enum:__anon11
ser600	Demo/Common/include/serial.h	/^	ser600,		$/;"	e	enum:__anon11
ser75	Demo/Common/include/serial.h	/^	ser75,		$/;"	e	enum:__anon11
ser9600	Demo/Common/include/serial.h	/^	ser9600,		$/;"	e	enum:__anon11
serAUTO_BAUD_OFF	Demo/dsPIC33E_MPLAB/serial/serial.c	95;"	d	file:
serBITS_5	Demo/Common/include/serial.h	/^	serBITS_5, $/;"	e	enum:__anon10
serBITS_6	Demo/Common/include/serial.h	/^	serBITS_6, $/;"	e	enum:__anon10
serBITS_7	Demo/Common/include/serial.h	/^	serBITS_7, $/;"	e	enum:__anon10
serBITS_8	Demo/Common/include/serial.h	/^	serBITS_8 $/;"	e	enum:__anon10
serCLEAR_FLAG	Demo/dsPIC33E_MPLAB/serial/serial.c	107;"	d	file:
serCOM1	Demo/Common/include/serial.h	/^	serCOM1, $/;"	e	enum:__anon7
serCOM2	Demo/Common/include/serial.h	/^	serCOM2, $/;"	e	enum:__anon7
serCOM3	Demo/Common/include/serial.h	/^	serCOM3, $/;"	e	enum:__anon7
serCOM4	Demo/Common/include/serial.h	/^	serCOM4, $/;"	e	enum:__anon7
serCOM5	Demo/Common/include/serial.h	/^	serCOM5, $/;"	e	enum:__anon7
serCOM6	Demo/Common/include/serial.h	/^	serCOM6, $/;"	e	enum:__anon7
serCOM7	Demo/Common/include/serial.h	/^	serCOM7, $/;"	e	enum:__anon7
serCOM8	Demo/Common/include/serial.h	/^	serCOM8 $/;"	e	enum:__anon7
serCONTINUE_IN_IDLE_MODE	Demo/dsPIC33E_MPLAB/serial/serial.c	101;"	d	file:
serEIGHT_DATA_BITS_NO_PARITY	Demo/dsPIC33E_MPLAB/serial/serial.c	93;"	d	file:
serEVEN_PARITY	Demo/Common/include/serial.h	/^	serEVEN_PARITY, $/;"	e	enum:__anon8
serINPUT	Demo/dsPIC33E_MPLAB/serial/serial.c	90;"	d	file:
serINTERRUPT_DISABLE	Demo/dsPIC33E_MPLAB/serial/serial.c	106;"	d	file:
serINTERRUPT_ENABLE	Demo/dsPIC33E_MPLAB/serial/serial.c	105;"	d	file:
serINTERRUPT_ON_SINGLE_CHAR	Demo/dsPIC33E_MPLAB/serial/serial.c	103;"	d	file:
serLOOPBACK_OFF	Demo/dsPIC33E_MPLAB/serial/serial.c	96;"	d	file:
serLOW_SPEED	Demo/dsPIC33E_MPLAB/serial/serial.c	91;"	d	file:
serMARK_PARITY	Demo/Common/include/serial.h	/^	serMARK_PARITY, $/;"	e	enum:__anon8
serNORMAL_IDLE_STATE	Demo/dsPIC33E_MPLAB/serial/serial.c	94;"	d	file:
serNO_HARDWARE_FLOW_CONTROL	Demo/dsPIC33E_MPLAB/serial/serial.c	98;"	d	file:
serNO_IRDA	Demo/dsPIC33E_MPLAB/serial/serial.c	100;"	d	file:
serNO_PARITY	Demo/Common/include/serial.h	/^	serNO_PARITY, $/;"	e	enum:__anon8
serODD_PARITY	Demo/Common/include/serial.h	/^	serODD_PARITY, $/;"	e	enum:__anon8
serONE_STOP_BIT	Demo/dsPIC33E_MPLAB/serial/serial.c	92;"	d	file:
serOUTPUT	Demo/dsPIC33E_MPLAB/serial/serial.c	89;"	d	file:
serSET_FLAG	Demo/dsPIC33E_MPLAB/serial/serial.c	108;"	d	file:
serSPACE_PARITY	Demo/Common/include/serial.h	/^	serSPACE_PARITY $/;"	e	enum:__anon8
serSTANDARD_IO	Demo/dsPIC33E_MPLAB/serial/serial.c	99;"	d	file:
serSTOP_1	Demo/Common/include/serial.h	/^	serSTOP_1, $/;"	e	enum:__anon9
serSTOP_2	Demo/Common/include/serial.h	/^	serSTOP_2 $/;"	e	enum:__anon9
serTX_ENABLE	Demo/dsPIC33E_MPLAB/serial/serial.c	104;"	d	file:
serUART_ENABLED	Demo/dsPIC33E_MPLAB/serial/serial.c	102;"	d	file:
serWAKE_UP_DISABLE	Demo/dsPIC33E_MPLAB/serial/serial.c	97;"	d	file:
setpollDONT_BLOCK	Demo/Common/Minimal/QueueSetPolling.c	100;"	d	file:
setpollQUEUE_LENGTH	Demo/Common/Minimal/QueueSetPolling.c	97;"	d	file:
static	Source/croutine.c	82;"	d	file:
static	Source/tasks.c	153;"	d	file:
staticBINARY_SEMAPHORE_MAX_COUNT	Demo/Common/Minimal/StaticAllocation.c	105;"	d	file:
staticCREATOR_TASK_STACK_SIZE	Demo/Common/Minimal/StaticAllocation.c	108;"	d	file:
staticDONT_BLOCK	Demo/Common/Minimal/StaticAllocation.c	102;"	d	file:
staticMAX_TIMER_CALLBACK_EXECUTIONS	Demo/Common/Minimal/StaticAllocation.c	111;"	d	file:
staticQUEUE_LENGTH_IN_ITEMS	Demo/Common/Minimal/StaticAllocation.c	99;"	d	file:
staticTASK_PRIORITY	Demo/Common/Minimal/StaticAllocation.c	95;"	d	file:
taskCHECK_FOR_STACK_OVERFLOW	Source/include/StackMacros.h	107;"	d
taskCHECK_FOR_STACK_OVERFLOW	Source/include/StackMacros.h	122;"	d
taskCHECK_FOR_STACK_OVERFLOW	Source/include/StackMacros.h	141;"	d
taskCHECK_FOR_STACK_OVERFLOW	Source/include/StackMacros.h	165;"	d
taskCHECK_FOR_STACK_OVERFLOW	Source/include/StackMacros.h	92;"	d
taskDISABLE_INTERRUPTS	Source/include/task.h	242;"	d
taskENABLE_INTERRUPTS	Source/include/task.h	252;"	d
taskENTER_CRITICAL	Source/include/task.h	217;"	d
taskENTER_CRITICAL_FROM_ISR	Source/include/task.h	218;"	d
taskEVENT_LIST_ITEM_VALUE_IN_USE	Source/tasks.c	283;"	d	file:
taskEVENT_LIST_ITEM_VALUE_IN_USE	Source/tasks.c	285;"	d	file:
taskEXIT_CRITICAL	Source/include/task.h	232;"	d
taskEXIT_CRITICAL_FROM_ISR	Source/include/task.h	233;"	d
taskNOTIFICATION_RECEIVED	Source/tasks.c	112;"	d	file:
taskNOT_WAITING_NOTIFICATION	Source/tasks.c	110;"	d	file:
taskRECORD_READY_PRIORITY	Source/tasks.c	164;"	d	file:
taskRECORD_READY_PRIORITY	Source/tasks.c	206;"	d	file:
taskRESET_READY_PRIORITY	Source/tasks.c	196;"	d	file:
taskRESET_READY_PRIORITY	Source/tasks.c	225;"	d	file:
taskSCHEDULER_NOT_STARTED	Source/include/task.h	258;"	d
taskSCHEDULER_RUNNING	Source/include/task.h	259;"	d
taskSCHEDULER_SUSPENDED	Source/include/task.h	257;"	d
taskSELECT_HIGHEST_PRIORITY_TASK	Source/tasks.c	174;"	d	file:
taskSELECT_HIGHEST_PRIORITY_TASK	Source/tasks.c	210;"	d	file:
taskSWITCH_DELAYED_LISTS	Source/tasks.c	239;"	d	file:
taskWAITING_NOTIFICATION	Source/tasks.c	111;"	d	file:
taskYIELD	Source/include/task.h	203;"	d
taskYIELD_IF_USING_PREEMPTION	Source/tasks.c	104;"	d	file:
taskYIELD_IF_USING_PREEMPTION	Source/tasks.c	106;"	d	file:
timerMAX_COUNT	Demo/dsPIC33E_MPLAB/timertest.c	82;"	d	file:
timerNORMALLY_EMPTY_RX	Demo/Common/Minimal/IntQueue.c	173;"	d	file:
timerNORMALLY_EMPTY_TX	Demo/Common/Minimal/IntQueue.c	139;"	d	file:
timerNORMALLY_FULL_RX	Demo/Common/Minimal/IntQueue.c	185;"	d	file:
timerNORMALLY_FULL_TX	Demo/Common/Minimal/IntQueue.c	156;"	d	file:
timerSETTLE_TIME	Demo/dsPIC33E_MPLAB/timertest.c	79;"	d	file:
tmrCOMMAND_CHANGE_PERIOD	Source/include/timers.h	102;"	d
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR	Source/include/timers.h	109;"	d
tmrCOMMAND_DELETE	Source/include/timers.h	103;"	d
tmrCOMMAND_EXECUTE_CALLBACK	Source/include/timers.h	97;"	d
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR	Source/include/timers.h	96;"	d
tmrCOMMAND_RESET	Source/include/timers.h	100;"	d
tmrCOMMAND_RESET_FROM_ISR	Source/include/timers.h	107;"	d
tmrCOMMAND_START	Source/include/timers.h	99;"	d
tmrCOMMAND_START_DONT_TRACE	Source/include/timers.h	98;"	d
tmrCOMMAND_START_FROM_ISR	Source/include/timers.h	106;"	d
tmrCOMMAND_STOP	Source/include/timers.h	101;"	d
tmrCOMMAND_STOP_FROM_ISR	Source/include/timers.h	108;"	d
tmrCallbackParameters	Source/timers.c	/^typedef struct tmrCallbackParameters$/;"	s	file:
tmrFIRST_FROM_ISR_COMMAND	Source/include/timers.h	105;"	d
tmrNO_DELAY	Source/timers.c	101;"	d	file:
tmrTIMER_CALLBACK	Source/include/FreeRTOS.h	846;"	d
tmrTimerControl	Source/timers.c	/^typedef struct tmrTimerControl$/;"	s	file:
tmrTimerParameters	Source/timers.c	/^typedef struct tmrTimerParameters$/;"	s	file:
tmrTimerQueueMessage	Source/timers.c	/^typedef struct tmrTimerQueueMessage$/;"	s	file:
tmrdemoDONT_BLOCK	Demo/Common/Minimal/TimerDemo.c	91;"	d	file:
tmrdemoONE_SHOT_TIMER_PERIOD	Demo/Common/Minimal/TimerDemo.c	92;"	d	file:
traceBLOCKING_ON_QUEUE_RECEIVE	Source/include/FreeRTOS.h	396;"	d
traceBLOCKING_ON_QUEUE_SEND	Source/include/FreeRTOS.h	404;"	d
traceCREATE_COUNTING_SEMAPHORE	Source/include/FreeRTOS.h	454;"	d
traceCREATE_COUNTING_SEMAPHORE_FAILED	Source/include/FreeRTOS.h	458;"	d
traceCREATE_MUTEX	Source/include/FreeRTOS.h	430;"	d
traceCREATE_MUTEX_FAILED	Source/include/FreeRTOS.h	434;"	d
traceEND	Source/include/FreeRTOS.h	343;"	d
traceEVENT_GROUP_CLEAR_BITS	Source/include/FreeRTOS.h	602;"	d
traceEVENT_GROUP_CLEAR_BITS_FROM_ISR	Source/include/FreeRTOS.h	606;"	d
traceEVENT_GROUP_CREATE	Source/include/FreeRTOS.h	578;"	d
traceEVENT_GROUP_CREATE_FAILED	Source/include/FreeRTOS.h	582;"	d
traceEVENT_GROUP_DELETE	Source/include/FreeRTOS.h	618;"	d
traceEVENT_GROUP_SET_BITS	Source/include/FreeRTOS.h	610;"	d
traceEVENT_GROUP_SET_BITS_FROM_ISR	Source/include/FreeRTOS.h	614;"	d
traceEVENT_GROUP_SYNC_BLOCK	Source/include/FreeRTOS.h	586;"	d
traceEVENT_GROUP_SYNC_END	Source/include/FreeRTOS.h	590;"	d
traceEVENT_GROUP_WAIT_BITS_BLOCK	Source/include/FreeRTOS.h	594;"	d
traceEVENT_GROUP_WAIT_BITS_END	Source/include/FreeRTOS.h	598;"	d
traceFREE	Source/include/FreeRTOS.h	574;"	d
traceGIVE_MUTEX_RECURSIVE	Source/include/FreeRTOS.h	438;"	d
traceGIVE_MUTEX_RECURSIVE_FAILED	Source/include/FreeRTOS.h	442;"	d
traceINCREASE_TICK_COUNT	Source/include/FreeRTOS.h	355;"	d
traceLOW_POWER_IDLE_BEGIN	Source/include/FreeRTOS.h	360;"	d
traceLOW_POWER_IDLE_END	Source/include/FreeRTOS.h	365;"	d
traceMALLOC	Source/include/FreeRTOS.h	570;"	d
traceMOVED_TASK_TO_READY_STATE	Source/include/FreeRTOS.h	414;"	d
tracePEND_FUNC_CALL	Source/include/FreeRTOS.h	622;"	d
tracePEND_FUNC_CALL_FROM_ISR	Source/include/FreeRTOS.h	626;"	d
tracePOST_MOVED_TASK_TO_READY_STATE	Source/include/FreeRTOS.h	418;"	d
traceQUEUE_CREATE	Source/include/FreeRTOS.h	422;"	d
traceQUEUE_CREATE_FAILED	Source/include/FreeRTOS.h	426;"	d
traceQUEUE_DELETE	Source/include/FreeRTOS.h	506;"	d
traceQUEUE_PEEK	Source/include/FreeRTOS.h	474;"	d
traceQUEUE_PEEK_FROM_ISR	Source/include/FreeRTOS.h	478;"	d
traceQUEUE_PEEK_FROM_ISR_FAILED	Source/include/FreeRTOS.h	502;"	d
traceQUEUE_RECEIVE	Source/include/FreeRTOS.h	470;"	d
traceQUEUE_RECEIVE_FAILED	Source/include/FreeRTOS.h	482;"	d
traceQUEUE_RECEIVE_FROM_ISR	Source/include/FreeRTOS.h	494;"	d
traceQUEUE_RECEIVE_FROM_ISR_FAILED	Source/include/FreeRTOS.h	498;"	d
traceQUEUE_REGISTRY_ADD	Source/include/FreeRTOS.h	630;"	d
traceQUEUE_SEND	Source/include/FreeRTOS.h	462;"	d
traceQUEUE_SEND_FAILED	Source/include/FreeRTOS.h	466;"	d
traceQUEUE_SEND_FROM_ISR	Source/include/FreeRTOS.h	486;"	d
traceQUEUE_SEND_FROM_ISR_FAILED	Source/include/FreeRTOS.h	490;"	d
traceSTART	Source/include/FreeRTOS.h	337;"	d
traceTAKE_MUTEX_RECURSIVE	Source/include/FreeRTOS.h	446;"	d
traceTAKE_MUTEX_RECURSIVE_FAILED	Source/include/FreeRTOS.h	450;"	d
traceTASK_CREATE	Source/include/FreeRTOS.h	510;"	d
traceTASK_CREATE_FAILED	Source/include/FreeRTOS.h	514;"	d
traceTASK_DELAY	Source/include/FreeRTOS.h	526;"	d
traceTASK_DELAY_UNTIL	Source/include/FreeRTOS.h	522;"	d
traceTASK_DELETE	Source/include/FreeRTOS.h	518;"	d
traceTASK_INCREMENT_TICK	Source/include/FreeRTOS.h	546;"	d
traceTASK_NOTIFY	Source/include/FreeRTOS.h	650;"	d
traceTASK_NOTIFY_FROM_ISR	Source/include/FreeRTOS.h	654;"	d
traceTASK_NOTIFY_GIVE_FROM_ISR	Source/include/FreeRTOS.h	658;"	d
traceTASK_NOTIFY_TAKE	Source/include/FreeRTOS.h	638;"	d
traceTASK_NOTIFY_TAKE_BLOCK	Source/include/FreeRTOS.h	634;"	d
traceTASK_NOTIFY_WAIT	Source/include/FreeRTOS.h	646;"	d
traceTASK_NOTIFY_WAIT_BLOCK	Source/include/FreeRTOS.h	642;"	d
traceTASK_PRIORITY_DISINHERIT	Source/include/FreeRTOS.h	388;"	d
traceTASK_PRIORITY_INHERIT	Source/include/FreeRTOS.h	380;"	d
traceTASK_PRIORITY_SET	Source/include/FreeRTOS.h	530;"	d
traceTASK_RESUME	Source/include/FreeRTOS.h	538;"	d
traceTASK_RESUME_FROM_ISR	Source/include/FreeRTOS.h	542;"	d
traceTASK_SUSPEND	Source/include/FreeRTOS.h	534;"	d
traceTASK_SWITCHED_IN	Source/include/FreeRTOS.h	349;"	d
traceTASK_SWITCHED_OUT	Source/include/FreeRTOS.h	371;"	d
traceTIMER_COMMAND_RECEIVED	Source/include/FreeRTOS.h	566;"	d
traceTIMER_COMMAND_SEND	Source/include/FreeRTOS.h	558;"	d
traceTIMER_CREATE	Source/include/FreeRTOS.h	550;"	d
traceTIMER_CREATE_FAILED	Source/include/FreeRTOS.h	554;"	d
traceTIMER_EXPIRED	Source/include/FreeRTOS.h	562;"	d
trmdemoNUM_TIMER_RESETS	Demo/Common/Minimal/TimerDemo.c	93;"	d	file:
tskBLOCKED_CHAR	Source/tasks.c	143;"	d	file:
tskDELETED_CHAR	Source/tasks.c	145;"	d	file:
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB	Source/tasks.c	136;"	d	file:
tskIDLE_PRIORITY	Source/include/task.h	193;"	d
tskKERNEL_VERSION_BUILD	Source/include/task.h	91;"	d
tskKERNEL_VERSION_MAJOR	Source/include/task.h	89;"	d
tskKERNEL_VERSION_MINOR	Source/include/task.h	90;"	d
tskKERNEL_VERSION_NUMBER	Source/include/task.h	88;"	d
tskREADY_CHAR	Source/tasks.c	144;"	d	file:
tskSTACK_FILL_BYTE	Source/tasks.c	118;"	d	file:
tskSTATICALLY_ALLOCATED_STACK_AND_TCB	Source/tasks.c	138;"	d	file:
tskSTATICALLY_ALLOCATED_STACK_ONLY	Source/tasks.c	137;"	d	file:
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	Source/tasks.c	135;"	d	file:
tskSUSPENDED_CHAR	Source/tasks.c	146;"	d	file:
tskTCB	Source/tasks.c	/^} tskTCB;$/;"	t	typeref:struct:tskTaskControlBlock	file:
tskTaskControlBlock	Source/tasks.c	/^typedef struct tskTaskControlBlock$/;"	s	file:
u	Source/include/FreeRTOS.h	/^	} u;$/;"	m	struct:xSTATIC_QUEUE	typeref:union:xSTATIC_QUEUE::__anon6
u	Source/queue.c	/^	} u;$/;"	m	struct:QueueDefinition	typeref:union:QueueDefinition::__anon1	file:
u	Source/timers.c	/^	} u;$/;"	m	struct:tmrTimerQueueMessage	typeref:union:tmrTimerQueueMessage::__anon2	file:
ucAutoReloadTimerCounters	Demo/Common/Minimal/TimerDemo.c	/^static uint8_t ucAutoReloadTimerCounters[ configTIMER_QUEUE_LENGTH + 1 ] = { 0 };$/;"	v	file:
ucDelayAborted	Source/tasks.c	/^		uint8_t ucDelayAborted;$/;"	m	struct:tskTaskControlBlock	file:
ucDummy19	Source/include/FreeRTOS.h	/^		uint8_t 		ucDummy19;$/;"	m	struct:xSTATIC_TCB
ucDummy4	Source/include/FreeRTOS.h	/^			uint8_t ucDummy4;$/;"	m	struct:xSTATIC_EVENT_GROUP
ucDummy5	Source/include/FreeRTOS.h	/^	uint8_t ucDummy5[ 2 ];$/;"	m	struct:xSTATIC_QUEUE
ucDummy6	Source/include/FreeRTOS.h	/^		uint8_t ucDummy6;$/;"	m	struct:xSTATIC_QUEUE
ucDummy7	Source/include/FreeRTOS.h	/^		uint8_t 		ucDummy7;$/;"	m	struct:xSTATIC_TIMER
ucDummy7	Source/include/FreeRTOS.h	/^	uint8_t				ucDummy7[ configMAX_TASK_NAME_LEN ];$/;"	m	struct:xSTATIC_TCB
ucDummy9	Source/include/FreeRTOS.h	/^		uint8_t ucDummy9;$/;"	m	struct:xSTATIC_QUEUE
ucHeap	Source/portable/MemMang/heap_1.c	/^	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	file:
ucHeap	Source/portable/MemMang/heap_2.c	/^	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	file:
ucHeap	Source/portable/MemMang/heap_4.c	/^	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];$/;"	v	file:
ucISRAutoReloadTimerCounter	Demo/Common/Minimal/TimerDemo.c	/^static uint8_t ucISRAutoReloadTimerCounter = ( uint8_t ) 0;$/;"	v	file:
ucISROneShotTimerCounter	Demo/Common/Minimal/TimerDemo.c	/^static uint8_t ucISROneShotTimerCounter = ( uint8_t ) 0;$/;"	v	file:
ucNormallyEmptyReceivedValues	Demo/Common/Minimal/IntQueue.c	/^static uint8_t ucNormallyEmptyReceivedValues[ intqNUM_VALUES_TO_LOG ] = { 0 };$/;"	v	file:
ucNormallyFullReceivedValues	Demo/Common/Minimal/IntQueue.c	/^static uint8_t ucNormallyFullReceivedValues[ intqNUM_VALUES_TO_LOG ] = { 0 };$/;"	v	file:
ucNotifyState	Source/tasks.c	/^		volatile uint8_t ucNotifyState;$/;"	m	struct:tskTaskControlBlock	file:
ucOneShotTimerCounter	Demo/Common/Minimal/TimerDemo.c	/^static uint8_t ucOneShotTimerCounter = ( uint8_t ) 0;$/;"	v	file:
ucQueueGetQueueType	Source/queue.c	/^	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )$/;"	f
ucQueueType	Source/queue.c	/^		uint8_t ucQueueType;$/;"	m	struct:QueueDefinition	file:
ucStaticallyAllocated	Source/event_groups.c	/^		uint8_t ucStaticallyAllocated; \/*< Set to pdTRUE if the event group is statically allocated to ensure no attempt is made to free the memory. *\/$/;"	m	struct:xEventGroupDefinition	file:
ucStaticallyAllocated	Source/queue.c	/^		uint8_t ucStaticallyAllocated;	\/*< Set to pdTRUE if the memory used by the queue was statically allocated to ensure no attempt is made to free the memory. *\/$/;"	m	struct:QueueDefinition	file:
ucStaticallyAllocated	Source/tasks.c	/^		uint8_t	ucStaticallyAllocated; 		\/*< Set to pdTRUE if the task is a statically allocated to ensure no attempt is made to free the memory. *\/$/;"	m	struct:tskTaskControlBlock	file:
ucStaticallyAllocated	Source/timers.c	/^		uint8_t 			ucStaticallyAllocated; \/*<< Set to pdTRUE if the timer was created statically so no attempt is made to free the memory again if the timer is later deleted. *\/$/;"	m	struct:tmrTimerControl	file:
ulCounter	Demo/Common/Full/dynamic.c	/^static unsigned long ulCounter;$/;"	v	file:
ulCounter	Demo/Common/Minimal/dynamic.c	/^static volatile uint32_t ulCounter;$/;"	v	file:
ulCountingSemaphoreLoops	Demo/Common/Minimal/IntSemTest.c	/^static volatile uint32_t ulMasterLoops = 0, ulCountingSemaphoreLoops = 0;$/;"	v	file:
ulCycleCounter	Demo/Common/Minimal/QueueSet.c	/^static volatile uint32_t ulCycleCounter = 0UL;$/;"	v	file:
ulCycleCounter	Demo/Common/Minimal/QueueSetPolling.c	/^static uint32_t ulCycleCounter = 0;$/;"	v	file:
ulDummy16	Source/include/FreeRTOS.h	/^		uint32_t		ulDummy16;$/;"	m	struct:xSTATIC_TCB
ulDummy18	Source/include/FreeRTOS.h	/^		uint32_t 		ulDummy18;$/;"	m	struct:xSTATIC_TCB
ulExpectedValue	Demo/Common/Minimal/dynamic.c	/^static uint32_t ulExpectedValue = ( uint32_t ) 0;$/;"	v	file:
ulGuardedVariable	Demo/Common/Minimal/GenQTest.c	/^static volatile uint32_t ulGuardedVariable = 0;$/;"	v	file:
ulISRCycles	Demo/Common/Minimal/EventGroupsDemo.c	/^static volatile uint32_t ulTestMasterCycles = 0, ulTestSlaveCycles = 0, ulISRCycles = 0;$/;"	v	file:
ulISRTxValue	Demo/Common/Minimal/QueueSet.c	/^static volatile uint32_t ulISRTxValue = queuesetINITIAL_ISR_TX_VALUE;$/;"	v	file:
ulLengthInBytes	Source/include/task.h	/^	uint32_t ulLengthInBytes;$/;"	m	struct:xMEMORY_REGION
ulLoopCounter	Demo/Common/Minimal/GenQTest.c	/^static volatile uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter	Demo/Common/Minimal/QPeek.c	/^static volatile uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter	Demo/Common/Minimal/QueueOverwrite.c	/^static uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter	Demo/Common/Minimal/TimerDemo.c	/^static volatile uint32_t ulLoopCounter = 0;$/;"	v	file:
ulLoopCounter2	Demo/Common/Minimal/GenQTest.c	/^static volatile uint32_t ulLoopCounter2 = 0;$/;"	v	file:
ulMasterLoops	Demo/Common/Minimal/IntSemTest.c	/^static volatile uint32_t ulMasterLoops = 0, ulCountingSemaphoreLoops = 0;$/;"	v	file:
ulNextRand	Demo/Common/Minimal/StaticAllocation.c	/^static uint32_t ulNextRand = 0;$/;"	v	file:
ulNotifiedValue	Source/tasks.c	/^		volatile uint32_t ulNotifiedValue;$/;"	m	struct:tskTaskControlBlock	file:
ulNotifyCycleCount	Demo/Common/Minimal/TaskNotify.c	/^static volatile uint32_t ulNotifyCycleCount = 0;$/;"	v	file:
ulParameter2	Source/timers.c	/^	uint32_t ulParameter2;					\/* << The value that will be used as the callback functions second parameter. *\/$/;"	m	struct:tmrCallbackParameters	file:
ulParameters	Source/include/task.h	/^	uint32_t ulParameters;$/;"	m	struct:xMEMORY_REGION
ulPrioritySetCounter	Demo/Common/Full/dynamic.c	/^static unsigned long ulPrioritySetCounter;$/;"	v	file:
ulQueueUsedCounter	Demo/Common/Minimal/QueueSet.c	/^static uint32_t ulQueueUsedCounter[ queuesetNUM_QUEUES_IN_SET ] = { 0 };$/;"	v	file:
ulRunTimeCounter	Source/include/task.h	/^	uint32_t ulRunTimeCounter;		\/* The total run time allocated to the task so far, as defined by the run time stats clock.  See http:\/\/www.freertos.org\/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. *\/$/;"	m	struct:xTASK_STATUS
ulRunTimeCounter	Source/tasks.c	/^		uint32_t		ulRunTimeCounter;	\/*< Stores the amount of time the task has spent in the Running state. *\/$/;"	m	struct:tskTaskControlBlock	file:
ulTaskNotifyTake	Source/include/mpu_wrappers.h	123;"	d
ulTaskNotifyTake	Source/tasks.c	/^	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )$/;"	f
ulTaskSwitchedInTime	Source/tasks.c	/^	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	\/*< Holds the value of a timer\/counter the last time a task was switched in. *\/$/;"	v	file:
ulTestMasterCycles	Demo/Common/Minimal/EventGroupsDemo.c	/^static volatile uint32_t ulTestMasterCycles = 0, ulTestSlaveCycles = 0, ulISRCycles = 0;$/;"	v	file:
ulTestSlaveCycles	Demo/Common/Minimal/EventGroupsDemo.c	/^static volatile uint32_t ulTestMasterCycles = 0, ulTestSlaveCycles = 0, ulISRCycles = 0;$/;"	v	file:
ulTimerNotificationsReceived	Demo/Common/Minimal/TaskNotify.c	/^static uint32_t ulTimerNotificationsReceived = 0UL, ulTimerNotificationsSent = 0UL;$/;"	v	file:
ulTimerNotificationsSent	Demo/Common/Minimal/TaskNotify.c	/^static uint32_t ulTimerNotificationsReceived = 0UL, ulTimerNotificationsSent = 0UL;$/;"	v	file:
ulTotalRunTime	Source/tasks.c	/^	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		\/*< Holds the total amount of execution time as defined by the run time counter clock. *\/$/;"	v	file:
usCheckVariable	Demo/Common/Full/dynamic.c	/^static unsigned short usCheckVariable = ( unsigned short ) 0;$/;"	v	file:
usCheckVariable	Demo/Common/Minimal/dynamic.c	/^static volatile uint16_t usCheckVariable = ( uint16_t ) 0;$/;"	v	file:
usCreationCount	Demo/Common/Minimal/death.c	/^static volatile uint16_t usCreationCount = 0;$/;"	v	file:
usMaxJitter	Demo/dsPIC33E_MPLAB/timertest.c	/^unsigned short usMaxJitter = 0;$/;"	v
usStackDepth	Source/include/task.h	/^	uint16_t usStackDepth;$/;"	m	struct:xTASK_PARAMETERS
usStackHighWaterMark	Source/include/task.h	/^	uint16_t usStackHighWaterMark;	\/* The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. *\/$/;"	m	struct:xTASK_STATUS
usTaskCheck	Demo/Common/Full/flop.c	/^static volatile unsigned short usTaskCheck[ mathNUMBER_OF_TASKS ] = { ( unsigned short ) 0 };$/;"	v	file:
usTaskCheck	Demo/Common/Full/integer.c	/^static volatile unsigned short usTaskCheck[ intgNUMBER_OF_TASKS ] = { ( unsigned short ) 0 };$/;"	v	file:
usTaskCheck	Demo/Common/Minimal/flop.c	/^static volatile uint16_t usTaskCheck[ mathNUMBER_OF_TASKS ] = { ( uint16_t ) 0 };$/;"	v	file:
usTaskCheck	Demo/Common/Minimal/sp_flop.c	/^static volatile uint16_t usTaskCheck[ mathNUMBER_OF_TASKS ] = { ( uint16_t ) 0 };$/;"	v	file:
uxAutoReload	Source/timers.c	/^	UBaseType_t				uxAutoReload;		\/*<< Set to pdTRUE if the timer should be automatically restarted once expired.  Set to pdFALSE if the timer is, in effect, a one-shot timer. *\/$/;"	m	struct:tmrTimerControl	file:
uxBaseLED	Demo/Common/Minimal/comtest.c	/^static UBaseType_t uxBaseLED = 0;$/;"	v	file:
uxBaseLED	Demo/Common/Minimal/comtest_strings.c	/^static UBaseType_t uxBaseLED = 0;$/;"	v	file:
uxBasePriority	Source/include/task.h	/^	UBaseType_t uxBasePriority;		\/* The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. *\/$/;"	m	struct:xTASK_STATUS
uxBasePriority	Source/tasks.c	/^		UBaseType_t		uxBasePriority;		\/*< The priority last assigned to the task - used by the priority inheritance mechanism. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxBlockingCycles	Demo/Common/Minimal/recmutex.c	/^static volatile UBaseType_t uxControllingCycles = 0, uxBlockingCycles = 0, uxPollingCycles = 0;$/;"	v	file:
uxCallCounter	Demo/Common/Minimal/crhook.c	/^static UBaseType_t uxCallCounter = 0, uxNumberToPost = 0;$/;"	v	file:
uxControllingCycles	Demo/Common/Minimal/recmutex.c	/^static volatile UBaseType_t uxControllingCycles = 0, uxBlockingCycles = 0, uxPollingCycles = 0;$/;"	v	file:
uxCreatorTaskStackBuffer	Demo/Common/Minimal/StaticAllocation.c	/^static StackType_t uxCreatorTaskStackBuffer[ staticCREATOR_TASK_STACK_SIZE ];$/;"	v	file:
uxCriticalNesting	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^UBaseType_t uxCriticalNesting = 0xef;$/;"	v
uxCriticalNesting	Source/tasks.c	/^		UBaseType_t		uxCriticalNesting;	\/*< Holds the critical section nesting depth for ports that do not maintain their own count in the port layer. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxCurrentNumberOfTasks	Source/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;$/;"	v	file:
uxCurrentPriority	Source/include/task.h	/^	UBaseType_t uxCurrentPriority;	\/* The priority at which the task was running (may be inherited) when the structure was populated. *\/$/;"	m	struct:xTASK_STATUS
uxCycleCounter	Demo/Common/Minimal/StaticAllocation.c	/^static volatile UBaseType_t uxCycleCounter = 0;$/;"	v	file:
uxDeletedTasksWaitingCleanUp	Source/tasks.c	/^	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;$/;"	v	file:
uxDummy1	Source/include/FreeRTOS.h	/^	UBaseType_t uxDummy1;$/;"	m	struct:xSTATIC_LIST
uxDummy10	Source/include/FreeRTOS.h	/^		UBaseType_t		uxDummy10[ 2 ];$/;"	m	struct:xSTATIC_TCB
uxDummy12	Source/include/FreeRTOS.h	/^		UBaseType_t		uxDummy12[ 2 ];$/;"	m	struct:xSTATIC_TCB
uxDummy2	Source/include/FreeRTOS.h	/^		UBaseType_t uxDummy2;$/;"	m	union:xSTATIC_QUEUE::__anon6
uxDummy20	Source/include/FreeRTOS.h	/^		uint8_t			uxDummy20;$/;"	m	struct:xSTATIC_TCB
uxDummy3	Source/include/FreeRTOS.h	/^		UBaseType_t uxDummy3;$/;"	m	struct:xSTATIC_EVENT_GROUP
uxDummy4	Source/include/FreeRTOS.h	/^	UBaseType_t			uxDummy4;$/;"	m	struct:xSTATIC_TIMER
uxDummy4	Source/include/FreeRTOS.h	/^	UBaseType_t uxDummy4[ 3 ];$/;"	m	struct:xSTATIC_QUEUE
uxDummy5	Source/include/FreeRTOS.h	/^	UBaseType_t			uxDummy5;$/;"	m	struct:xSTATIC_TCB
uxDummy6	Source/include/FreeRTOS.h	/^		UBaseType_t		uxDummy6;$/;"	m	struct:xSTATIC_TIMER
uxDummy8	Source/include/FreeRTOS.h	/^		UBaseType_t uxDummy8;$/;"	m	struct:xSTATIC_QUEUE
uxDummy9	Source/include/FreeRTOS.h	/^		UBaseType_t		uxDummy9;$/;"	m	struct:xSTATIC_TCB
uxEventBits	Source/event_groups.c	/^	EventBits_t uxEventBits;$/;"	m	struct:xEventGroupDefinition	file:
uxEventGroupGetNumber	Source/event_groups.c	/^	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )$/;"	f
uxEventGroupNumber	Source/event_groups.c	/^		UBaseType_t uxEventGroupNumber;$/;"	m	struct:xEventGroupDefinition	file:
uxExpectedStartCount	Demo/Common/Minimal/countsem.c	/^	UBaseType_t uxExpectedStartCount;$/;"	m	struct:COUNT_SEM_STRUCT	file:
uxFlashTaskNumber	Demo/Common/Minimal/flash.c	/^static volatile UBaseType_t uxFlashTaskNumber = 0;$/;"	v	file:
uxHighPriorityLoops1	Demo/Common/Minimal/IntQueue.c	/^static volatile UBaseType_t uxHighPriorityLoops1 = 0, uxHighPriorityLoops2 = 0, uxLowPriorityLoops1 = 0, uxLowPriorityLoops2 = 0;$/;"	v	file:
uxHighPriorityLoops2	Demo/Common/Minimal/IntQueue.c	/^static volatile UBaseType_t uxHighPriorityLoops1 = 0, uxHighPriorityLoops2 = 0, uxLowPriorityLoops1 = 0, uxLowPriorityLoops2 = 0;$/;"	v	file:
uxIndex	Source/include/croutine.h	/^	UBaseType_t 		uxIndex;			\/*< Used to distinguish between co-routines when multiple co-routines use the same co-routine function. *\/$/;"	m	struct:corCoRoutineControlBlock
uxItemSize	Source/queue.c	/^	UBaseType_t uxItemSize;			\/*< The size of each items that the queue will hold. *\/$/;"	m	struct:QueueDefinition	file:
uxLED	Demo/Common/Full/flash.c	/^	unsigned portBASE_TYPE uxLED;		\/*< The output the task should use. *\/$/;"	m	struct:LED_PARAMETERS	file:
uxLength	Source/queue.c	/^	UBaseType_t uxLength;			\/*< The length of the queue defined as the number of items it will hold, not the number of bytes. *\/$/;"	m	struct:QueueDefinition	file:
uxListRemove	Source/list.c	/^UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )$/;"	f
uxLoopCounter	Demo/Common/Minimal/countsem.c	/^	UBaseType_t uxLoopCounter;$/;"	m	struct:COUNT_SEM_STRUCT	file:
uxLowPriorityLoops1	Demo/Common/Minimal/IntQueue.c	/^static volatile UBaseType_t uxHighPriorityLoops1 = 0, uxHighPriorityLoops2 = 0, uxLowPriorityLoops1 = 0, uxLowPriorityLoops2 = 0;$/;"	v	file:
uxLowPriorityLoops2	Demo/Common/Minimal/IntQueue.c	/^static volatile UBaseType_t uxHighPriorityLoops1 = 0, uxHighPriorityLoops2 = 0, uxLowPriorityLoops1 = 0, uxLowPriorityLoops2 = 0;$/;"	v	file:
uxMaxNumberOfExtraTasksRunning	Demo/Common/Full/death.c	/^static const unsigned portBASE_TYPE uxMaxNumberOfExtraTasksRunning = 5;$/;"	v	file:
uxMaxNumberOfExtraTasksRunning	Demo/Common/Minimal/death.c	/^static const UBaseType_t uxMaxNumberOfExtraTasksRunning = 3;$/;"	v	file:
uxMessagesWaiting	Source/queue.c	/^	volatile UBaseType_t uxMessagesWaiting;\/*< The number of items currently in the queue. *\/$/;"	m	struct:QueueDefinition	file:
uxMutexesHeld	Source/tasks.c	/^		UBaseType_t		uxMutexesHeld;$/;"	m	struct:tskTaskControlBlock	file:
uxNextRand	Demo/Common/Minimal/QueueSet.c	/^static size_t uxNextRand = 0;$/;"	v	file:
uxNextRand	Demo/Common/Minimal/TaskNotify.c	/^static size_t uxNextRand = 0;$/;"	v	file:
uxNumberOfItems	Source/include/list.h	/^	configLIST_VOLATILE UBaseType_t uxNumberOfItems;$/;"	m	struct:xLIST
uxNumberToPost	Demo/Common/Minimal/crhook.c	/^static UBaseType_t uxCallCounter = 0, uxNumberToPost = 0;$/;"	v	file:
uxPendedTicks	Source/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;$/;"	v	file:
uxPollingCycles	Demo/Common/Minimal/recmutex.c	/^static volatile UBaseType_t uxControllingCycles = 0, uxBlockingCycles = 0, uxPollingCycles = 0;$/;"	v	file:
uxPriority	Source/include/croutine.h	/^	UBaseType_t 		uxPriority;			\/*< The priority of the co-routine in relation to other co-routines. *\/$/;"	m	struct:corCoRoutineControlBlock
uxPriority	Source/include/task.h	/^	UBaseType_t uxPriority;$/;"	m	struct:xTASK_PARAMETERS
uxPriority	Source/tasks.c	/^	UBaseType_t			uxPriority;			\/*< The priority of the task.  0 is the lowest priority. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxQueueGetQueueNumber	Source/queue.c	/^	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )$/;"	f
uxQueueMessagesWaiting	Source/include/mpu_wrappers.h	134;"	d
uxQueueMessagesWaiting	Source/queue.c	/^UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )$/;"	f
uxQueueMessagesWaitingFromISR	Source/queue.c	/^UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )$/;"	f
uxQueueNumber	Source/queue.c	/^		UBaseType_t uxQueueNumber;$/;"	m	struct:QueueDefinition	file:
uxQueueSpacesAvailable	Source/include/mpu_wrappers.h	135;"	d
uxQueueSpacesAvailable	Source/queue.c	/^UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )$/;"	f
uxQueueType	Source/queue.c	109;"	d	file:
uxRecursiveCallCount	Source/queue.c	/^		UBaseType_t uxRecursiveCallCount;\/*< Maintains a count of the number of times a recursive mutex has been recursively 'taken' when the structure is used as a mutex. *\/$/;"	m	union:QueueDefinition::__anon1	file:
uxRxLoops	Demo/Common/Minimal/comtest.c	/^static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;$/;"	v	file:
uxRxLoops	Demo/Common/Minimal/comtest_strings.c	/^static volatile UBaseType_t uxRxLoops = 0UL;$/;"	v	file:
uxSchedulerSuspended	Source/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;$/;"	v	file:
uxSemaphoreGetCount	Source/include/semphr.h	1167;"	d
uxState	Source/include/croutine.h	/^	uint16_t 			uxState;			\/*< Used internally by the co-routine implementation. *\/$/;"	m	struct:corCoRoutineControlBlock
uxTCBNumber	Source/tasks.c	/^		UBaseType_t		uxTCBNumber;		\/*< Stores a number that increments each time a TCB is created.  It allows debuggers to determine when a task has been deleted and then recreated. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxTaskGetNumberOfTasks	Source/include/mpu_wrappers.h	108;"	d
uxTaskGetNumberOfTasks	Source/tasks.c	/^UBaseType_t uxTaskGetNumberOfTasks( void )$/;"	f
uxTaskGetStackHighWaterMark	Source/include/mpu_wrappers.h	111;"	d
uxTaskGetStackHighWaterMark	Source/tasks.c	/^	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )$/;"	f
uxTaskGetSystemState	Source/include/mpu_wrappers.h	118;"	d
uxTaskGetSystemState	Source/tasks.c	/^	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )$/;"	f
uxTaskGetTaskNumber	Source/tasks.c	/^	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )$/;"	f
uxTaskNumber	Source/tasks.c	/^		UBaseType_t		uxTaskNumber;		\/*< Stores a number specifically for use by third party trace code. *\/$/;"	m	struct:tskTaskControlBlock	file:
uxTaskNumber	Source/tasks.c	/^PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;$/;"	v	file:
uxTaskPriorityGet	Source/include/mpu_wrappers.h	99;"	d
uxTaskPriorityGet	Source/tasks.c	/^	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )$/;"	f
uxTaskPriorityGetFromISR	Source/tasks.c	/^	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )$/;"	f
uxTaskResetEventItemValue	Source/tasks.c	/^TickType_t uxTaskResetEventItemValue( void )$/;"	f
uxTasksRunningAtStart	Demo/Common/Full/death.c	/^static volatile unsigned portBASE_TYPE uxTasksRunningAtStart = 0;$/;"	v	file:
uxTasksRunningAtStart	Demo/Common/Minimal/death.c	/^static volatile UBaseType_t uxTasksRunningAtStart = 0;$/;"	v	file:
uxTimerNumber	Source/timers.c	/^		UBaseType_t			uxTimerNumber;		\/*<< An ID assigned by trace tools such as FreeRTOS+Trace *\/$/;"	m	struct:tmrTimerControl	file:
uxTopCoRoutineReadyPriority	Source/croutine.c	/^static UBaseType_t uxTopCoRoutineReadyPriority = 0;$/;"	v	file:
uxTopReadyPriority	Source/tasks.c	/^PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;$/;"	v	file:
uxValueForNormallyEmptyQueue	Demo/Common/Minimal/IntQueue.c	/^static volatile UBaseType_t uxValueForNormallyEmptyQueue = 0, uxValueForNormallyFullQueue = 0;$/;"	v	file:
uxValueForNormallyFullQueue	Demo/Common/Minimal/IntQueue.c	/^static volatile UBaseType_t uxValueForNormallyEmptyQueue = 0, uxValueForNormallyFullQueue = 0;$/;"	v	file:
vAltStartComTestTasks	Demo/Common/Minimal/comtest.c	/^void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )$/;"	f
vApplicationIdleHook	Demo/dsPIC33E_MPLAB/main.c	/^void vApplicationIdleHook( void )$/;"	f
vApplicationSetupTickTimerInterrupt	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^__attribute__(( weak )) void vApplicationSetupTickTimerInterrupt( void )$/;"	f
vApplicationTickHook	Demo/Common/Minimal/crhook.c	/^void vApplicationTickHook( void )$/;"	f
vBlockingQueueConsumer	Demo/Common/Full/BlockQ.c	/^static void vBlockingQueueConsumer( void *pvParameters )$/;"	f	file:
vBlockingQueueProducer	Demo/Common/Full/BlockQ.c	/^static void vBlockingQueueProducer( void *pvParameters )$/;"	f	file:
vCheckTask	Demo/dsPIC33E_MPLAB/main.c	/^static void vCheckTask( void *pvParameters )$/;"	f	file:
vCoRoutineAddToDelayedList	Source/croutine.c	/^void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )$/;"	f
vCoRoutineSchedule	Source/croutine.c	/^void vCoRoutineSchedule( void )$/;"	f
vComRxTask	Demo/Common/Full/comtest.c	/^static void vComRxTask( void *pvParameters )$/;"	f	file:
vComRxTask	Demo/Common/Minimal/comtest_strings.c	/^static void vComRxTask( void *pvParameters )$/;"	f	file:
vComTestUnsuspendTask	Demo/Common/Full/comtest.c	/^void vComTestUnsuspendTask( void )$/;"	f
vComTxTask	Demo/Common/Full/comtest.c	/^static void vComTxTask( void *pvParameters )$/;"	f	file:
vCompeteingIntMathTask1	Demo/Common/Full/integer.c	/^static void vCompeteingIntMathTask1( void *pvParameters )$/;"	f	file:
vCompeteingIntMathTask2	Demo/Common/Full/integer.c	/^static void vCompeteingIntMathTask2( void *pvParameters )$/;"	f	file:
vCompeteingIntMathTask3	Demo/Common/Full/integer.c	/^static void vCompeteingIntMathTask3( void *pvParameters )$/;"	f	file:
vCompeteingIntMathTask4	Demo/Common/Full/integer.c	/^static void vCompeteingIntMathTask4( void *pvParameters )$/;"	f	file:
vCompetingMathTask1	Demo/Common/Full/flop.c	/^static void vCompetingMathTask1( void *pvParameters )$/;"	f	file:
vCompetingMathTask2	Demo/Common/Full/flop.c	/^static void vCompetingMathTask2( void *pvParameters )$/;"	f	file:
vCompetingMathTask3	Demo/Common/Full/flop.c	/^static void vCompetingMathTask3( void *pvParameters )$/;"	f	file:
vCompetingMathTask4	Demo/Common/Full/flop.c	/^static void vCompetingMathTask4( void *pvParameters )$/;"	f	file:
vContinuousIncrementTask	Demo/Common/Full/dynamic.c	/^static void vContinuousIncrementTask( void * pvParameters )$/;"	f	file:
vCounterControlTask	Demo/Common/Full/dynamic.c	/^static void vCounterControlTask( void * pvParameters )$/;"	f	file:
vCreateAbortDelayTasks	Demo/Common/Minimal/AbortDelay.c	/^void vCreateAbortDelayTasks( void )$/;"	f
vCreateBlockTimeTasks	Demo/Common/Minimal/blocktim.c	/^void vCreateBlockTimeTasks( void )$/;"	f
vCreateSuicidalTasks	Demo/Common/Full/death.c	/^void vCreateSuicidalTasks( unsigned portBASE_TYPE uxPriority )$/;"	f
vCreateSuicidalTasks	Demo/Common/Minimal/death.c	/^void vCreateSuicidalTasks( UBaseType_t uxPriority )$/;"	f
vCreateTasks	Demo/Common/Full/death.c	/^static void vCreateTasks( void *pvParameters )$/;"	f	file:
vEventGroupClearBitsCallback	Source/event_groups.c	/^void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )$/;"	f
vEventGroupDelete	Source/event_groups.c	/^void vEventGroupDelete( EventGroupHandle_t xEventGroup )$/;"	f
vEventGroupDelete	Source/include/mpu_wrappers.h	178;"	d
vEventGroupSetBitsCallback	Source/event_groups.c	/^void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )$/;"	f
vInterruptCountingSemaphoreTask	Demo/Common/Minimal/IntSemTest.c	/^static void vInterruptCountingSemaphoreTask( void *pvParameters )$/;"	f	file:
vInterruptMutexMasterTask	Demo/Common/Minimal/IntSemTest.c	/^static void vInterruptMutexMasterTask( void *pvParameters )$/;"	f	file:
vInterruptMutexSlaveTask	Demo/Common/Minimal/IntSemTest.c	/^static void vInterruptMutexSlaveTask( void *pvParameters )$/;"	f	file:
vInterruptSemaphorePeriodicTest	Demo/Common/Minimal/IntSemTest.c	/^void vInterruptSemaphorePeriodicTest( void )$/;"	f
vLEDFlashTask	Demo/Common/Full/flash.c	/^static void vLEDFlashTask( void *pvParameters )$/;"	f	file:
vLimitedIncrementTask	Demo/Common/Full/dynamic.c	/^static void vLimitedIncrementTask( void * pvParameters )$/;"	f	file:
vListInitialise	Source/list.c	/^void vListInitialise( List_t * const pxList )$/;"	f
vListInitialiseItem	Source/list.c	/^void vListInitialiseItem( ListItem_t * const pxItem )$/;"	f
vListInsert	Source/list.c	/^void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )$/;"	f
vListInsertEnd	Source/list.c	/^void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )$/;"	f
vPeriodicEventGroupsProcessing	Demo/Common/Minimal/EventGroupsDemo.c	/^void vPeriodicEventGroupsProcessing( void )$/;"	f
vPolledQueueConsumer	Demo/Common/Full/PollQ.c	/^static void vPolledQueueConsumer( void *pvParameters )$/;"	f	file:
vPolledQueueProducer	Demo/Common/Full/PollQ.c	/^static void vPolledQueueProducer( void *pvParameters )$/;"	f	file:
vPortDefineHeapRegions	Source/portable/MemMang/heap_5.c	/^void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )$/;"	f
vPortEndScheduler	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^void vPortEndScheduler( void )$/;"	f
vPortEnterCritical	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^void vPortEnterCritical( void )$/;"	f
vPortExitCritical	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^void vPortExitCritical( void )$/;"	f
vPortFree	Source/portable/MemMang/heap_1.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	Source/portable/MemMang/heap_2.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	Source/portable/MemMang/heap_3.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	Source/portable/MemMang/heap_4.c	/^void vPortFree( void *pv )$/;"	f
vPortFree	Source/portable/MemMang/heap_5.c	/^void vPortFree( void *pv )$/;"	f
vPortInitialiseBlocks	Source/portable/MemMang/heap_1.c	/^void vPortInitialiseBlocks( void )$/;"	f
vPortInitialiseBlocks	Source/portable/MemMang/heap_2.c	/^void vPortInitialiseBlocks( void )$/;"	f
vPortInitialiseBlocks	Source/portable/MemMang/heap_4.c	/^void vPortInitialiseBlocks( void )$/;"	f
vPrimaryBlockTimeTestTask	Demo/Common/Minimal/blocktim.c	/^static void vPrimaryBlockTimeTestTask( void *pvParameters )$/;"	f	file:
vPrintDisplayMessage	Demo/Common/Full/print.c	/^void vPrintDisplayMessage( const char * const * ppcMessageToSend )$/;"	f
vPrintInitialise	Demo/Common/Full/print.c	/^void vPrintInitialise( void )$/;"	f
vQueueAddToRegistry	Source/include/FreeRTOS.h	324;"	d
vQueueAddToRegistry	Source/include/mpu_wrappers.h	153;"	d
vQueueAddToRegistry	Source/queue.c	/^	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
vQueueDelete	Source/include/mpu_wrappers.h	136;"	d
vQueueDelete	Source/queue.c	/^void vQueueDelete( QueueHandle_t xQueue )$/;"	f
vQueueOverwritePeriodicISRDemo	Demo/Common/Minimal/QueueOverwrite.c	/^void vQueueOverwritePeriodicISRDemo( void )$/;"	f
vQueueReceiveWhenSuspendedTask	Demo/Common/Full/dynamic.c	/^static void vQueueReceiveWhenSuspendedTask( void *pvParameters )$/;"	f	file:
vQueueSendWhenSuspendedTask	Demo/Common/Full/dynamic.c	/^static void vQueueSendWhenSuspendedTask( void *pvParameters )$/;"	f	file:
vQueueSetAccessQueueSetFromISR	Demo/Common/Minimal/QueueSet.c	/^void vQueueSetAccessQueueSetFromISR( void )$/;"	f
vQueueSetPollingInterruptAccess	Demo/Common/Minimal/QueueSetPolling.c	/^void vQueueSetPollingInterruptAccess( void )$/;"	f
vQueueSetQueueNumber	Source/queue.c	/^	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )$/;"	f
vQueueUnregisterQueue	Source/include/FreeRTOS.h	325;"	d
vQueueUnregisterQueue	Source/include/mpu_wrappers.h	154;"	d
vQueueUnregisterQueue	Source/queue.c	/^	void vQueueUnregisterQueue( QueueHandle_t xQueue )$/;"	f
vQueueWaitForMessageRestricted	Source/queue.c	/^	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )$/;"	f
vSecondaryBlockTimeTestTask	Demo/Common/Minimal/blocktim.c	/^static void vSecondaryBlockTimeTestTask( void *pvParameters )$/;"	f	file:
vSemTestTask	Demo/Common/Full/comtest.c	/^static void vSemTestTask( void * pvParameters )$/;"	f	file:
vSemaphoreCreateBinary	Source/include/semphr.h	136;"	d
vSemaphoreDelete	Source/include/semphr.h	1140;"	d
vSerialClose	Demo/dsPIC33E_MPLAB/serial/serial.c	/^void vSerialClose( xComPortHandle xPort )$/;"	f
vSetupTimerTest	Demo/dsPIC33E_MPLAB/timertest.c	/^void vSetupTimerTest( unsigned short usFrequencyHz )$/;"	f
vStartBlockingQueueTasks	Demo/Common/Full/BlockQ.c	/^void vStartBlockingQueueTasks( unsigned portBASE_TYPE uxPriority )$/;"	f
vStartBlockingQueueTasks	Demo/Common/Minimal/BlockQ.c	/^void vStartBlockingQueueTasks( UBaseType_t uxPriority )$/;"	f
vStartComTestStringsTasks	Demo/Common/Minimal/comtest_strings.c	/^void vStartComTestStringsTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )$/;"	f
vStartComTestTasks	Demo/Common/Full/comtest.c	/^void vStartComTestTasks( unsigned portBASE_TYPE uxPriority, eCOMPort ePort, eBaud eBaudRate )$/;"	f
vStartCountingSemaphoreTasks	Demo/Common/Minimal/countsem.c	/^void vStartCountingSemaphoreTasks( void )$/;"	f
vStartDynamicPriorityTasks	Demo/Common/Full/dynamic.c	/^void vStartDynamicPriorityTasks( void )$/;"	f
vStartDynamicPriorityTasks	Demo/Common/Minimal/dynamic.c	/^void vStartDynamicPriorityTasks( void )$/;"	f
vStartEventGroupTasks	Demo/Common/Minimal/EventGroupsDemo.c	/^void vStartEventGroupTasks( void )$/;"	f
vStartFlashCoRoutines	Demo/Common/Minimal/crflash.c	/^void vStartFlashCoRoutines( UBaseType_t uxNumberToCreate )$/;"	f
vStartGenericQueueTasks	Demo/Common/Minimal/GenQTest.c	/^void vStartGenericQueueTasks( UBaseType_t uxPriority )$/;"	f
vStartHookCoRoutines	Demo/Common/Minimal/crhook.c	/^void vStartHookCoRoutines( void )$/;"	f
vStartIntegerMathTasks	Demo/Common/Full/integer.c	/^void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )$/;"	f
vStartIntegerMathTasks	Demo/Common/Minimal/integer.c	/^void vStartIntegerMathTasks( UBaseType_t uxPriority )$/;"	f
vStartInterruptQueueTasks	Demo/Common/Minimal/IntQueue.c	/^void vStartInterruptQueueTasks( void )$/;"	f
vStartInterruptSemaphoreTasks	Demo/Common/Minimal/IntSemTest.c	/^void vStartInterruptSemaphoreTasks( void )$/;"	f
vStartLEDFlashTasks	Demo/Common/Full/flash.c	/^void vStartLEDFlashTasks( unsigned portBASE_TYPE uxPriority )$/;"	f
vStartLEDFlashTasks	Demo/Common/Minimal/flash.c	/^void vStartLEDFlashTasks( UBaseType_t uxPriority )$/;"	f
vStartLEDFlashTimers	Demo/Common/Minimal/flash_timer.c	/^void vStartLEDFlashTimers( UBaseType_t uxNumberOfLEDs )$/;"	f
vStartMathTasks	Demo/Common/Full/flop.c	/^void vStartMathTasks( unsigned portBASE_TYPE uxPriority )$/;"	f
vStartMathTasks	Demo/Common/Minimal/flop.c	/^void vStartMathTasks( UBaseType_t uxPriority )$/;"	f
vStartMathTasks	Demo/Common/Minimal/sp_flop.c	/^void vStartMathTasks( UBaseType_t uxPriority )$/;"	f
vStartMultiEventTasks	Demo/Common/Full/events.c	/^void vStartMultiEventTasks( void )$/;"	f
vStartPolledQueueTasks	Demo/Common/Full/PollQ.c	/^void vStartPolledQueueTasks( unsigned portBASE_TYPE uxPriority )$/;"	f
vStartPolledQueueTasks	Demo/Common/Minimal/PollQ.c	/^void vStartPolledQueueTasks( UBaseType_t uxPriority )$/;"	f
vStartQueueOverwriteTask	Demo/Common/Minimal/QueueOverwrite.c	/^void vStartQueueOverwriteTask( UBaseType_t uxPriority )$/;"	f
vStartQueuePeekTasks	Demo/Common/Minimal/QPeek.c	/^void vStartQueuePeekTasks( void )$/;"	f
vStartQueueSetPollingTask	Demo/Common/Minimal/QueueSetPolling.c	/^void vStartQueueSetPollingTask( void )$/;"	f
vStartQueueSetTasks	Demo/Common/Minimal/QueueSet.c	/^void vStartQueueSetTasks( void )$/;"	f
vStartRecursiveMutexTasks	Demo/Common/Minimal/recmutex.c	/^void vStartRecursiveMutexTasks( void )$/;"	f
vStartSemaphoreTasks	Demo/Common/Full/semtest.c	/^void vStartSemaphoreTasks( unsigned portBASE_TYPE uxPriority )$/;"	f
vStartSemaphoreTasks	Demo/Common/Minimal/semtest.c	/^void vStartSemaphoreTasks( UBaseType_t uxPriority )$/;"	f
vStartStaticallyAllocatedTasks	Demo/Common/Minimal/StaticAllocation.c	/^void vStartStaticallyAllocatedTasks( void  )$/;"	f
vStartTaskNotifyTask	Demo/Common/Minimal/TaskNotify.c	/^void vStartTaskNotifyTask( void  )$/;"	f
vStartTimerDemoTask	Demo/Common/Minimal/TimerDemo.c	/^void vStartTimerDemoTask( TickType_t xBasePeriodIn )$/;"	f
vSuicidalTask	Demo/Common/Full/death.c	/^static void vSuicidalTask( void *pvParameters )$/;"	f	file:
vTaskAllocateMPURegions	Source/include/mpu_wrappers.h	94;"	d
vTaskAllocateMPURegions	Source/tasks.c	/^	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )$/;"	f
vTaskDelay	Source/include/mpu_wrappers.h	96;"	d
vTaskDelay	Source/tasks.c	/^	void vTaskDelay( const TickType_t xTicksToDelay )$/;"	f
vTaskDelayUntil	Source/include/mpu_wrappers.h	97;"	d
vTaskDelayUntil	Source/tasks.c	/^	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )$/;"	f
vTaskDelete	Source/include/mpu_wrappers.h	95;"	d
vTaskDelete	Source/tasks.c	/^	void vTaskDelete( TaskHandle_t xTaskToDelete )$/;"	f
vTaskEndScheduler	Source/tasks.c	/^void vTaskEndScheduler( void )$/;"	f
vTaskEnterCritical	Source/tasks.c	/^	void vTaskEnterCritical( void )$/;"	f
vTaskExitCritical	Source/tasks.c	/^	void vTaskExitCritical( void )$/;"	f
vTaskGetInfo	Source/include/mpu_wrappers.h	101;"	d
vTaskGetInfo	Source/tasks.c	/^	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )$/;"	f
vTaskGetRunTimeStats	Source/include/mpu_wrappers.h	120;"	d
vTaskGetRunTimeStats	Source/tasks.c	/^	void vTaskGetRunTimeStats( char *pcWriteBuffer )$/;"	f
vTaskGetTaskInfo	Source/include/FreeRTOS.h	842;"	d
vTaskList	Source/include/mpu_wrappers.h	119;"	d
vTaskList	Source/tasks.c	/^	void vTaskList( char * pcWriteBuffer )$/;"	f
vTaskMissedYield	Source/tasks.c	/^void vTaskMissedYield( void )$/;"	f
vTaskNotifyGiveFromISR	Source/tasks.c	/^	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
vTaskPlaceOnEventList	Source/tasks.c	/^void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )$/;"	f
vTaskPlaceOnEventListRestricted	Source/tasks.c	/^	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )$/;"	f
vTaskPlaceOnUnorderedEventList	Source/tasks.c	/^void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )$/;"	f
vTaskPriorityInherit	Source/tasks.c	/^	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )$/;"	f
vTaskPrioritySet	Source/include/mpu_wrappers.h	102;"	d
vTaskPrioritySet	Source/tasks.c	/^	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )$/;"	f
vTaskResume	Source/include/mpu_wrappers.h	104;"	d
vTaskResume	Source/tasks.c	/^	void vTaskResume( TaskHandle_t xTaskToResume )$/;"	f
vTaskSetApplicationTaskTag	Source/include/mpu_wrappers.h	112;"	d
vTaskSetApplicationTaskTag	Source/tasks.c	/^	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )$/;"	f
vTaskSetTaskNumber	Source/tasks.c	/^	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )$/;"	f
vTaskSetThreadLocalStoragePointer	Source/include/mpu_wrappers.h	114;"	d
vTaskSetThreadLocalStoragePointer	Source/tasks.c	/^	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )$/;"	f
vTaskSetTimeOutState	Source/include/mpu_wrappers.h	127;"	d
vTaskSetTimeOutState	Source/tasks.c	/^void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )$/;"	f
vTaskStartScheduler	Source/tasks.c	/^void vTaskStartScheduler( void )$/;"	f
vTaskStepTick	Source/tasks.c	/^	void vTaskStepTick( const TickType_t xTicksToJump )$/;"	f
vTaskSuspend	Source/include/mpu_wrappers.h	103;"	d
vTaskSuspend	Source/tasks.c	/^	void vTaskSuspend( TaskHandle_t xTaskToSuspend )$/;"	f
vTaskSuspendAll	Source/include/mpu_wrappers.h	105;"	d
vTaskSuspendAll	Source/tasks.c	/^void vTaskSuspendAll( void )$/;"	f
vTaskSwitchContext	Source/tasks.c	/^void vTaskSwitchContext( void )$/;"	f
vTimerPeriodicISRTests	Demo/Common/Minimal/TimerDemo.c	/^void vTimerPeriodicISRTests( void )$/;"	f
vTimerSetTimerID	Source/include/mpu_wrappers.h	162;"	d
vTimerSetTimerID	Source/timers.c	/^void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )$/;"	f
xActiveTimerList1	Source/timers.c	/^PRIVILEGED_DATA static List_t xActiveTimerList1;$/;"	v	file:
xActiveTimerList2	Source/timers.c	/^PRIVILEGED_DATA static List_t xActiveTimerList2;$/;"	v	file:
xAllowableMargin	Demo/Common/Minimal/AbortDelay.c	/^const TickType_t xAllowableMargin = pdMS_TO_TICKS( 7 );$/;"	v
xAreAbortDelayTestTasksStillRunning	Demo/Common/Minimal/AbortDelay.c	/^BaseType_t xAreAbortDelayTestTasksStillRunning( void )$/;"	f
xAreBlockTimeTestTasksStillRunning	Demo/Common/Minimal/blocktim.c	/^BaseType_t xAreBlockTimeTestTasksStillRunning( void )$/;"	f
xAreBlockingQueuesStillRunning	Demo/Common/Full/BlockQ.c	/^portBASE_TYPE xAreBlockingQueuesStillRunning( void )$/;"	f
xAreBlockingQueuesStillRunning	Demo/Common/Minimal/BlockQ.c	/^BaseType_t xAreBlockingQueuesStillRunning( void )$/;"	f
xAreComTestTasksStillRunning	Demo/Common/Full/comtest.c	/^portBASE_TYPE xAreComTestTasksStillRunning( void )$/;"	f
xAreComTestTasksStillRunning	Demo/Common/Minimal/comtest.c	/^BaseType_t xAreComTestTasksStillRunning( void )$/;"	f
xAreComTestTasksStillRunning	Demo/Common/Minimal/comtest_strings.c	/^BaseType_t xAreComTestTasksStillRunning( void )$/;"	f
xAreCountingSemaphoreTasksStillRunning	Demo/Common/Minimal/countsem.c	/^BaseType_t xAreCountingSemaphoreTasksStillRunning( void )$/;"	f
xAreDynamicPriorityTasksStillRunning	Demo/Common/Full/dynamic.c	/^portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )$/;"	f
xAreDynamicPriorityTasksStillRunning	Demo/Common/Minimal/dynamic.c	/^BaseType_t xAreDynamicPriorityTasksStillRunning( void )$/;"	f
xAreEventGroupTasksStillRunning	Demo/Common/Minimal/EventGroupsDemo.c	/^BaseType_t xAreEventGroupTasksStillRunning( void )$/;"	f
xAreFlashCoRoutinesStillRunning	Demo/Common/Minimal/crflash.c	/^BaseType_t xAreFlashCoRoutinesStillRunning( void )$/;"	f
xAreGenericQueueTasksStillRunning	Demo/Common/Minimal/GenQTest.c	/^BaseType_t xAreGenericQueueTasksStillRunning( void )$/;"	f
xAreHookCoRoutinesStillRunning	Demo/Common/Minimal/crhook.c	/^BaseType_t xAreHookCoRoutinesStillRunning( void )$/;"	f
xAreIntQueueTasksStillRunning	Demo/Common/Minimal/IntQueue.c	/^BaseType_t xAreIntQueueTasksStillRunning( void )$/;"	f
xAreIntegerMathsTaskStillRunning	Demo/Common/Full/integer.c	/^portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )$/;"	f
xAreIntegerMathsTaskStillRunning	Demo/Common/Minimal/integer.c	/^BaseType_t xAreIntegerMathsTaskStillRunning( void )$/;"	f
xAreInterruptSemaphoreTasksStillRunning	Demo/Common/Minimal/IntSemTest.c	/^BaseType_t xAreInterruptSemaphoreTasksStillRunning( void )$/;"	f
xAreMathsTaskStillRunning	Demo/Common/Full/flop.c	/^portBASE_TYPE xAreMathsTaskStillRunning( void )$/;"	f
xAreMathsTaskStillRunning	Demo/Common/Minimal/flop.c	/^BaseType_t xAreMathsTaskStillRunning( void )$/;"	f
xAreMathsTaskStillRunning	Demo/Common/Minimal/sp_flop.c	/^BaseType_t xAreMathsTaskStillRunning( void )$/;"	f
xAreMultiEventTasksStillRunning	Demo/Common/Full/events.c	/^portBASE_TYPE xAreMultiEventTasksStillRunning( void )$/;"	f
xArePollingQueuesStillRunning	Demo/Common/Full/PollQ.c	/^portBASE_TYPE xArePollingQueuesStillRunning( void )$/;"	f
xArePollingQueuesStillRunning	Demo/Common/Minimal/PollQ.c	/^BaseType_t xArePollingQueuesStillRunning( void )$/;"	f
xAreQueuePeekTasksStillRunning	Demo/Common/Minimal/QPeek.c	/^BaseType_t xAreQueuePeekTasksStillRunning( void )$/;"	f
xAreQueueSetPollTasksStillRunning	Demo/Common/Minimal/QueueSetPolling.c	/^BaseType_t xAreQueueSetPollTasksStillRunning( void )$/;"	f
xAreQueueSetTasksStillRunning	Demo/Common/Minimal/QueueSet.c	/^BaseType_t xAreQueueSetTasksStillRunning( void )$/;"	f
xAreRecursiveMutexTasksStillRunning	Demo/Common/Minimal/recmutex.c	/^BaseType_t xAreRecursiveMutexTasksStillRunning( void )$/;"	f
xAreSemaphoreTasksStillRunning	Demo/Common/Full/semtest.c	/^portBASE_TYPE xAreSemaphoreTasksStillRunning( void )$/;"	f
xAreSemaphoreTasksStillRunning	Demo/Common/Minimal/semtest.c	/^BaseType_t xAreSemaphoreTasksStillRunning( void )$/;"	f
xAreStaticAllocationTasksStillRunning	Demo/Common/Minimal/StaticAllocation.c	/^BaseType_t xAreStaticAllocationTasksStillRunning( void )$/;"	f
xAreTaskNotificationTasksStillRunning	Demo/Common/Minimal/TaskNotify.c	/^BaseType_t xAreTaskNotificationTasksStillRunning( void )$/;"	f
xAreTimerDemoTasksStillRunning	Demo/Common/Minimal/TimerDemo.c	/^BaseType_t xAreTimerDemoTasksStillRunning( TickType_t xCycleFrequency )$/;"	f
xAutoReloadTimers	Demo/Common/Minimal/TimerDemo.c	/^static TimerHandle_t xAutoReloadTimers[ configTIMER_QUEUE_LENGTH + 1 ] = { 0 };$/;"	v	file:
xBasePeriod	Demo/Common/Minimal/TimerDemo.c	/^static TickType_t xBasePeriod = 0;$/;"	v	file:
xBlockAllocatedBit	Source/portable/MemMang/heap_4.c	/^static size_t xBlockAllocatedBit = 0;$/;"	v	file:
xBlockAllocatedBit	Source/portable/MemMang/heap_5.c	/^static size_t xBlockAllocatedBit = 0;$/;"	v	file:
xBlockSize	Source/portable/MemMang/heap_2.c	/^	size_t xBlockSize;						\/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	file:
xBlockSize	Source/portable/MemMang/heap_4.c	/^	size_t xBlockSize;						\/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	file:
xBlockSize	Source/portable/MemMang/heap_5.c	/^	size_t xBlockSize;						\/*<< The size of the free block. *\/$/;"	m	struct:A_BLOCK_LINK	file:
xBlockTime	Demo/Common/Full/BlockQ.c	/^	TickType_t xBlockTime;			\/*< The block time to use on queue reads\/writes. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
xBlockTime	Demo/Common/Full/semtest.c	/^	TickType_t xBlockTime;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
xBlockTime	Demo/Common/Minimal/BlockQ.c	/^	TickType_t xBlockTime;				\/*< The block time to use on queue reads\/writes. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
xBlockTime	Demo/Common/Minimal/semtest.c	/^	TickType_t xBlockTime;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
xBlockingCycles	Demo/Common/Minimal/AbortDelay.c	/^static volatile BaseType_t xControllingCycles = 0, xBlockingCycles = 0;$/;"	v	file:
xBlockingIsSuspended	Demo/Common/Minimal/recmutex.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE, xControllingIsSuspended = pdFALSE, xBlockingIsSuspended = pdFALSE;$/;"	v	file:
xBlockingQueueParameters	Demo/Common/Full/BlockQ.c	/^} xBlockingQueueParameters;$/;"	t	typeref:struct:BLOCKING_QUEUE_PARAMETERS	file:
xBlockingQueueParameters	Demo/Common/Minimal/BlockQ.c	/^} xBlockingQueueParameters;$/;"	t	typeref:struct:BLOCKING_QUEUE_PARAMETERS	file:
xBlockingTaskHandle	Demo/Common/Minimal/recmutex.c	/^static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;$/;"	v	file:
xCallbackParameters	Source/timers.c	/^			CallbackParameters_t xCallbackParameters;$/;"	m	union:tmrTimerQueueMessage::__anon2	file:
xChangePriorityWhenSuspendedHandle	Demo/Common/Full/dynamic.c	/^static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle, xChangePriorityWhenSuspendedHandle;$/;"	v	file:
xCharsForTx	Demo/dsPIC33E_MPLAB/serial/serial.c	/^static QueueHandle_t xCharsForTx; $/;"	v	file:
xCheckVariable	Demo/Common/Full/events.c	/^static portBASE_TYPE xCheckVariable = 0;$/;"	v	file:
xCoRoutineCreate	Source/croutine.c	/^BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )$/;"	f
xCoRoutineErrorDetected	Demo/Common/Minimal/crhook.c	/^static BaseType_t xCoRoutineErrorDetected = pdFALSE;$/;"	v	file:
xCoRoutineFlashStatus	Demo/Common/Minimal/crflash.c	/^static BaseType_t xCoRoutineFlashStatus = pdPASS;$/;"	v	file:
xCoRoutineHandle	Source/include/FreeRTOS.h	836;"	d
xCoRoutineRemoveFromEventList	Source/croutine.c	/^BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )$/;"	f
xCoRoutineTickCount	Source/croutine.c	/^static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	file:
xComPortHandle	Demo/Common/include/serial.h	/^typedef void * xComPortHandle;$/;"	t
xContinuousIncrementHandle	Demo/Common/Full/dynamic.c	/^static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle, xChangePriorityWhenSuspendedHandle;$/;"	v	file:
xContinuousIncrementHandle	Demo/Common/Minimal/dynamic.c	/^static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;$/;"	v	file:
xControllingCycles	Demo/Common/Minimal/AbortDelay.c	/^static volatile BaseType_t xControllingCycles = 0, xBlockingCycles = 0;$/;"	v	file:
xControllingIsSuspended	Demo/Common/Minimal/recmutex.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE, xControllingIsSuspended = pdFALSE, xBlockingIsSuspended = pdFALSE;$/;"	v	file:
xControllingTaskHandle	Demo/Common/Minimal/recmutex.c	/^static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;$/;"	v	file:
xCountSemStruct	Demo/Common/Minimal/countsem.c	/^} xCountSemStruct;$/;"	t	typeref:struct:COUNT_SEM_STRUCT	file:
xCreatedTask	Demo/Common/Minimal/death.c	/^TaskHandle_t xCreatedTask;$/;"	v
xCreatedTask1	Demo/Common/Full/death.c	/^TaskHandle_t xCreatedTask1, xCreatedTask2;$/;"	v
xCreatedTask2	Demo/Common/Full/death.c	/^TaskHandle_t xCreatedTask1, xCreatedTask2;$/;"	v
xCreatedTasks	Demo/Common/Full/events.c	/^static TaskHandle_t xCreatedTasks[ evtNUM_TASKS ];$/;"	v	file:
xCreatorTaskTCBBuffer	Demo/Common/Minimal/StaticAllocation.c	/^static StaticTask_t xCreatorTaskTCBBuffer;$/;"	v	file:
xDelayedCoRoutineList1	Source/croutine.c	/^static List_t xDelayedCoRoutineList1;									\/*< Delayed co-routines. *\/$/;"	v	file:
xDelayedCoRoutineList2	Source/croutine.c	/^static List_t xDelayedCoRoutineList2;									\/*< Delayed co-routines (two lists are used - one for delays that have overflowed the current tick count. *\/$/;"	v	file:
xDelayedTaskList1	Source/tasks.c	/^PRIVILEGED_DATA static List_t xDelayedTaskList1;						\/*< Delayed tasks. *\/$/;"	v	file:
xDelayedTaskList2	Source/tasks.c	/^PRIVILEGED_DATA static List_t xDelayedTaskList2;						\/*< Delayed tasks (two lists are used - one for delays that have overflowed the current tick count. *\/$/;"	v	file:
xDummy1	Source/include/FreeRTOS.h	/^	TickType_t xDummy1;$/;"	m	struct:xSTATIC_EVENT_GROUP
xDummy1	Source/include/FreeRTOS.h	/^	TickType_t xDummy1;$/;"	m	struct:xSTATIC_LIST_ITEM
xDummy1	Source/include/FreeRTOS.h	/^	TickType_t xDummy1;$/;"	m	struct:xSTATIC_MINI_LIST_ITEM
xDummy17	Source/include/FreeRTOS.h	/^		struct	_reent	xDummy17;$/;"	m	struct:xSTATIC_TCB	typeref:struct:xSTATIC_TCB::_reent
xDummy2	Source/include/FreeRTOS.h	/^		xMPU_SETTINGS	xDummy2;$/;"	m	struct:xSTATIC_TCB
xDummy2	Source/include/FreeRTOS.h	/^	StaticListItem_t	xDummy2;$/;"	m	struct:xSTATIC_TIMER
xDummy2	Source/include/FreeRTOS.h	/^	StaticList_t xDummy2;$/;"	m	struct:xSTATIC_EVENT_GROUP
xDummy3	Source/include/FreeRTOS.h	/^	StaticListItem_t	xDummy3[ 2 ];$/;"	m	struct:xSTATIC_TCB
xDummy3	Source/include/FreeRTOS.h	/^	StaticList_t xDummy3[ 2 ];$/;"	m	struct:xSTATIC_QUEUE
xDummy3	Source/include/FreeRTOS.h	/^	StaticMiniListItem_t xDummy3;$/;"	m	struct:xSTATIC_LIST
xDummy3	Source/include/FreeRTOS.h	/^	TickType_t			xDummy3;$/;"	m	struct:xSTATIC_TIMER
xEnd	Source/portable/MemMang/heap_2.c	/^static BlockLink_t xStart, xEnd;$/;"	v	file:
xErrorDetected	Demo/Common/Minimal/GenQTest.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorDetected	Demo/Common/Minimal/IntSemTest.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorDetected	Demo/Common/Minimal/QPeek.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorDetected	Demo/Common/Minimal/countsem.c	/^static volatile BaseType_t xErrorDetected = pdFALSE;$/;"	v	file:
xErrorLine	Demo/Common/Minimal/IntQueue.c	/^static volatile UBaseType_t xErrorLine = ( UBaseType_t ) 0;$/;"	v	file:
xErrorOccurred	Demo/Common/Minimal/AbortDelay.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE;$/;"	v	file:
xErrorOccurred	Demo/Common/Minimal/StaticAllocation.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE;$/;"	v	file:
xErrorOccurred	Demo/Common/Minimal/blocktim.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE;$/;"	v	file:
xErrorOccurred	Demo/Common/Minimal/recmutex.c	/^static volatile BaseType_t xErrorOccurred = pdFALSE, xControllingIsSuspended = pdFALSE, xBlockingIsSuspended = pdFALSE;$/;"	v	file:
xErrorStatus	Demo/Common/Minimal/IntQueue.c	/^static BaseType_t xErrorStatus = pdPASS;$/;"	v	file:
xErrorStatus	Demo/Common/Minimal/TaskNotify.c	/^static BaseType_t xErrorStatus = pdPASS;$/;"	v	file:
xEventGroup	Demo/Common/Minimal/EventGroupsDemo.c	/^static EventGroupHandle_t xEventGroup = NULL;$/;"	v	file:
xEventGroupClearBits	Source/event_groups.c	/^EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )$/;"	f
xEventGroupClearBits	Source/include/mpu_wrappers.h	175;"	d
xEventGroupClearBitsFromISR	Source/event_groups.c	/^	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )$/;"	f
xEventGroupClearBitsFromISR	Source/include/event_groups.h	451;"	d
xEventGroupCreate	Source/event_groups.c	/^	EventGroupHandle_t xEventGroupCreate( void )$/;"	f
xEventGroupCreate	Source/include/mpu_wrappers.h	172;"	d
xEventGroupCreateStatic	Source/event_groups.c	/^	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )$/;"	f
xEventGroupCreateStatic	Source/include/mpu_wrappers.h	173;"	d
xEventGroupDefinition	Source/event_groups.c	/^typedef struct xEventGroupDefinition$/;"	s	file:
xEventGroupGetBits	Source/include/event_groups.h	749;"	d
xEventGroupGetBitsFromISR	Source/event_groups.c	/^EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )$/;"	f
xEventGroupSetBits	Source/event_groups.c	/^EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )$/;"	f
xEventGroupSetBits	Source/include/mpu_wrappers.h	176;"	d
xEventGroupSetBitsFromISR	Source/event_groups.c	/^	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
xEventGroupSetBitsFromISR	Source/include/event_groups.h	603;"	d
xEventGroupSync	Source/event_groups.c	/^EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )$/;"	f
xEventGroupSync	Source/include/mpu_wrappers.h	177;"	d
xEventGroupWaitBits	Source/event_groups.c	/^EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )$/;"	f
xEventGroupWaitBits	Source/include/mpu_wrappers.h	174;"	d
xEventListItem	Source/include/croutine.h	/^	ListItem_t			xEventListItem;		\/*< List item used to place the CRCB in event lists. *\/$/;"	m	struct:corCoRoutineControlBlock
xEventListItem	Source/tasks.c	/^	ListItem_t			xEventListItem;		\/*< Used to reference a task from an event list. *\/$/;"	m	struct:tskTaskControlBlock	file:
xExpectedTaskCounters	Demo/Common/Full/events.c	/^static portBASE_TYPE xExpectedTaskCounters[ evtNUM_TASKS ] = { 0, 0, 0, 0 };$/;"	v	file:
xFirstTimerHandler	Demo/Common/Minimal/IntQueue.c	/^BaseType_t xFirstTimerHandler( void )$/;"	f
xFlashQueue	Demo/Common/Minimal/crflash.c	/^static QueueHandle_t xFlashQueue;$/;"	v	file:
xFlashRate	Demo/Common/Full/flash.c	/^	TickType_t xFlashRate;	\/*< The rate at which the LED should flash. *\/$/;"	m	struct:LED_PARAMETERS	file:
xFreeBytesRemaining	Source/portable/MemMang/heap_2.c	/^static size_t xFreeBytesRemaining = configADJUSTED_HEAP_SIZE;$/;"	v	file:
xFreeBytesRemaining	Source/portable/MemMang/heap_4.c	/^static size_t xFreeBytesRemaining = 0U;$/;"	v	file:
xFreeBytesRemaining	Source/portable/MemMang/heap_5.c	/^static size_t xFreeBytesRemaining = 0U;$/;"	v	file:
xGenericListItem	Source/include/croutine.h	/^	ListItem_t			xGenericListItem;	\/*< List item used to place the CRCB in ready and blocked queues. *\/$/;"	m	struct:corCoRoutineControlBlock
xHalfMaxBlockTime	Demo/Common/Minimal/AbortDelay.c	/^const TickType_t xHalfMaxBlockTime = pdMS_TO_TICKS( 50 );$/;"	v
xHandle	Source/include/task.h	/^	TaskHandle_t xHandle;			\/* The handle of the task to which the rest of the information in the structure relates. *\/$/;"	m	struct:xTASK_STATUS
xHandle	Source/queue.c	/^		QueueHandle_t xHandle;$/;"	m	struct:QUEUE_REGISTRY_ITEM	file:
xHealthStatus	Demo/Common/Full/events.c	/^static portBASE_TYPE xHealthStatus = pdPASS;$/;"	v	file:
xHeapStructSize	Source/portable/MemMang/heap_4.c	/^static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT - 1 ) ) ) & ~( ( size_t ) portBYTE_ALIGNMENT_MASK );$/;"	v	file:
xHeapStructSize	Source/portable/MemMang/heap_5.c	/^static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT - 1 ) ) ) & ~( ( size_t ) portBYTE_ALIGNMENT_MASK );$/;"	v	file:
xHighPriorityMutexTask	Demo/Common/Minimal/GenQTest.c	/^static TaskHandle_t xHighPriorityMutexTask, xMediumPriorityMutexTask;$/;"	v	file:
xHighPriorityNormallyEmptyTask1	Demo/Common/Minimal/IntQueue.c	/^TaskHandle_t xHighPriorityNormallyEmptyTask1, xHighPriorityNormallyEmptyTask2, xHighPriorityNormallyFullTask1, xHighPriorityNormallyFullTask2;$/;"	v
xHighPriorityNormallyEmptyTask2	Demo/Common/Minimal/IntQueue.c	/^TaskHandle_t xHighPriorityNormallyEmptyTask1, xHighPriorityNormallyEmptyTask2, xHighPriorityNormallyFullTask1, xHighPriorityNormallyFullTask2;$/;"	v
xHighPriorityNormallyFullTask1	Demo/Common/Minimal/IntQueue.c	/^TaskHandle_t xHighPriorityNormallyEmptyTask1, xHighPriorityNormallyEmptyTask2, xHighPriorityNormallyFullTask1, xHighPriorityNormallyFullTask2;$/;"	v
xHighPriorityNormallyFullTask2	Demo/Common/Minimal/IntQueue.c	/^TaskHandle_t xHighPriorityNormallyEmptyTask1, xHighPriorityNormallyEmptyTask2, xHighPriorityNormallyFullTask1, xHighPriorityNormallyFullTask2;$/;"	v
xHighPriorityTask	Demo/Common/Minimal/QPeek.c	/^TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;$/;"	v
xHighestPriorityTask	Demo/Common/Minimal/QPeek.c	/^TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;$/;"	v
xHookRxQueues	Demo/Common/Minimal/crhook.c	/^static QueueHandle_t xHookRxQueues[ hookNUM_HOOK_CO_ROUTINES ];$/;"	v	file:
xHookTxQueues	Demo/Common/Minimal/crhook.c	/^static QueueHandle_t xHookTxQueues[ hookNUM_HOOK_CO_ROUTINES ];$/;"	v	file:
xISRAutoReloadTimer	Demo/Common/Minimal/TimerDemo.c	/^static TimerHandle_t xISRAutoReloadTimer = NULL;$/;"	v	file:
xISRCountingSemaphore	Demo/Common/Minimal/IntSemTest.c	/^static SemaphoreHandle_t xISRCountingSemaphore = NULL;$/;"	v	file:
xISREventGroup	Demo/Common/Minimal/EventGroupsDemo.c	/^static EventGroupHandle_t xISREventGroup = NULL;$/;"	v	file:
xISRMutex	Demo/Common/Minimal/IntSemTest.c	/^static SemaphoreHandle_t xISRMutex = NULL;$/;"	v	file:
xISROneShotTimer	Demo/Common/Minimal/TimerDemo.c	/^static TimerHandle_t xISROneShotTimer = NULL;$/;"	v	file:
xISRQueue	Demo/Common/Minimal/QueueOverwrite.c	/^static QueueHandle_t xISRQueue = NULL;$/;"	v	file:
xISRTestStatus	Demo/Common/Minimal/QueueOverwrite.c	/^static BaseType_t xISRTestStatus = pdPASS;$/;"	v	file:
xIdleTaskHandle	Source/tasks.c	/^PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			\/*< Holds the handle of the idle task.  The idle task is created automatically when the scheduler is started. *\/$/;"	v	file:
xInterruptGivePeriod	Demo/Common/Minimal/IntSemTest.c	/^const TickType_t xInterruptGivePeriod = pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS );$/;"	v
xIsCreateTaskStillRunning	Demo/Common/Full/death.c	/^portBASE_TYPE xIsCreateTaskStillRunning( void )$/;"	f
xIsCreateTaskStillRunning	Demo/Common/Minimal/death.c	/^BaseType_t xIsCreateTaskStillRunning( void )$/;"	f
xIsQueueOverwriteTaskStillRunning	Demo/Common/Minimal/QueueOverwrite.c	/^BaseType_t xIsQueueOverwriteTaskStillRunning( void )$/;"	f
xItemValue	Source/include/list.h	/^	configLIST_VOLATILE TickType_t xItemValue;			\/*< The value being listed.  In most cases this is used to sort the list in descending order. *\/$/;"	m	struct:xLIST_ITEM
xItemValue	Source/include/list.h	/^	configLIST_VOLATILE TickType_t xItemValue;$/;"	m	struct:xMINI_LIST_ITEM
xLEDParameters	Demo/Common/Full/flash.c	/^} xLEDParameters;$/;"	t	typeref:struct:LED_PARAMETERS	file:
xLIST	Source/include/list.h	/^typedef struct xLIST$/;"	s
xLIST_ITEM	Source/include/list.h	/^struct xLIST_ITEM$/;"	s
xLastTickCount	Source/croutine.c	/^static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	file:
xLimitedIncrementHandle	Demo/Common/Full/dynamic.c	/^static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle, xChangePriorityWhenSuspendedHandle;$/;"	v	file:
xLimitedIncrementHandle	Demo/Common/Minimal/dynamic.c	/^static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;$/;"	v	file:
xList	Source/include/FreeRTOS.h	849;"	d
xListEnd	Source/include/list.h	/^	MiniListItem_t xListEnd;							\/*< List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. *\/$/;"	m	struct:xLIST
xListItem	Source/include/FreeRTOS.h	848;"	d
xMEMORY_REGION	Source/include/task.h	/^typedef struct xMEMORY_REGION$/;"	s
xMINI_LIST_ITEM	Source/include/list.h	/^struct xMINI_LIST_ITEM$/;"	s
xMPUSettings	Source/tasks.c	/^		xMPU_SETTINGS	xMPUSettings;		\/*< The MPU settings are defined as part of the port layer.  THIS MUST BE THE SECOND MEMBER OF THE TCB STRUCT. *\/$/;"	m	struct:tskTaskControlBlock	file:
xMasterSlaveMutex	Demo/Common/Minimal/IntSemTest.c	/^static SemaphoreHandle_t xMasterSlaveMutex = NULL;$/;"	v	file:
xMaxBlockTime	Demo/Common/Minimal/AbortDelay.c	/^const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 100 );$/;"	v
xMediumPriorityMutexTask	Demo/Common/Minimal/GenQTest.c	/^static TaskHandle_t xHighPriorityMutexTask, xMediumPriorityMutexTask;$/;"	v	file:
xMediumPriorityTask	Demo/Common/Minimal/QPeek.c	/^TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;$/;"	v
xMemoryRegion	Source/include/FreeRTOS.h	832;"	d
xMessageID	Source/timers.c	/^	BaseType_t			xMessageID;			\/*<< The command being sent to the timer service task. *\/$/;"	m	struct:tmrTimerQueueMessage	file:
xMessageValue	Source/timers.c	/^	TickType_t			xMessageValue;		\/*<< An optional value used by a subset of commands, for example, when changing the period of a timer. *\/$/;"	m	struct:tmrTimerParameters	file:
xMinimumEverFreeBytesRemaining	Source/portable/MemMang/heap_4.c	/^static size_t xMinimumEverFreeBytesRemaining = 0U;$/;"	v	file:
xMinimumEverFreeBytesRemaining	Source/portable/MemMang/heap_5.c	/^static size_t xMinimumEverFreeBytesRemaining = 0U;$/;"	v	file:
xMutex	Demo/Common/Minimal/recmutex.c	/^static SemaphoreHandle_t xMutex;$/;"	v	file:
xNewLib_reent	Source/tasks.c	/^		struct	_reent xNewLib_reent;$/;"	m	struct:tskTaskControlBlock	typeref:struct:tskTaskControlBlock::_reent	file:
xNextFreeByte	Source/portable/MemMang/heap_1.c	/^static size_t xNextFreeByte = ( size_t ) 0;$/;"	v	file:
xNextTaskUnblockTime	Source/tasks.c	/^PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; \/* Initialised to portMAX_DELAY before the scheduler starts. *\/$/;"	v	file:
xNormallyEmptyQueue	Demo/Common/Minimal/IntQueue.c	/^static QueueHandle_t xNormallyEmptyQueue, xNormallyFullQueue;$/;"	v	file:
xNormallyFullQueue	Demo/Common/Minimal/IntQueue.c	/^static QueueHandle_t xNormallyEmptyQueue, xNormallyFullQueue;$/;"	v	file:
xNotifyTaskFromISR	Demo/Common/Minimal/TaskNotify.c	/^void xNotifyTaskFromISR( void )$/;"	f
xNumOfOverflows	Source/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;$/;"	v	file:
xOkToGiveCountingSemaphore	Demo/Common/Minimal/IntSemTest.c	/^static BaseType_t xOkToGiveMutex = pdFALSE, xOkToGiveCountingSemaphore = pdFALSE;$/;"	v	file:
xOkToGiveMutex	Demo/Common/Minimal/IntSemTest.c	/^static BaseType_t xOkToGiveMutex = pdFALSE, xOkToGiveCountingSemaphore = pdFALSE;$/;"	v	file:
xOneShotTimer	Demo/Common/Minimal/TimerDemo.c	/^static TimerHandle_t xOneShotTimer = NULL;$/;"	v	file:
xOverflowCount	Source/include/task.h	/^	BaseType_t xOverflowCount;$/;"	m	struct:xTIME_OUT
xParameters	Demo/Common/Minimal/countsem.c	/^static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];$/;"	v	file:
xPassedTicks	Source/croutine.c	/^static TickType_t xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;$/;"	v	file:
xPendingReadyCoRoutineList	Source/croutine.c	/^static List_t xPendingReadyCoRoutineList;								\/*< Holds co-routines that have been readied by an external event.  They cannot be added directly to the ready lists as the ready lists cannot be accessed by interrupts. *\/$/;"	v	file:
xPendingReadyList	Source/tasks.c	/^PRIVILEGED_DATA static List_t xPendingReadyList;						\/*< Tasks that have been readied while the scheduler was suspended.  They will be moved to the ready list when the scheduler is resumed. *\/$/;"	v	file:
xPollingConsumerCount	Demo/Common/Minimal/PollQ.c	/^static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;$/;"	v	file:
xPollingProducerCount	Demo/Common/Minimal/PollQ.c	/^static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;$/;"	v	file:
xPort	Demo/Common/Full/comtest.c	/^static xComPortHandle xPort;$/;"	v	file:
xPort	Demo/Common/Minimal/comtest.c	/^static xComPortHandle xPort = NULL;$/;"	v	file:
xPort	Demo/Common/Minimal/comtest_strings.c	/^static xComPortHandle xPort = NULL;$/;"	v	file:
xPortGetFreeHeapSize	Source/portable/MemMang/heap_1.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetFreeHeapSize	Source/portable/MemMang/heap_2.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetFreeHeapSize	Source/portable/MemMang/heap_4.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetFreeHeapSize	Source/portable/MemMang/heap_5.c	/^size_t xPortGetFreeHeapSize( void )$/;"	f
xPortGetMinimumEverFreeHeapSize	Source/portable/MemMang/heap_4.c	/^size_t xPortGetMinimumEverFreeHeapSize( void )$/;"	f
xPortGetMinimumEverFreeHeapSize	Source/portable/MemMang/heap_5.c	/^size_t xPortGetMinimumEverFreeHeapSize( void )$/;"	f
xPortStartScheduler	Source/portable/MPLAB/PIC24_dsPIC/port.c	/^BaseType_t xPortStartScheduler( void )$/;"	f
xPrimaryCycles	Demo/Common/Minimal/blocktim.c	/^static volatile BaseType_t xPrimaryCycles = 0, xSecondaryCycles = 0;$/;"	v	file:
xPrintQueue	Demo/Common/Full/print.c	/^static QueueHandle_t xPrintQueue;$/;"	v	file:
xPriorityRaiseWhenSuspendedError	Demo/Common/Full/dynamic.c	/^static portBASE_TYPE xPriorityRaiseWhenSuspendedError = pdFALSE;$/;"	v	file:
xQUEUE	Source/queue.c	/^} xQUEUE;$/;"	t	typeref:struct:QueueDefinition	file:
xQueue	Demo/Common/Full/BlockQ.c	/^	QueueHandle_t xQueue;					\/*< The queue to be used by the task. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
xQueue	Demo/Common/Full/events.c	/^static QueueHandle_t xQueue;$/;"	v	file:
xQueue	Demo/Common/Minimal/BlockQ.c	/^	QueueHandle_t xQueue;					\/*< The queue to be used by the task. *\/$/;"	m	struct:BLOCKING_QUEUE_PARAMETERS	file:
xQueue	Demo/Common/Minimal/QueueSetPolling.c	/^static QueueHandle_t xQueue = NULL;$/;"	v	file:
xQueueAddToSet	Source/include/mpu_wrappers.h	147;"	d
xQueueAddToSet	Source/queue.c	/^	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )$/;"	f
xQueueCRReceive	Source/queue.c	/^	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )$/;"	f
xQueueCRReceiveFromISR	Source/queue.c	/^	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )$/;"	f
xQueueCRSend	Source/queue.c	/^	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )$/;"	f
xQueueCRSendFromISR	Source/queue.c	/^	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )$/;"	f
xQueueCreate	Source/include/queue.h	186;"	d
xQueueCreateCountingSemaphore	Source/include/mpu_wrappers.h	139;"	d
xQueueCreateCountingSemaphore	Source/queue.c	/^	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )$/;"	f
xQueueCreateCountingSemaphoreStatic	Source/include/mpu_wrappers.h	140;"	d
xQueueCreateCountingSemaphoreStatic	Source/queue.c	/^	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )$/;"	f
xQueueCreateMutex	Source/include/mpu_wrappers.h	137;"	d
xQueueCreateMutex	Source/queue.c	/^	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )$/;"	f
xQueueCreateMutexStatic	Source/include/mpu_wrappers.h	138;"	d
xQueueCreateMutexStatic	Source/queue.c	/^	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )$/;"	f
xQueueCreateSet	Source/include/mpu_wrappers.h	146;"	d
xQueueCreateSet	Source/queue.c	/^	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )$/;"	f
xQueueCreateStatic	Source/include/queue.h	272;"	d
xQueueGenericCreate	Source/include/mpu_wrappers.h	144;"	d
xQueueGenericCreate	Source/queue.c	/^	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )$/;"	f
xQueueGenericCreateStatic	Source/include/mpu_wrappers.h	145;"	d
xQueueGenericCreateStatic	Source/queue.c	/^	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )$/;"	f
xQueueGenericReceive	Source/include/mpu_wrappers.h	133;"	d
xQueueGenericReceive	Source/queue.c	/^BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )$/;"	f
xQueueGenericReset	Source/include/mpu_wrappers.h	150;"	d
xQueueGenericReset	Source/queue.c	/^BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )$/;"	f
xQueueGenericSend	Source/include/mpu_wrappers.h	132;"	d
xQueueGenericSend	Source/queue.c	/^BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )$/;"	f
xQueueGenericSendFromISR	Source/queue.c	/^BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )$/;"	f
xQueueGetMutexHolder	Source/include/mpu_wrappers.h	141;"	d
xQueueGetMutexHolder	Source/queue.c	/^	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )$/;"	f
xQueueGiveFromISR	Source/queue.c	/^BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )$/;"	f
xQueueGiveMutexRecursive	Source/include/mpu_wrappers.h	143;"	d
xQueueGiveMutexRecursive	Source/queue.c	/^	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )$/;"	f
xQueueHandle	Source/include/FreeRTOS.h	827;"	d
xQueueIsQueueEmptyFromISR	Source/queue.c	/^BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )$/;"	f
xQueueIsQueueFullFromISR	Source/queue.c	/^BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )$/;"	f
xQueueOverwrite	Source/include/queue.h	604;"	d
xQueueOverwriteFromISR	Source/include/queue.h	1287;"	d
xQueuePeek	Source/include/queue.h	788;"	d
xQueuePeekFromISR	Source/queue.c	/^BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )$/;"	f
xQueueReceive	Source/include/queue.h	914;"	d
xQueueReceiveFromISR	Source/queue.c	/^BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )$/;"	f
xQueueRegistry	Source/queue.c	/^	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];$/;"	v
xQueueRegistryItem	Source/queue.c	/^	} xQueueRegistryItem;$/;"	t	typeref:struct:QUEUE_REGISTRY_ITEM	file:
xQueueRemoveFromSet	Source/include/mpu_wrappers.h	148;"	d
xQueueRemoveFromSet	Source/queue.c	/^	BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )$/;"	f
xQueueReset	Source/include/queue.h	1576;"	d
xQueueSelectFromSet	Source/include/mpu_wrappers.h	149;"	d
xQueueSelectFromSet	Source/queue.c	/^	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )$/;"	f
xQueueSelectFromSetFromISR	Source/queue.c	/^	QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )$/;"	f
xQueueSend	Source/include/queue.h	521;"	d
xQueueSendFromISR	Source/include/queue.h	1361;"	d
xQueueSendToBack	Source/include/queue.h	437;"	d
xQueueSendToBackFromISR	Source/include/queue.h	1200;"	d
xQueueSendToFront	Source/include/queue.h	355;"	d
xQueueSendToFrontFromISR	Source/include/queue.h	1129;"	d
xQueueSet	Demo/Common/Minimal/QueueSet.c	/^static QueueSetHandle_t xQueueSet;$/;"	v	file:
xQueueSet	Demo/Common/Minimal/QueueSetPolling.c	/^static QueueSetHandle_t xQueueSet = NULL;$/;"	v	file:
xQueueSetHandle	Source/include/FreeRTOS.h	829;"	d
xQueueSetMemberHandle	Source/include/FreeRTOS.h	830;"	d
xQueueSetPollStatus	Demo/Common/Minimal/QueueSetPolling.c	/^static volatile BaseType_t xQueueSetPollStatus = pdPASS;$/;"	v	file:
xQueueSetReceivingTask	Demo/Common/Minimal/QueueSet.c	/^TaskHandle_t xQueueSetSendingTask, xQueueSetReceivingTask;$/;"	v
xQueueSetSendingTask	Demo/Common/Minimal/QueueSet.c	/^TaskHandle_t xQueueSetSendingTask, xQueueSetReceivingTask;$/;"	v
xQueueSetTasksStatus	Demo/Common/Minimal/QueueSet.c	/^static volatile BaseType_t xQueueSetTasksStatus = pdPASS;$/;"	v	file:
xQueueTakeMutexRecursive	Source/include/mpu_wrappers.h	142;"	d
xQueueTakeMutexRecursive	Source/queue.c	/^	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )$/;"	f
xQueues	Demo/Common/Minimal/QueueSet.c	/^static QueueHandle_t xQueues[ queuesetNUM_QUEUES_IN_SET ] = { 0 };$/;"	v	file:
xRegions	Source/include/task.h	/^	MemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];$/;"	m	struct:xTASK_PARAMETERS
xRunIndicator	Demo/Common/Minimal/blocktim.c	/^static volatile UBaseType_t xRunIndicator;$/;"	v	file:
xRxedChars	Demo/dsPIC33E_MPLAB/serial/serial.c	/^static QueueHandle_t xRxedChars; $/;"	v	file:
xSTATIC_EVENT_GROUP	Source/include/FreeRTOS.h	/^typedef struct xSTATIC_EVENT_GROUP$/;"	s
xSTATIC_LIST	Source/include/FreeRTOS.h	/^typedef struct xSTATIC_LIST$/;"	s
xSTATIC_LIST_ITEM	Source/include/FreeRTOS.h	/^struct xSTATIC_LIST_ITEM$/;"	s
xSTATIC_MINI_LIST_ITEM	Source/include/FreeRTOS.h	/^struct xSTATIC_MINI_LIST_ITEM$/;"	s
xSTATIC_QUEUE	Source/include/FreeRTOS.h	/^typedef struct xSTATIC_QUEUE$/;"	s
xSTATIC_TCB	Source/include/FreeRTOS.h	/^typedef struct xSTATIC_TCB$/;"	s
xSTATIC_TIMER	Source/include/FreeRTOS.h	/^typedef struct xSTATIC_TIMER$/;"	s
xSchedulerRunning	Source/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;$/;"	v	file:
xSecondTimerHandler	Demo/Common/Minimal/IntQueue.c	/^BaseType_t xSecondTimerHandler( void )$/;"	f
xSecondary	Demo/Common/Minimal/blocktim.c	/^static TaskHandle_t xSecondary;$/;"	v	file:
xSecondaryCycles	Demo/Common/Minimal/blocktim.c	/^static volatile BaseType_t xPrimaryCycles = 0, xSecondaryCycles = 0;$/;"	v	file:
xSemTestTaskHandle	Demo/Common/Full/comtest.c	/^static TaskHandle_t xSemTestTaskHandle = NULL;$/;"	v	file:
xSemaphore	Demo/Common/Full/semtest.c	/^	SemaphoreHandle_t xSemaphore;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
xSemaphore	Demo/Common/Minimal/countsem.c	/^	SemaphoreHandle_t xSemaphore;$/;"	m	struct:COUNT_SEM_STRUCT	file:
xSemaphore	Demo/Common/Minimal/semtest.c	/^	SemaphoreHandle_t xSemaphore;$/;"	m	struct:SEMAPHORE_PARAMETERS	file:
xSemaphoreCreateBinary	Source/include/semphr.h	204;"	d
xSemaphoreCreateBinaryStatic	Source/include/semphr.h	263;"	d
xSemaphoreCreateCounting	Source/include/semphr.h	1040;"	d
xSemaphoreCreateCountingStatic	Source/include/semphr.h	1125;"	d
xSemaphoreCreateMutex	Source/include/semphr.h	758;"	d
xSemaphoreCreateMutexStatic	Source/include/semphr.h	819;"	d
xSemaphoreCreateRecursiveMutex	Source/include/semphr.h	887;"	d
xSemaphoreCreateRecursiveMutexStatic	Source/include/semphr.h	960;"	d
xSemaphoreGetMutexHolder	Source/include/semphr.h	1155;"	d
xSemaphoreGive	Source/include/semphr.h	489;"	d
xSemaphoreGiveFromISR	Source/include/semphr.h	666;"	d
xSemaphoreGiveRecursive	Source/include/semphr.h	574;"	d
xSemaphoreHandle	Source/include/FreeRTOS.h	828;"	d
xSemaphoreParameters	Demo/Common/Full/semtest.c	/^} xSemaphoreParameters;$/;"	t	typeref:struct:SEMAPHORE_PARAMETERS	file:
xSemaphoreParameters	Demo/Common/Minimal/semtest.c	/^} xSemaphoreParameters;$/;"	t	typeref:struct:SEMAPHORE_PARAMETERS	file:
xSemaphoreTake	Source/include/semphr.h	331;"	d
xSemaphoreTakeFromISR	Source/include/semphr.h	700;"	d
xSemaphoreTakeRecursive	Source/include/semphr.h	425;"	d
xSerialGetChar	Demo/dsPIC33E_MPLAB/serial/serial.c	/^signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, TickType_t xBlockTime )$/;"	f
xSerialPortInitMinimal	Demo/dsPIC33E_MPLAB/serial/serial.c	/^xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )$/;"	f
xSerialPutChar	Demo/dsPIC33E_MPLAB/serial/serial.c	/^signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )$/;"	f
xSetupComplete	Demo/Common/Minimal/QueueSet.c	/^static volatile BaseType_t xSetupComplete = pdFALSE;$/;"	v	file:
xSizeInBytes	Source/include/portable.h	/^	size_t xSizeInBytes;$/;"	m	struct:HeapRegion
xSlaveHandle	Demo/Common/Minimal/IntSemTest.c	/^static TaskHandle_t xSlaveHandle;$/;"	v	file:
xStart	Source/portable/MemMang/heap_2.c	/^static BlockLink_t xStart, xEnd;$/;"	v	file:
xStart	Source/portable/MemMang/heap_4.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
xStart	Source/portable/MemMang/heap_5.c	/^static BlockLink_t xStart, *pxEnd = NULL;$/;"	v	file:
xStateListItem	Source/tasks.c	/^	ListItem_t			xStateListItem;	\/*< The list that the state list item of a task is reference from denotes the state of that task (Ready, Blocked, Suspended ). *\/$/;"	m	struct:tskTaskControlBlock	file:
xStringLength	Demo/Common/Minimal/comtest_strings.c	/^static size_t xStringLength = 0U;$/;"	v	file:
xSuspendedQueueReceiveError	Demo/Common/Full/dynamic.c	/^static portBASE_TYPE xSuspendedQueueReceiveError = pdFALSE;$/;"	v	file:
xSuspendedQueueReceiveError	Demo/Common/Minimal/dynamic.c	/^static volatile BaseType_t xSuspendedQueueReceiveError = pdFALSE;$/;"	v	file:
xSuspendedQueueSendError	Demo/Common/Full/dynamic.c	/^static portBASE_TYPE xSuspendedQueueSendError = pdFALSE;$/;"	v	file:
xSuspendedQueueSendError	Demo/Common/Minimal/dynamic.c	/^static volatile BaseType_t xSuspendedQueueSendError = pdFALSE;$/;"	v	file:
xSuspendedTaskList	Source/tasks.c	/^	PRIVILEGED_DATA static List_t xSuspendedTaskList;					\/*< Tasks that are currently suspended. *\/$/;"	v	file:
xSuspendedTestQueue	Demo/Common/Full/dynamic.c	/^QueueHandle_t xSuspendedTestQueue;$/;"	v
xSuspendedTestQueue	Demo/Common/Minimal/dynamic.c	/^QueueHandle_t xSuspendedTestQueue;$/;"	v
xSyncTask1	Demo/Common/Minimal/EventGroupsDemo.c	/^static TaskHandle_t xSyncTask1 = NULL, xSyncTask2 = NULL;$/;"	v	file:
xSyncTask2	Demo/Common/Minimal/EventGroupsDemo.c	/^static TaskHandle_t xSyncTask1 = NULL, xSyncTask2 = NULL;$/;"	v	file:
xTASK_PARAMETERS	Source/include/task.h	/^typedef struct xTASK_PARAMETERS$/;"	s
xTASK_STATUS	Source/include/task.h	/^typedef struct xTASK_STATUS$/;"	s
xTIMER	Source/timers.c	/^} xTIMER;$/;"	t	typeref:struct:tmrTimerControl	file:
xTIME_OUT	Source/include/task.h	/^typedef struct xTIME_OUT$/;"	s
xTaskAbortDelay	Source/include/mpu_wrappers.h	98;"	d
xTaskAbortDelay	Source/tasks.c	/^	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )$/;"	f
xTaskCallApplicationTaskHook	Source/include/mpu_wrappers.h	116;"	d
xTaskCallApplicationTaskHook	Source/tasks.c	/^	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )$/;"	f
xTaskCheck	Demo/Common/Minimal/integer.c	/^static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };$/;"	v	file:
xTaskCheckForTimeOut	Source/include/mpu_wrappers.h	128;"	d
xTaskCheckForTimeOut	Source/tasks.c	/^BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )$/;"	f
xTaskCounters	Demo/Common/Full/events.c	/^static volatile portBASE_TYPE xTaskCounters[ evtNUM_TASKS ] = { 0, 0, 0, 0 };$/;"	v	file:
xTaskCreate	Source/include/mpu_wrappers.h	91;"	d
xTaskCreate	Source/tasks.c	/^	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,$/;"	f
xTaskCreateRestricted	Source/include/mpu_wrappers.h	93;"	d
xTaskCreateRestricted	Source/tasks.c	/^	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *pxCreatedTask )$/;"	f
xTaskCreateStatic	Source/include/mpu_wrappers.h	92;"	d
xTaskCreateStatic	Source/tasks.c	/^	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,$/;"	f
xTaskGenericNotify	Source/include/mpu_wrappers.h	121;"	d
xTaskGenericNotify	Source/tasks.c	/^	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )$/;"	f
xTaskGenericNotifyFromISR	Source/tasks.c	/^	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
xTaskGetApplicationTaskTag	Source/include/mpu_wrappers.h	113;"	d
xTaskGetApplicationTaskTag	Source/tasks.c	/^	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )$/;"	f
xTaskGetCurrentTaskHandle	Source/include/mpu_wrappers.h	126;"	d
xTaskGetCurrentTaskHandle	Source/tasks.c	/^	TaskHandle_t xTaskGetCurrentTaskHandle( void )$/;"	f
xTaskGetHandle	Source/include/mpu_wrappers.h	110;"	d
xTaskGetHandle	Source/tasks.c	/^	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) \/*lint !e971 Unqualified char types are allowed for strings and single characters only. *\/$/;"	f
xTaskGetIdleTaskHandle	Source/include/mpu_wrappers.h	117;"	d
xTaskGetIdleTaskHandle	Source/tasks.c	/^	TaskHandle_t xTaskGetIdleTaskHandle( void )$/;"	f
xTaskGetSchedulerState	Source/include/mpu_wrappers.h	129;"	d
xTaskGetSchedulerState	Source/tasks.c	/^	BaseType_t xTaskGetSchedulerState( void )$/;"	f
xTaskGetTickCount	Source/include/mpu_wrappers.h	107;"	d
xTaskGetTickCount	Source/tasks.c	/^TickType_t xTaskGetTickCount( void )$/;"	f
xTaskGetTickCountFromISR	Source/tasks.c	/^TickType_t xTaskGetTickCountFromISR( void )$/;"	f
xTaskHandle	Source/include/FreeRTOS.h	826;"	d
xTaskIncrementTick	Source/tasks.c	/^BaseType_t xTaskIncrementTick( void )$/;"	f
xTaskNotify	Source/include/task.h	1712;"	d
xTaskNotifyAndQuery	Source/include/task.h	1713;"	d
xTaskNotifyAndQueryFromISR	Source/include/task.h	1804;"	d
xTaskNotifyFromISR	Source/include/task.h	1803;"	d
xTaskNotifyGive	Source/include/task.h	1925;"	d
xTaskNotifyStateClear	Source/include/mpu_wrappers.h	124;"	d
xTaskNotifyStateClear	Source/tasks.c	/^	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )$/;"	f
xTaskNotifyWait	Source/include/mpu_wrappers.h	122;"	d
xTaskNotifyWait	Source/tasks.c	/^	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )$/;"	f
xTaskNumber	Source/include/task.h	/^	UBaseType_t xTaskNumber;		\/* A number unique to the task. *\/$/;"	m	struct:xTASK_STATUS
xTaskParameters	Source/include/FreeRTOS.h	833;"	d
xTaskPriorityDisinherit	Source/tasks.c	/^	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )$/;"	f
xTaskRemoveFromEventList	Source/tasks.c	/^BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )$/;"	f
xTaskRemoveFromUnorderedEventList	Source/tasks.c	/^BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )$/;"	f
xTaskResumeAll	Source/include/mpu_wrappers.h	106;"	d
xTaskResumeAll	Source/tasks.c	/^BaseType_t xTaskResumeAll( void )$/;"	f
xTaskResumeFromISR	Source/tasks.c	/^	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )$/;"	f
xTaskStatusType	Source/include/FreeRTOS.h	834;"	d
xTaskToNotify	Demo/Common/Minimal/TaskNotify.c	/^static TaskHandle_t xTaskToNotify = NULL;$/;"	v	file:
xTasksWaitingForBits	Source/event_groups.c	/^	List_t xTasksWaitingForBits;		\/*< List of tasks waiting for a bit to be set. *\/$/;"	m	struct:xEventGroupDefinition	file:
xTasksWaitingTermination	Source/tasks.c	/^	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				\/*< Tasks that have been deleted - but their memory not yet freed. *\/$/;"	v	file:
xTasksWaitingToReceive	Source/queue.c	/^	List_t xTasksWaitingToReceive;	\/*< List of tasks that are blocked waiting to read from this queue.  Stored in priority order. *\/$/;"	m	struct:QueueDefinition	file:
xTasksWaitingToSend	Source/queue.c	/^	List_t xTasksWaitingToSend;		\/*< List of tasks that are blocked waiting to post onto this queue.  Stored in priority order. *\/$/;"	m	struct:QueueDefinition	file:
xTestQueue	Demo/Common/Minimal/blocktim.c	/^static QueueHandle_t xTestQueue;$/;"	v	file:
xTestStatus	Demo/Common/Minimal/TimerDemo.c	/^static volatile BaseType_t xTestStatus = pdPASS;$/;"	v	file:
xTickCount	Source/tasks.c	/^PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;$/;"	v	file:
xTimeOnEntering	Source/include/task.h	/^	TickType_t xTimeOnEntering;$/;"	m	struct:xTIME_OUT
xTimeOutType	Source/include/FreeRTOS.h	831;"	d
xTimer	Demo/Common/Minimal/TaskNotify.c	/^static TimerHandle_t xTimer = NULL;$/;"	v	file:
xTimerChangePeriod	Source/include/timers.h	667;"	d
xTimerChangePeriodFromISR	Source/include/timers.h	1051;"	d
xTimerCreate	Source/include/mpu_wrappers.h	159;"	d
xTimerCreate	Source/timers.c	/^	TimerHandle_t xTimerCreate(	const char * const pcTimerName,$/;"	f
xTimerCreateStatic	Source/include/mpu_wrappers.h	160;"	d
xTimerCreateStatic	Source/timers.c	/^	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,$/;"	f
xTimerCreateTimerTask	Source/timers.c	/^BaseType_t xTimerCreateTimerTask( void )$/;"	f
xTimerDelete	Source/include/timers.h	705;"	d
xTimerGenericCommand	Source/include/mpu_wrappers.h	169;"	d
xTimerGenericCommand	Source/timers.c	/^BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )$/;"	f
xTimerGetExpiryTime	Source/include/mpu_wrappers.h	168;"	d
xTimerGetExpiryTime	Source/timers.c	/^TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )$/;"	f
xTimerGetPeriod	Source/include/mpu_wrappers.h	167;"	d
xTimerGetPeriod	Source/timers.c	/^TickType_t xTimerGetPeriod( TimerHandle_t xTimer )$/;"	f
xTimerGetTimerDaemonTaskHandle	Source/include/mpu_wrappers.h	164;"	d
xTimerGetTimerDaemonTaskHandle	Source/timers.c	/^TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )$/;"	f
xTimerHandle	Source/include/FreeRTOS.h	835;"	d
xTimerIsTimerActive	Source/include/mpu_wrappers.h	163;"	d
xTimerIsTimerActive	Source/timers.c	/^BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )$/;"	f
xTimerListItem	Source/timers.c	/^	ListItem_t				xTimerListItem;		\/*<< Standard linked list item as used by all kernel features for event management. *\/$/;"	m	struct:tmrTimerControl	file:
xTimerParameters	Source/timers.c	/^		TimerParameter_t xTimerParameters;$/;"	m	union:tmrTimerQueueMessage::__anon2	file:
xTimerPendFunctionCall	Source/include/mpu_wrappers.h	165;"	d
xTimerPendFunctionCall	Source/timers.c	/^	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )$/;"	f
xTimerPendFunctionCallFromISR	Source/timers.c	/^	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )$/;"	f
xTimerPeriodInTicks	Source/timers.c	/^	TickType_t				xTimerPeriodInTicks;\/*<< How quickly and often the timer expires. *\/$/;"	m	struct:tmrTimerControl	file:
xTimerQueue	Source/timers.c	/^PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;$/;"	v	file:
xTimerReset	Source/include/timers.h	829;"	d
xTimerResetFromISR	Source/include/timers.h	1137;"	d
xTimerStart	Source/include/timers.h	545;"	d
xTimerStartFromISR	Source/include/timers.h	915;"	d
xTimerStop	Source/include/timers.h	587;"	d
xTimerStopFromISR	Source/include/timers.h	978;"	d
xTimerTaskHandle	Source/timers.c	/^PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;$/;"	v	file:
xTxHasEnded	Demo/dsPIC33E_MPLAB/serial/serial.c	/^static portBASE_TYPE xTxHasEnded;$/;"	v	file:
xTxTimer	Demo/Common/Minimal/comtest_strings.c	/^static TimerHandle_t xTxTimer = NULL;$/;"	v	file:
xWasSuspended	Demo/Common/Minimal/IntQueue.c	/^static BaseType_t xWasSuspended = pdFALSE;$/;"	v	file:
xYieldPending	Source/tasks.c	/^PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;$/;"	v	file:
